const e=JSON.parse(`{"key":"v-d8d0512a","path":"/posts/Jenkins-API.html","title":"Jenkins-API","lang":"zh-CN","frontmatter":{"title":"Jenkins-API","date":"2022-05-13T02:43:18.000Z","categories":"Jenkins","tags":["Jenkins"],"description":"REST API Many objects of Jenkins provide the remote access API. They are available at /.../api/ where \\"...\\" portion is the object for which you'd like to access. XML API Access data exposed in HTML as XML for machine consumption. Schema is also available.You can also specify optional XPath to control the fragment you'd like to obtain (but see below). For example, ../api/xml?xpath=/*/*[0].For XPath that matches multiple nodes, you need to also specify the \\"wrapper\\" query parameter to specify the name of the root XML element to be create so that the resulting XML becomes well-formed.Similarly exclude query parameter can be used to exclude nodes that match the given XPath from the result. This is useful for trimming down the amount of data you fetch (but again see below). This query parameter can be specified multiple times.XPath filtering is powerful, and you can have it only return a very small data, but note that the server still has to build a full DOM of the raw data, which could cause a large memory spike. To avoid overloading the server, consider using the tree parameter, or use the xpath parameter in conjunction with the tree parameter. When used together, the result of the tree parameter filtering is built into DOM, then the XPath is applied to compute the final return value. In this way, you can often substantially reduce the size of DOM built in memory. JSON API Access the same data as JSON for JavaScript-based access. tree may be used. Python API Access the same data as Python for Python clients. This can be parsed into Python objects as ast.literal_eval(urllib.urlopen(\\"...\\").read()) and the resulting object tree is identical to that of JSON.","head":[["meta",{"property":"og:url","content":"https://mister-hope.github.io/posts/Jenkins-API.html"}],["meta",{"property":"og:site_name","content":"常潇的技术站"}],["meta",{"property":"og:title","content":"Jenkins-API"}],["meta",{"property":"og:description","content":"REST API Many objects of Jenkins provide the remote access API. They are available at /.../api/ where \\"...\\" portion is the object for which you'd like to access. XML API Access data exposed in HTML as XML for machine consumption. Schema is also available.You can also specify optional XPath to control the fragment you'd like to obtain (but see below). For example, ../api/xml?xpath=/*/*[0].For XPath that matches multiple nodes, you need to also specify the \\"wrapper\\" query parameter to specify the name of the root XML element to be create so that the resulting XML becomes well-formed.Similarly exclude query parameter can be used to exclude nodes that match the given XPath from the result. This is useful for trimming down the amount of data you fetch (but again see below). This query parameter can be specified multiple times.XPath filtering is powerful, and you can have it only return a very small data, but note that the server still has to build a full DOM of the raw data, which could cause a large memory spike. To avoid overloading the server, consider using the tree parameter, or use the xpath parameter in conjunction with the tree parameter. When used together, the result of the tree parameter filtering is built into DOM, then the XPath is applied to compute the final return value. In this way, you can often substantially reduce the size of DOM built in memory. JSON API Access the same data as JSON for JavaScript-based access. tree may be used. Python API Access the same data as Python for Python clients. This can be parsed into Python objects as ast.literal_eval(urllib.urlopen(\\"...\\").read()) and the resulting object tree is identical to that of JSON."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-01-18T12:43:38.000Z"}],["meta",{"property":"article:author","content":"常潇-KeepCool"}],["meta",{"property":"article:tag","content":"Jenkins"}],["meta",{"property":"article:published_time","content":"2022-05-13T02:43:18.000Z"}],["meta",{"property":"article:modified_time","content":"2024-01-18T12:43:38.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"Jenkins-API\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2022-05-13T02:43:18.000Z\\",\\"dateModified\\":\\"2024-01-18T12:43:38.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"常潇-KeepCool\\",\\"url\\":\\"https://mister-hope.com\\"}]}"]]},"headers":[{"level":2,"title":"Controlling the amount of data you fetch","slug":"controlling-the-amount-of-data-you-fetch","link":"#controlling-the-amount-of-data-you-fetch","children":[]},{"level":2,"title":"Create Job","slug":"create-job","link":"#create-job","children":[]},{"level":2,"title":"Copy Job","slug":"copy-job","link":"#copy-job","children":[]},{"level":2,"title":"Build Queue","slug":"build-queue","link":"#build-queue","children":[]},{"level":2,"title":"Load Statistics","slug":"load-statistics","link":"#load-statistics","children":[]},{"level":2,"title":"Restarting Jenkins","slug":"restarting-jenkins","link":"#restarting-jenkins","children":[]},{"level":2,"title":"Maven依赖","slug":"maven依赖","link":"#maven依赖","children":[]},{"level":2,"title":"连接Jenkins","slug":"连接jenkins","link":"#连接jenkins","children":[]},{"level":2,"title":"操作Job","slug":"操作job","link":"#操作job","children":[{"level":3,"title":"创建Job","slug":"创建job","link":"#创建job","children":[]}]}],"git":{"createdTime":1705581818000,"updatedTime":1705581818000,"contributors":[{"name":"jisongyang","email":"jisongyang@kuaishou.com","commits":1}]},"readingTime":{"minutes":5.47,"words":1642},"filePathRelative":"posts/Jenkins-API.md","localizedDate":"2022年5月13日","excerpt":"<h1> REST API</h1>\\n<p>Many objects of Jenkins provide the remote access API. They are available at <code>/.../api/</code> where \\"...\\" portion is the object for which you'd like to access.</p>\\n<ul>\\n<li>\\n<p><a href=\\"http://211.87.224.233:18080/api/xml\\" target=\\"_blank\\" rel=\\"noopener noreferrer\\">XML API</a></p>\\n<p>Access data exposed in <a href=\\"http://211.87.224.233:18080/\\" target=\\"_blank\\" rel=\\"noopener noreferrer\\">HTML</a> as XML for machine consumption. <a href=\\"http://211.87.224.233:18080/api/schema\\" target=\\"_blank\\" rel=\\"noopener noreferrer\\">Schema</a> is also available.You can also specify optional XPath to control the fragment you'd like to obtain (but see <a href=\\"http://211.87.224.233:18080/api/#tree\\" target=\\"_blank\\" rel=\\"noopener noreferrer\\">below</a>). For example, <code>../api/xml?xpath=/*/*[0]</code>.For XPath that matches multiple nodes, you need to also specify the \\"wrapper\\" query parameter to specify the name of the root XML element to be create so that the resulting XML becomes well-formed.Similarly <code>exclude</code> query parameter can be used to exclude nodes that match the given XPath from the result. This is useful for trimming down the amount of data you fetch (but again see <a href=\\"http://211.87.224.233:18080/api/#tree\\" target=\\"_blank\\" rel=\\"noopener noreferrer\\">below</a>). This query parameter can be specified multiple times.XPath filtering is powerful, and you can have it only return a very small data, but note that the server still has to build a full DOM of the raw data, which could cause a large memory spike. To avoid overloading the server, consider using the <code>tree</code> parameter, or use the <code>xpath</code> parameter in conjunction with the <code>tree</code> parameter. When used together, the result of the <code>tree</code> parameter filtering is built into DOM, then the XPath is applied to compute the final return value. In this way, you can often substantially reduce the size of DOM built in memory.</p>\\n</li>\\n<li>\\n<p><a href=\\"http://211.87.224.233:18080/api/json?pretty=true\\" target=\\"_blank\\" rel=\\"noopener noreferrer\\">JSON API</a></p>\\n<p>Access the same data as JSON for JavaScript-based access. <code>tree</code> may be used.</p>\\n</li>\\n<li>\\n<p><a href=\\"http://211.87.224.233:18080/api/python?pretty=true\\" target=\\"_blank\\" rel=\\"noopener noreferrer\\">Python API</a></p>\\n<p>Access the same data as Python for Python clients. This can be parsed into Python objects as <code>ast.literal_eval(urllib.urlopen(\\"...\\").read())</code> and the resulting object tree is identical to that of JSON.</p>\\n</li>\\n</ul>","autoDesc":true}`);export{e as data};
