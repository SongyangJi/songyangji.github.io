const n=JSON.parse('{"key":"v-5a89739e","path":"/posts/Java%E5%B9%B6%E5%8F%91%E6%8A%80%E6%9C%AF/JUC%20%E2%80%94%E2%80%94%20Lock%E3%80%81Condition%E6%8E%A5%E5%8F%A3%E4%B8%8E%E5%AE%9E%E7%8E%B0%E5%8E%9F%E7%90%86.html","title":"JUC之Lock、Condition接口与实现原理","lang":"zh-CN","frontmatter":{"title":"JUC之Lock、Condition接口与实现原理","date":"2021-11-13T18:12:00.000Z","categories":["JUC"],"tags":["JUC","Java多线程"],"description":"Lock接口 Lock接口的API package java.util.concurrent.locks; public interface Lock { // 获取锁，如果不能立即获取，阻塞，获取到锁之后从该方法返回 void lock(); // 获取锁，相比lock()方法，它可以相应中断 void lockInterruptibly() throws InterruptedException; // 非阻塞的尝试获取锁，如果能立即获取并返回true，否则立即返回false boolean tryLock(); // 带超时的获取锁，发生下列情况之一时返回 // 1. 获取到锁 // 2. 超时 // 3. 被中断 boolean tryLock(long time, TimeUnit unit) throws InterruptedException; // 释放锁 void unlock(); // 获取通知组件，该组件和该lock实例（监视器的概念）绑定 Condition newCondition(); }","head":[["meta",{"property":"og:url","content":"https://mister-hope.github.io/posts/Java%E5%B9%B6%E5%8F%91%E6%8A%80%E6%9C%AF/JUC%20%E2%80%94%E2%80%94%20Lock%E3%80%81Condition%E6%8E%A5%E5%8F%A3%E4%B8%8E%E5%AE%9E%E7%8E%B0%E5%8E%9F%E7%90%86.html"}],["meta",{"property":"og:site_name","content":"常潇的技术站"}],["meta",{"property":"og:title","content":"JUC之Lock、Condition接口与实现原理"}],["meta",{"property":"og:description","content":"Lock接口 Lock接口的API package java.util.concurrent.locks; public interface Lock { // 获取锁，如果不能立即获取，阻塞，获取到锁之后从该方法返回 void lock(); // 获取锁，相比lock()方法，它可以相应中断 void lockInterruptibly() throws InterruptedException; // 非阻塞的尝试获取锁，如果能立即获取并返回true，否则立即返回false boolean tryLock(); // 带超时的获取锁，发生下列情况之一时返回 // 1. 获取到锁 // 2. 超时 // 3. 被中断 boolean tryLock(long time, TimeUnit unit) throws InterruptedException; // 释放锁 void unlock(); // 获取通知组件，该组件和该lock实例（监视器的概念）绑定 Condition newCondition(); }"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-02-17T15:13:02.000Z"}],["meta",{"property":"article:author","content":"常潇-KeepCool"}],["meta",{"property":"article:tag","content":"JUC"}],["meta",{"property":"article:tag","content":"Java多线程"}],["meta",{"property":"article:published_time","content":"2021-11-13T18:12:00.000Z"}],["meta",{"property":"article:modified_time","content":"2024-02-17T15:13:02.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"JUC之Lock、Condition接口与实现原理\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2021-11-13T18:12:00.000Z\\",\\"dateModified\\":\\"2024-02-17T15:13:02.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"常潇-KeepCool\\",\\"url\\":\\"https://mister-hope.com\\"}]}"]]},"headers":[{"level":2,"title":"Lock接口的API","slug":"lock接口的api","link":"#lock接口的api","children":[]},{"level":2,"title":"Lock和synchronized的联系与区别","slug":"lock和synchronized的联系与区别","link":"#lock和synchronized的联系与区别","children":[]},{"level":2,"title":"Condition接口的API","slug":"condition接口的api","link":"#condition接口的api","children":[]},{"level":2,"title":"Condition的实现分析","slug":"condition的实现分析","link":"#condition的实现分析","children":[]},{"level":2,"title":"ReentrantLock 的公平锁","slug":"reentrantlock-的公平锁","link":"#reentrantlock-的公平锁","children":[]},{"level":2,"title":"非公平锁的lock方法","slug":"非公平锁的lock方法","link":"#非公平锁的lock方法","children":[]}],"git":{"createdTime":1708182782000,"updatedTime":1708182782000,"contributors":[{"name":"jisongyang","email":"jisongyang@kuaishou.com","commits":1}]},"readingTime":{"minutes":6.52,"words":1957},"filePathRelative":"posts/Java并发技术/JUC —— Lock、Condition接口与实现原理.md","localizedDate":"2021年11月14日","excerpt":"<h1> Lock接口</h1>\\n<h2> Lock接口的API</h2>\\n<div class=\\"language-java line-numbers-mode\\" data-ext=\\"java\\"><pre class=\\"language-java\\"><code><span class=\\"token keyword\\">package</span> <span class=\\"token namespace\\">java<span class=\\"token punctuation\\">.</span>util<span class=\\"token punctuation\\">.</span>concurrent<span class=\\"token punctuation\\">.</span>locks</span><span class=\\"token punctuation\\">;</span>\\n\\n<span class=\\"token keyword\\">public</span> <span class=\\"token keyword\\">interface</span> <span class=\\"token class-name\\">Lock</span> <span class=\\"token punctuation\\">{</span>\\n    <span class=\\"token comment\\">// 获取锁，如果不能立即获取，阻塞，获取到锁之后从该方法返回</span>\\n    <span class=\\"token keyword\\">void</span> <span class=\\"token function\\">lock</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n\\n    <span class=\\"token comment\\">// 获取锁，相比lock()方法，它可以相应中断</span>\\n    <span class=\\"token keyword\\">void</span> <span class=\\"token function\\">lockInterruptibly</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span> <span class=\\"token keyword\\">throws</span> <span class=\\"token class-name\\">InterruptedException</span><span class=\\"token punctuation\\">;</span>\\n\\n    <span class=\\"token comment\\">// 非阻塞的尝试获取锁，如果能立即获取并返回true，否则立即返回false</span>\\n    <span class=\\"token keyword\\">boolean</span> <span class=\\"token function\\">tryLock</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n\\n    <span class=\\"token comment\\">// 带超时的获取锁，发生下列情况之一时返回</span>\\n    <span class=\\"token comment\\">// 1. 获取到锁</span>\\n    <span class=\\"token comment\\">// 2. 超时</span>\\n    <span class=\\"token comment\\">// 3. 被中断</span>\\n    <span class=\\"token keyword\\">boolean</span> <span class=\\"token function\\">tryLock</span><span class=\\"token punctuation\\">(</span><span class=\\"token keyword\\">long</span> time<span class=\\"token punctuation\\">,</span> <span class=\\"token class-name\\">TimeUnit</span> unit<span class=\\"token punctuation\\">)</span> <span class=\\"token keyword\\">throws</span> <span class=\\"token class-name\\">InterruptedException</span><span class=\\"token punctuation\\">;</span>\\n\\n    <span class=\\"token comment\\">// 释放锁</span>\\n    <span class=\\"token keyword\\">void</span> <span class=\\"token function\\">unlock</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n\\n    <span class=\\"token comment\\">// 获取通知组件，该组件和该lock实例（监视器的概念）绑定</span>\\n    <span class=\\"token class-name\\">Condition</span> <span class=\\"token function\\">newCondition</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n<span class=\\"token punctuation\\">}</span>\\n</code></pre><div class=\\"line-numbers\\" aria-hidden=\\"true\\"><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div></div></div>","autoDesc":true}');export{n as data};
