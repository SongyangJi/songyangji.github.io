const n=JSON.parse('{"key":"v-080aa79d","path":"/posts/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/SkipList.html","title":"SkipList","lang":"zh-CN","frontmatter":{"title":"SkipList","date":"2021-12-16T14:23:04.000Z","categories":["数据结构"],"tags":["数据结构"],"description":"C++实现 采用 right、down指针的方法，维护前驱与后继、上层与下层的节点之间的关系。 缺点：每个节点都要存储真实的数据，增加了不必要的开销。 (另外，我的代码实现有点冗余，其实可以把查找节点抽象一个方法出来。 ) #include &lt;vector&gt; using std::vector; class SkipList { private: // 最高层数为32层 static const int MAX_LEVELS = 32; struct Node { // 真实数据 int val; // 向右走、向下走的指针 Node *right, *down; explicit Node(int val = 0, Node *right = nullptr, Node *down = nullptr) : val(val), right(right), down(down) {} }; // 哑结点 Node *head = nullptr; // 模拟抛硬币 static bool getRand() { int x = rand() % 2; return x; } public: SkipList() { // 哑结点初始化MAX层，next指针都为空，head是最上面的节点 // 哑结点不存储任何真实数据，仅仅是为了代码实现方便罢了 Node *down = nullptr, *up; for (int i = 0; i &lt; MAX_LEVELS; i++) { up = new Node(0, nullptr, down); down = up; } head = up; } // 查找某个元素是否存在 bool search(int target) { // 从左上角出发 Node *node = head; while (node) { //先向右移，再向下移 if (node-&gt;right) { // 此时 node.val &lt; target &lt; node.val, 通过“跳跃”的方式快速缩小了范围 if (target &lt; node-&gt;right-&gt;val) { node = node-&gt;down; // 找到了 } else if (node-&gt;right-&gt;val == target) { return true; // 继续往右走 } else { node = node-&gt;right; } // 右面没有节点了，只能往下走才可能找到 } else { node = node-&gt;down; } } return false; } // 这里的新增节点，是允许重复值的；如果是Set的话，可以先查找出目标 node ，如果 node.val == num , 就不要重复插入了 void add(int num) { // 其实是一个栈，用来存储搜索路径中的节点(前驱)， // 因为最后要根据新节点的层数往上层增加节点，就必须知道它的前驱 vector&lt;Node *&gt; downs; // 从顶部开始搜索。 Node *node = head; while (node) { // 一直往右走，直到右边没有节点，或者右边节点的值大于 num while (node-&gt;right &amp;&amp; node-&gt;right-&gt;val &lt;= num) { node = node-&gt;right; } //找到这一层的找到要插入的位置的前驱, 入栈 downs.push_back(node); // 往下走，直到最底层 node = node-&gt;down; } // 这时候已经到了最底层 // 从后向前根据“抛硬币的节点”依次在每一层的前驱后面插入节点; int pos = downs.size() - 1; Node *dn = nullptr, *pre; do { pre = downs[pos--]; // 新增节点存储值是 num （明显数据被重复存储了），后继是 pre-&gt;right ,前驱是 pre（其实就是链表的插入操作），注意 pre-&gt;right = new Node(num, pre-&gt;right, dn); // 这时的 pre-&gt;right 就是新增的节点。 dn = pre-&gt;right; // 如果没有超出允许的 MAX_LEVELS 并且根据抛硬币的结果需要继续往上加，则继续 } while (pos &gt;= 0 &amp;&amp; getRand()); } // 删除一个值,基本上与查找流程一致 bool erase(int num) { Node *node = head; // 记录是否存在 bool exist = false; while (node) { if (node-&gt;right) { // 找到了目标值 if (node-&gt;right-&gt;val == num) { // del 即为要删除的节点 Node *del = node-&gt;right; // 链表的删除操作 node-&gt;right = del-&gt;right; // 注意我们是要把这个\\"柱子\\"从上向右全部删除的，所以还要往下走，继续走 // node 是要删除的节点的前驱 node = node-&gt;down; exist = true; delete del; } else if (node-&gt;right-&gt;val &lt; num) { node = node-&gt;right; } else { node = node-&gt;down; } } else { node = node-&gt;down; } } return exist; } };","head":[["meta",{"property":"og:url","content":"https://mister-hope.github.io/posts/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/SkipList.html"}],["meta",{"property":"og:site_name","content":"常潇的技术站"}],["meta",{"property":"og:title","content":"SkipList"}],["meta",{"property":"og:description","content":"C++实现 采用 right、down指针的方法，维护前驱与后继、上层与下层的节点之间的关系。 缺点：每个节点都要存储真实的数据，增加了不必要的开销。 (另外，我的代码实现有点冗余，其实可以把查找节点抽象一个方法出来。 ) #include &lt;vector&gt; using std::vector; class SkipList { private: // 最高层数为32层 static const int MAX_LEVELS = 32; struct Node { // 真实数据 int val; // 向右走、向下走的指针 Node *right, *down; explicit Node(int val = 0, Node *right = nullptr, Node *down = nullptr) : val(val), right(right), down(down) {} }; // 哑结点 Node *head = nullptr; // 模拟抛硬币 static bool getRand() { int x = rand() % 2; return x; } public: SkipList() { // 哑结点初始化MAX层，next指针都为空，head是最上面的节点 // 哑结点不存储任何真实数据，仅仅是为了代码实现方便罢了 Node *down = nullptr, *up; for (int i = 0; i &lt; MAX_LEVELS; i++) { up = new Node(0, nullptr, down); down = up; } head = up; } // 查找某个元素是否存在 bool search(int target) { // 从左上角出发 Node *node = head; while (node) { //先向右移，再向下移 if (node-&gt;right) { // 此时 node.val &lt; target &lt; node.val, 通过“跳跃”的方式快速缩小了范围 if (target &lt; node-&gt;right-&gt;val) { node = node-&gt;down; // 找到了 } else if (node-&gt;right-&gt;val == target) { return true; // 继续往右走 } else { node = node-&gt;right; } // 右面没有节点了，只能往下走才可能找到 } else { node = node-&gt;down; } } return false; } // 这里的新增节点，是允许重复值的；如果是Set的话，可以先查找出目标 node ，如果 node.val == num , 就不要重复插入了 void add(int num) { // 其实是一个栈，用来存储搜索路径中的节点(前驱)， // 因为最后要根据新节点的层数往上层增加节点，就必须知道它的前驱 vector&lt;Node *&gt; downs; // 从顶部开始搜索。 Node *node = head; while (node) { // 一直往右走，直到右边没有节点，或者右边节点的值大于 num while (node-&gt;right &amp;&amp; node-&gt;right-&gt;val &lt;= num) { node = node-&gt;right; } //找到这一层的找到要插入的位置的前驱, 入栈 downs.push_back(node); // 往下走，直到最底层 node = node-&gt;down; } // 这时候已经到了最底层 // 从后向前根据“抛硬币的节点”依次在每一层的前驱后面插入节点; int pos = downs.size() - 1; Node *dn = nullptr, *pre; do { pre = downs[pos--]; // 新增节点存储值是 num （明显数据被重复存储了），后继是 pre-&gt;right ,前驱是 pre（其实就是链表的插入操作），注意 pre-&gt;right = new Node(num, pre-&gt;right, dn); // 这时的 pre-&gt;right 就是新增的节点。 dn = pre-&gt;right; // 如果没有超出允许的 MAX_LEVELS 并且根据抛硬币的结果需要继续往上加，则继续 } while (pos &gt;= 0 &amp;&amp; getRand()); } // 删除一个值,基本上与查找流程一致 bool erase(int num) { Node *node = head; // 记录是否存在 bool exist = false; while (node) { if (node-&gt;right) { // 找到了目标值 if (node-&gt;right-&gt;val == num) { // del 即为要删除的节点 Node *del = node-&gt;right; // 链表的删除操作 node-&gt;right = del-&gt;right; // 注意我们是要把这个\\"柱子\\"从上向右全部删除的，所以还要往下走，继续走 // node 是要删除的节点的前驱 node = node-&gt;down; exist = true; delete del; } else if (node-&gt;right-&gt;val &lt; num) { node = node-&gt;right; } else { node = node-&gt;down; } } else { node = node-&gt;down; } } return exist; } };"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-02-17T15:13:02.000Z"}],["meta",{"property":"article:author","content":"常潇-KeepCool"}],["meta",{"property":"article:tag","content":"数据结构"}],["meta",{"property":"article:published_time","content":"2021-12-16T14:23:04.000Z"}],["meta",{"property":"article:modified_time","content":"2024-02-17T15:13:02.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"SkipList\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2021-12-16T14:23:04.000Z\\",\\"dateModified\\":\\"2024-02-17T15:13:02.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"常潇-KeepCool\\",\\"url\\":\\"https://mister-hope.com\\"}]}"]]},"headers":[],"git":{"createdTime":1708182782000,"updatedTime":1708182782000,"contributors":[{"name":"jisongyang","email":"jisongyang@kuaishou.com","commits":1}]},"readingTime":{"minutes":3.71,"words":1113},"filePathRelative":"posts/数据结构/SkipList.md","localizedDate":"2021年12月16日","excerpt":"<h1> C++实现</h1>\\n<p>采用 <code>right</code>、<code>down</code>指针的方法，维护前驱与后继、上层与下层的节点之间的关系。</p>\\n<p><strong>缺点</strong>：每个节点都要存储真实的数据，增加了不必要的开销。</p>\\n<p>(<s>另外，我的代码实现有点冗余，其实可以把查找节点抽象一个方法出来。</s> )</p>\\n<div class=\\"language-cpp line-numbers-mode\\" data-ext=\\"cpp\\"><pre class=\\"language-cpp\\"><code><span class=\\"token macro property\\"><span class=\\"token directive-hash\\">#</span><span class=\\"token directive keyword\\">include</span> <span class=\\"token string\\">&lt;vector&gt;</span></span>\\n<span class=\\"token keyword\\">using</span> std<span class=\\"token double-colon punctuation\\">::</span>vector<span class=\\"token punctuation\\">;</span>\\n\\n<span class=\\"token keyword\\">class</span> <span class=\\"token class-name\\">SkipList</span> <span class=\\"token punctuation\\">{</span>\\n<span class=\\"token keyword\\">private</span><span class=\\"token operator\\">:</span>\\n    <span class=\\"token comment\\">// 最高层数为32层</span>\\n    <span class=\\"token keyword\\">static</span> <span class=\\"token keyword\\">const</span> <span class=\\"token keyword\\">int</span> MAX_LEVELS <span class=\\"token operator\\">=</span> <span class=\\"token number\\">32</span><span class=\\"token punctuation\\">;</span>\\n\\n    <span class=\\"token keyword\\">struct</span> <span class=\\"token class-name\\">Node</span> <span class=\\"token punctuation\\">{</span>\\n        <span class=\\"token comment\\">// 真实数据</span>\\n        <span class=\\"token keyword\\">int</span> val<span class=\\"token punctuation\\">;</span>\\n        <span class=\\"token comment\\">// 向右走、向下走的指针</span>\\n        Node <span class=\\"token operator\\">*</span>right<span class=\\"token punctuation\\">,</span> <span class=\\"token operator\\">*</span>down<span class=\\"token punctuation\\">;</span>\\n\\n        <span class=\\"token keyword\\">explicit</span> <span class=\\"token function\\">Node</span><span class=\\"token punctuation\\">(</span><span class=\\"token keyword\\">int</span> val <span class=\\"token operator\\">=</span> <span class=\\"token number\\">0</span><span class=\\"token punctuation\\">,</span> Node <span class=\\"token operator\\">*</span>right <span class=\\"token operator\\">=</span> <span class=\\"token keyword\\">nullptr</span><span class=\\"token punctuation\\">,</span> Node <span class=\\"token operator\\">*</span>down <span class=\\"token operator\\">=</span> <span class=\\"token keyword\\">nullptr</span><span class=\\"token punctuation\\">)</span> <span class=\\"token operator\\">:</span> <span class=\\"token function\\">val</span><span class=\\"token punctuation\\">(</span>val<span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">,</span> <span class=\\"token function\\">right</span><span class=\\"token punctuation\\">(</span>right<span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">,</span> <span class=\\"token function\\">down</span><span class=\\"token punctuation\\">(</span>down<span class=\\"token punctuation\\">)</span> <span class=\\"token punctuation\\">{</span><span class=\\"token punctuation\\">}</span>\\n    <span class=\\"token punctuation\\">}</span><span class=\\"token punctuation\\">;</span>\\n\\n    <span class=\\"token comment\\">// 哑结点</span>\\n    Node <span class=\\"token operator\\">*</span>head <span class=\\"token operator\\">=</span> <span class=\\"token keyword\\">nullptr</span><span class=\\"token punctuation\\">;</span>\\n\\n    <span class=\\"token comment\\">// 模拟抛硬币</span>\\n    <span class=\\"token keyword\\">static</span> <span class=\\"token keyword\\">bool</span> <span class=\\"token function\\">getRand</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span> <span class=\\"token punctuation\\">{</span>\\n        <span class=\\"token keyword\\">int</span> x <span class=\\"token operator\\">=</span> <span class=\\"token function\\">rand</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span> <span class=\\"token operator\\">%</span> <span class=\\"token number\\">2</span><span class=\\"token punctuation\\">;</span>\\n        <span class=\\"token keyword\\">return</span> x<span class=\\"token punctuation\\">;</span>\\n    <span class=\\"token punctuation\\">}</span>\\n\\n<span class=\\"token keyword\\">public</span><span class=\\"token operator\\">:</span>\\n    <span class=\\"token function\\">SkipList</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span> <span class=\\"token punctuation\\">{</span>\\n        <span class=\\"token comment\\">// 哑结点初始化MAX层，next指针都为空，head是最上面的节点</span>\\n        <span class=\\"token comment\\">// 哑结点不存储任何真实数据，仅仅是为了代码实现方便罢了</span>\\n        Node <span class=\\"token operator\\">*</span>down <span class=\\"token operator\\">=</span> <span class=\\"token keyword\\">nullptr</span><span class=\\"token punctuation\\">,</span> <span class=\\"token operator\\">*</span>up<span class=\\"token punctuation\\">;</span>\\n        <span class=\\"token keyword\\">for</span> <span class=\\"token punctuation\\">(</span><span class=\\"token keyword\\">int</span> i <span class=\\"token operator\\">=</span> <span class=\\"token number\\">0</span><span class=\\"token punctuation\\">;</span> i <span class=\\"token operator\\">&lt;</span> MAX_LEVELS<span class=\\"token punctuation\\">;</span> i<span class=\\"token operator\\">++</span><span class=\\"token punctuation\\">)</span> <span class=\\"token punctuation\\">{</span>\\n            up <span class=\\"token operator\\">=</span> <span class=\\"token keyword\\">new</span> <span class=\\"token function\\">Node</span><span class=\\"token punctuation\\">(</span><span class=\\"token number\\">0</span><span class=\\"token punctuation\\">,</span> <span class=\\"token keyword\\">nullptr</span><span class=\\"token punctuation\\">,</span> down<span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n            down <span class=\\"token operator\\">=</span> up<span class=\\"token punctuation\\">;</span>\\n        <span class=\\"token punctuation\\">}</span>\\n        head <span class=\\"token operator\\">=</span> up<span class=\\"token punctuation\\">;</span>\\n    <span class=\\"token punctuation\\">}</span>\\n\\n    <span class=\\"token comment\\">// 查找某个元素是否存在</span>\\n    <span class=\\"token keyword\\">bool</span> <span class=\\"token function\\">search</span><span class=\\"token punctuation\\">(</span><span class=\\"token keyword\\">int</span> target<span class=\\"token punctuation\\">)</span> <span class=\\"token punctuation\\">{</span>\\n        <span class=\\"token comment\\">// 从左上角出发</span>\\n        Node <span class=\\"token operator\\">*</span>node <span class=\\"token operator\\">=</span> head<span class=\\"token punctuation\\">;</span>\\n        <span class=\\"token keyword\\">while</span> <span class=\\"token punctuation\\">(</span>node<span class=\\"token punctuation\\">)</span> <span class=\\"token punctuation\\">{</span>\\n            <span class=\\"token comment\\">//先向右移，再向下移</span>\\n            <span class=\\"token keyword\\">if</span> <span class=\\"token punctuation\\">(</span>node<span class=\\"token operator\\">-&gt;</span>right<span class=\\"token punctuation\\">)</span> <span class=\\"token punctuation\\">{</span>\\n                <span class=\\"token comment\\">// 此时  node.val &lt; target &lt; node.val, 通过“跳跃”的方式快速缩小了范围</span>\\n                <span class=\\"token keyword\\">if</span> <span class=\\"token punctuation\\">(</span>target <span class=\\"token operator\\">&lt;</span> node<span class=\\"token operator\\">-&gt;</span>right<span class=\\"token operator\\">-&gt;</span>val<span class=\\"token punctuation\\">)</span> <span class=\\"token punctuation\\">{</span>\\n                    node <span class=\\"token operator\\">=</span> node<span class=\\"token operator\\">-&gt;</span>down<span class=\\"token punctuation\\">;</span>\\n                    <span class=\\"token comment\\">// 找到了   </span>\\n                <span class=\\"token punctuation\\">}</span> <span class=\\"token keyword\\">else</span> <span class=\\"token keyword\\">if</span> <span class=\\"token punctuation\\">(</span>node<span class=\\"token operator\\">-&gt;</span>right<span class=\\"token operator\\">-&gt;</span>val <span class=\\"token operator\\">==</span> target<span class=\\"token punctuation\\">)</span> <span class=\\"token punctuation\\">{</span>\\n                    <span class=\\"token keyword\\">return</span> <span class=\\"token boolean\\">true</span><span class=\\"token punctuation\\">;</span>\\n                    <span class=\\"token comment\\">// 继续往右走    </span>\\n                <span class=\\"token punctuation\\">}</span> <span class=\\"token keyword\\">else</span> <span class=\\"token punctuation\\">{</span>\\n                    node <span class=\\"token operator\\">=</span> node<span class=\\"token operator\\">-&gt;</span>right<span class=\\"token punctuation\\">;</span>\\n                <span class=\\"token punctuation\\">}</span>\\n                <span class=\\"token comment\\">// 右面没有节点了，只能往下走才可能找到    </span>\\n            <span class=\\"token punctuation\\">}</span> <span class=\\"token keyword\\">else</span> <span class=\\"token punctuation\\">{</span>\\n                node <span class=\\"token operator\\">=</span> node<span class=\\"token operator\\">-&gt;</span>down<span class=\\"token punctuation\\">;</span>\\n            <span class=\\"token punctuation\\">}</span>\\n        <span class=\\"token punctuation\\">}</span>\\n        <span class=\\"token keyword\\">return</span> <span class=\\"token boolean\\">false</span><span class=\\"token punctuation\\">;</span>\\n    <span class=\\"token punctuation\\">}</span>\\n\\n    <span class=\\"token comment\\">// 这里的新增节点，是允许重复值的；如果是Set的话，可以先查找出目标 node ，如果 node.val ==  num , 就不要重复插入了</span>\\n    <span class=\\"token keyword\\">void</span> <span class=\\"token function\\">add</span><span class=\\"token punctuation\\">(</span><span class=\\"token keyword\\">int</span> num<span class=\\"token punctuation\\">)</span> <span class=\\"token punctuation\\">{</span>\\n        <span class=\\"token comment\\">// 其实是一个栈，用来存储搜索路径中的节点(前驱)，</span>\\n        <span class=\\"token comment\\">// 因为最后要根据新节点的层数往上层增加节点，就必须知道它的前驱</span>\\n        vector<span class=\\"token operator\\">&lt;</span>Node <span class=\\"token operator\\">*</span><span class=\\"token operator\\">&gt;</span> downs<span class=\\"token punctuation\\">;</span>\\n        <span class=\\"token comment\\">// 从顶部开始搜索。</span>\\n        Node <span class=\\"token operator\\">*</span>node <span class=\\"token operator\\">=</span> head<span class=\\"token punctuation\\">;</span>\\n        <span class=\\"token keyword\\">while</span> <span class=\\"token punctuation\\">(</span>node<span class=\\"token punctuation\\">)</span> <span class=\\"token punctuation\\">{</span>\\n            <span class=\\"token comment\\">// 一直往右走，直到右边没有节点，或者右边节点的值大于 num</span>\\n            <span class=\\"token keyword\\">while</span> <span class=\\"token punctuation\\">(</span>node<span class=\\"token operator\\">-&gt;</span>right <span class=\\"token operator\\">&amp;&amp;</span> node<span class=\\"token operator\\">-&gt;</span>right<span class=\\"token operator\\">-&gt;</span>val <span class=\\"token operator\\">&lt;=</span> num<span class=\\"token punctuation\\">)</span> <span class=\\"token punctuation\\">{</span>\\n                node <span class=\\"token operator\\">=</span> node<span class=\\"token operator\\">-&gt;</span>right<span class=\\"token punctuation\\">;</span>\\n            <span class=\\"token punctuation\\">}</span>\\n            <span class=\\"token comment\\">//找到这一层的找到要插入的位置的前驱, 入栈</span>\\n            downs<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">push_back</span><span class=\\"token punctuation\\">(</span>node<span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n            <span class=\\"token comment\\">// 往下走，直到最底层</span>\\n            node <span class=\\"token operator\\">=</span> node<span class=\\"token operator\\">-&gt;</span>down<span class=\\"token punctuation\\">;</span>\\n        <span class=\\"token punctuation\\">}</span>\\n\\n        <span class=\\"token comment\\">// 这时候已经到了最底层</span>\\n        <span class=\\"token comment\\">// 从后向前根据“抛硬币的节点”依次在每一层的前驱后面插入节点;</span>\\n        <span class=\\"token keyword\\">int</span> pos <span class=\\"token operator\\">=</span> downs<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">size</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span> <span class=\\"token operator\\">-</span> <span class=\\"token number\\">1</span><span class=\\"token punctuation\\">;</span>\\n        Node <span class=\\"token operator\\">*</span>dn <span class=\\"token operator\\">=</span> <span class=\\"token keyword\\">nullptr</span><span class=\\"token punctuation\\">,</span> <span class=\\"token operator\\">*</span>pre<span class=\\"token punctuation\\">;</span>\\n        <span class=\\"token keyword\\">do</span> <span class=\\"token punctuation\\">{</span>\\n            pre <span class=\\"token operator\\">=</span> downs<span class=\\"token punctuation\\">[</span>pos<span class=\\"token operator\\">--</span><span class=\\"token punctuation\\">]</span><span class=\\"token punctuation\\">;</span>\\n            <span class=\\"token comment\\">// 新增节点存储值是 num （明显数据被重复存储了），后继是 pre-&gt;right ,前驱是 pre（其实就是链表的插入操作），注意</span>\\n            pre<span class=\\"token operator\\">-&gt;</span>right <span class=\\"token operator\\">=</span> <span class=\\"token keyword\\">new</span> <span class=\\"token function\\">Node</span><span class=\\"token punctuation\\">(</span>num<span class=\\"token punctuation\\">,</span> pre<span class=\\"token operator\\">-&gt;</span>right<span class=\\"token punctuation\\">,</span> dn<span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n            <span class=\\"token comment\\">// 这时的 pre-&gt;right 就是新增的节点。</span>\\n            dn <span class=\\"token operator\\">=</span> pre<span class=\\"token operator\\">-&gt;</span>right<span class=\\"token punctuation\\">;</span>\\n            <span class=\\"token comment\\">// 如果没有超出允许的 MAX_LEVELS 并且根据抛硬币的结果需要继续往上加，则继续  </span>\\n        <span class=\\"token punctuation\\">}</span> <span class=\\"token keyword\\">while</span> <span class=\\"token punctuation\\">(</span>pos <span class=\\"token operator\\">&gt;=</span> <span class=\\"token number\\">0</span> <span class=\\"token operator\\">&amp;&amp;</span> <span class=\\"token function\\">getRand</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n    <span class=\\"token punctuation\\">}</span>\\n\\n    <span class=\\"token comment\\">// 删除一个值,基本上与查找流程一致</span>\\n    <span class=\\"token keyword\\">bool</span> <span class=\\"token function\\">erase</span><span class=\\"token punctuation\\">(</span><span class=\\"token keyword\\">int</span> num<span class=\\"token punctuation\\">)</span> <span class=\\"token punctuation\\">{</span>\\n        Node <span class=\\"token operator\\">*</span>node <span class=\\"token operator\\">=</span> head<span class=\\"token punctuation\\">;</span>\\n        <span class=\\"token comment\\">// 记录是否存在</span>\\n        <span class=\\"token keyword\\">bool</span> exist <span class=\\"token operator\\">=</span> <span class=\\"token boolean\\">false</span><span class=\\"token punctuation\\">;</span>\\n        <span class=\\"token keyword\\">while</span> <span class=\\"token punctuation\\">(</span>node<span class=\\"token punctuation\\">)</span> <span class=\\"token punctuation\\">{</span>\\n            <span class=\\"token keyword\\">if</span> <span class=\\"token punctuation\\">(</span>node<span class=\\"token operator\\">-&gt;</span>right<span class=\\"token punctuation\\">)</span> <span class=\\"token punctuation\\">{</span>\\n                <span class=\\"token comment\\">// 找到了目标值</span>\\n                <span class=\\"token keyword\\">if</span> <span class=\\"token punctuation\\">(</span>node<span class=\\"token operator\\">-&gt;</span>right<span class=\\"token operator\\">-&gt;</span>val <span class=\\"token operator\\">==</span> num<span class=\\"token punctuation\\">)</span> <span class=\\"token punctuation\\">{</span>\\n                    <span class=\\"token comment\\">// del 即为要删除的节点</span>\\n                    Node <span class=\\"token operator\\">*</span>del <span class=\\"token operator\\">=</span> node<span class=\\"token operator\\">-&gt;</span>right<span class=\\"token punctuation\\">;</span>\\n                    <span class=\\"token comment\\">// 链表的删除操作</span>\\n                    node<span class=\\"token operator\\">-&gt;</span>right <span class=\\"token operator\\">=</span> del<span class=\\"token operator\\">-&gt;</span>right<span class=\\"token punctuation\\">;</span>\\n                    <span class=\\"token comment\\">// 注意我们是要把这个\\"柱子\\"从上向右全部删除的，所以还要往下走，继续走</span>\\n                    <span class=\\"token comment\\">// node 是要删除的节点的前驱</span>\\n                    node <span class=\\"token operator\\">=</span> node<span class=\\"token operator\\">-&gt;</span>down<span class=\\"token punctuation\\">;</span>\\n                    exist <span class=\\"token operator\\">=</span> <span class=\\"token boolean\\">true</span><span class=\\"token punctuation\\">;</span>\\n                    <span class=\\"token keyword\\">delete</span> del<span class=\\"token punctuation\\">;</span>\\n                <span class=\\"token punctuation\\">}</span> <span class=\\"token keyword\\">else</span> <span class=\\"token keyword\\">if</span> <span class=\\"token punctuation\\">(</span>node<span class=\\"token operator\\">-&gt;</span>right<span class=\\"token operator\\">-&gt;</span>val <span class=\\"token operator\\">&lt;</span> num<span class=\\"token punctuation\\">)</span> <span class=\\"token punctuation\\">{</span>\\n                    node <span class=\\"token operator\\">=</span> node<span class=\\"token operator\\">-&gt;</span>right<span class=\\"token punctuation\\">;</span>\\n                <span class=\\"token punctuation\\">}</span> <span class=\\"token keyword\\">else</span> <span class=\\"token punctuation\\">{</span>\\n                    node <span class=\\"token operator\\">=</span> node<span class=\\"token operator\\">-&gt;</span>down<span class=\\"token punctuation\\">;</span>\\n                <span class=\\"token punctuation\\">}</span>\\n            <span class=\\"token punctuation\\">}</span> <span class=\\"token keyword\\">else</span> <span class=\\"token punctuation\\">{</span>\\n                node <span class=\\"token operator\\">=</span> node<span class=\\"token operator\\">-&gt;</span>down<span class=\\"token punctuation\\">;</span>\\n            <span class=\\"token punctuation\\">}</span>\\n        <span class=\\"token punctuation\\">}</span>\\n        <span class=\\"token keyword\\">return</span> exist<span class=\\"token punctuation\\">;</span>\\n    <span class=\\"token punctuation\\">}</span>\\n<span class=\\"token punctuation\\">}</span><span class=\\"token punctuation\\">;</span>\\n</code></pre><div class=\\"line-numbers\\" aria-hidden=\\"true\\"><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div></div></div>","autoDesc":true}');export{n as data};
