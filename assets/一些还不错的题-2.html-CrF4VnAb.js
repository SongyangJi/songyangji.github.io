const n=JSON.parse('{"key":"v-3469c714","path":"/posts/%E5%88%B7%E9%A2%98/%E4%B8%80%E4%BA%9B%E8%BF%98%E4%B8%8D%E9%94%99%E7%9A%84%E9%A2%98-2.html","title":"一些还不错的题-2","lang":"zh-CN","frontmatter":{"title":"一些还不错的题-2","date":"2022-03-20T00:00:02.000Z","categories":["刷题"],"description":"二叉树 二叉树中的最大路径和 给定一颗二叉树，求二叉树的直径。 1.该题的直径定义为：树上任意两个节点路径长度的最大值； 2.该题路径长度定义为：不需要从根节点开始，也不需要在叶子节点结束，也不需要必须从父节点到子节点，一个节点到底另外一个节点走的边的数目； 3.这个路径可能穿过根节点，也可能不穿过； 4.树为空时，返回 0； 思路类似于树形DP求直径。 import java.util.*; public class Solution { int ans = -(int)1e8; public int maxPathSum (TreeNode root) { // write code here dfs(root); return ans; } int dfs(TreeNode root) { // return 从这个节点（此节点的值必选）出发的路径的最大路径和 if(root == null) return 0; int lv = dfs(root.left); int rv = dfs(root.right); ans = Math.max(ans, (lv &gt; 0 ? lv : 0) + (rv &gt; 0 ? rv : 0) + root.val); // 串上左右节点 int cs = Math.max(lv, rv) &gt; 0 ? Math.max(lv, rv) : 0; // 向左出发、向右出发 return cs + root.val; // 本身的节点的值必选 } }","head":[["meta",{"property":"og:url","content":"https://mister-hope.github.io/posts/%E5%88%B7%E9%A2%98/%E4%B8%80%E4%BA%9B%E8%BF%98%E4%B8%8D%E9%94%99%E7%9A%84%E9%A2%98-2.html"}],["meta",{"property":"og:site_name","content":"常潇的技术站"}],["meta",{"property":"og:title","content":"一些还不错的题-2"}],["meta",{"property":"og:description","content":"二叉树 二叉树中的最大路径和 给定一颗二叉树，求二叉树的直径。 1.该题的直径定义为：树上任意两个节点路径长度的最大值； 2.该题路径长度定义为：不需要从根节点开始，也不需要在叶子节点结束，也不需要必须从父节点到子节点，一个节点到底另外一个节点走的边的数目； 3.这个路径可能穿过根节点，也可能不穿过； 4.树为空时，返回 0； 思路类似于树形DP求直径。 import java.util.*; public class Solution { int ans = -(int)1e8; public int maxPathSum (TreeNode root) { // write code here dfs(root); return ans; } int dfs(TreeNode root) { // return 从这个节点（此节点的值必选）出发的路径的最大路径和 if(root == null) return 0; int lv = dfs(root.left); int rv = dfs(root.right); ans = Math.max(ans, (lv &gt; 0 ? lv : 0) + (rv &gt; 0 ? rv : 0) + root.val); // 串上左右节点 int cs = Math.max(lv, rv) &gt; 0 ? Math.max(lv, rv) : 0; // 向左出发、向右出发 return cs + root.val; // 本身的节点的值必选 } }"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-02-17T15:13:02.000Z"}],["meta",{"property":"article:author","content":"常潇-KeepCool"}],["meta",{"property":"article:published_time","content":"2022-03-20T00:00:02.000Z"}],["meta",{"property":"article:modified_time","content":"2024-02-17T15:13:02.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"一些还不错的题-2\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2022-03-20T00:00:02.000Z\\",\\"dateModified\\":\\"2024-02-17T15:13:02.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"常潇-KeepCool\\",\\"url\\":\\"https://mister-hope.com\\"}]}"]]},"headers":[{"level":2,"title":"二叉树","slug":"二叉树","link":"#二叉树","children":[{"level":3,"title":"二叉树中的最大路径和","slug":"二叉树中的最大路径和","link":"#二叉树中的最大路径和","children":[]},{"level":3,"title":"树上DP求直径","slug":"树上dp求直径","link":"#树上dp求直径","children":[]}]},{"level":2,"title":"递归（dfs）","slug":"递归-dfs","link":"#递归-dfs","children":[{"level":3,"title":"括号生成","slug":"括号生成","link":"#括号生成","children":[]},{"level":3,"title":"IP生成（dfs+剪枝）","slug":"ip生成-dfs-剪枝","link":"#ip生成-dfs-剪枝","children":[]},{"level":3,"title":"子集","slug":"子集","link":"#子集","children":[]},{"level":3,"title":"全排列的交换写法","slug":"全排列的交换写法","link":"#全排列的交换写法","children":[]},{"level":3,"title":"全排列（字典序+去重）","slug":"全排列-字典序-去重","link":"#全排列-字典序-去重","children":[]},{"level":3,"title":"组合数（字典序、去重）","slug":"组合数-字典序、去重","link":"#组合数-字典序、去重","children":[]}]},{"level":2,"title":"队列、栈","slug":"队列、栈","link":"#队列、栈","children":[{"level":3,"title":"滑动窗口的最大值 (单调队列)","slug":"滑动窗口的最大值-单调队列","link":"#滑动窗口的最大值-单调队列","children":[]},{"level":3,"title":"最小覆盖子串（滑动窗口）","slug":"最小覆盖子串-滑动窗口","link":"#最小覆盖子串-滑动窗口","children":[]},{"level":3,"title":"最长有效括号（栈）","slug":"最长有效括号-栈","link":"#最长有效括号-栈","children":[]}]},{"level":2,"title":"链表","slug":"链表","link":"#链表","children":[{"level":3,"title":"链表重排","slug":"链表重排","link":"#链表重排","children":[]}]},{"level":2,"title":"其他","slug":"其他","link":"#其他","children":[{"level":3,"title":"字符串反转","slug":"字符串反转","link":"#字符串反转","children":[]},{"level":3,"title":"约瑟夫环问题","slug":"约瑟夫环问题","link":"#约瑟夫环问题","children":[]},{"level":3,"title":"拼接字符串求最大（排序）","slug":"拼接字符串求最大-排序","link":"#拼接字符串求最大-排序","children":[]},{"level":3,"title":"数组中的逆序对","slug":"数组中的逆序对","link":"#数组中的逆序对","children":[]},{"level":3,"title":"二维有序数组的查找","slug":"二维有序数组的查找","link":"#二维有序数组的查找","children":[]},{"level":3,"title":"完全背包","slug":"完全背包","link":"#完全背包","children":[]}]},{"level":2,"title":"二分","slug":"二分","link":"#二分","children":[{"level":3,"title":"寻找数组的峰值","slug":"寻找数组的峰值","link":"#寻找数组的峰值","children":[]}]},{"level":2,"title":"大数","slug":"大数","link":"#大数","children":[{"level":3,"title":"大数乘法","slug":"大数乘法","link":"#大数乘法","children":[]},{"level":3,"title":"大数加法","slug":"大数加法","link":"#大数加法","children":[]}]},{"level":2,"title":"位运算","slug":"位运算","link":"#位运算","children":[{"level":3,"title":"数组中只出现一次的数","slug":"数组中只出现一次的数","link":"#数组中只出现一次的数","children":[]}]}],"git":{"createdTime":1708182782000,"updatedTime":1708182782000,"contributors":[{"name":"jisongyang","email":"jisongyang@kuaishou.com","commits":1}]},"readingTime":{"minutes":18.25,"words":5474},"filePathRelative":"posts/刷题/一些还不错的题-2.md","localizedDate":"2022年3月20日","excerpt":"<h2> 二叉树</h2>\\n<h3> 二叉树中的最大路径和</h3>\\n<p>给定一颗二叉树，求二叉树的直径。\\n1.该题的直径定义为：树上任意两个节点路径长度的最大值；\\n2.该题路径长度定义为：不需要从根节点开始，也不需要在叶子节点结束，也不需要必须从父节点到子节点，一个节点到底另外一个节点走的边的数目；\\n3.这个路径可能穿过根节点，也可能不穿过；\\n4.树为空时，返回 0；</p>\\n<p>思路类似于<strong>树形DP</strong>求直径。</p>\\n<div class=\\"language-java line-numbers-mode\\" data-ext=\\"java\\"><pre class=\\"language-java\\"><code><span class=\\"token keyword\\">import</span> <span class=\\"token import\\"><span class=\\"token namespace\\">java<span class=\\"token punctuation\\">.</span>util<span class=\\"token punctuation\\">.</span></span><span class=\\"token operator\\">*</span></span><span class=\\"token punctuation\\">;</span>\\n\\n<span class=\\"token keyword\\">public</span> <span class=\\"token keyword\\">class</span> <span class=\\"token class-name\\">Solution</span> <span class=\\"token punctuation\\">{</span>\\n    \\n    <span class=\\"token keyword\\">int</span> ans <span class=\\"token operator\\">=</span> <span class=\\"token operator\\">-</span><span class=\\"token punctuation\\">(</span><span class=\\"token keyword\\">int</span><span class=\\"token punctuation\\">)</span><span class=\\"token number\\">1e8</span><span class=\\"token punctuation\\">;</span>\\n    <span class=\\"token keyword\\">public</span> <span class=\\"token keyword\\">int</span> maxPathSum <span class=\\"token punctuation\\">(</span><span class=\\"token class-name\\">TreeNode</span> root<span class=\\"token punctuation\\">)</span> <span class=\\"token punctuation\\">{</span>\\n        <span class=\\"token comment\\">// write code here</span>\\n        <span class=\\"token function\\">dfs</span><span class=\\"token punctuation\\">(</span>root<span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n        <span class=\\"token keyword\\">return</span> ans<span class=\\"token punctuation\\">;</span>\\n    <span class=\\"token punctuation\\">}</span>\\n    \\n    <span class=\\"token keyword\\">int</span> <span class=\\"token function\\">dfs</span><span class=\\"token punctuation\\">(</span><span class=\\"token class-name\\">TreeNode</span> root<span class=\\"token punctuation\\">)</span> <span class=\\"token punctuation\\">{</span> <span class=\\"token comment\\">// return 从这个节点（此节点的值必选）出发的路径的最大路径和</span>\\n        <span class=\\"token keyword\\">if</span><span class=\\"token punctuation\\">(</span>root <span class=\\"token operator\\">==</span> <span class=\\"token keyword\\">null</span><span class=\\"token punctuation\\">)</span> <span class=\\"token keyword\\">return</span> <span class=\\"token number\\">0</span><span class=\\"token punctuation\\">;</span>\\n        <span class=\\"token keyword\\">int</span> lv <span class=\\"token operator\\">=</span> <span class=\\"token function\\">dfs</span><span class=\\"token punctuation\\">(</span>root<span class=\\"token punctuation\\">.</span>left<span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n        <span class=\\"token keyword\\">int</span> rv <span class=\\"token operator\\">=</span> <span class=\\"token function\\">dfs</span><span class=\\"token punctuation\\">(</span>root<span class=\\"token punctuation\\">.</span>right<span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n        ans <span class=\\"token operator\\">=</span> <span class=\\"token class-name\\">Math</span><span class=\\"token punctuation\\">.</span><span class=\\"token function\\">max</span><span class=\\"token punctuation\\">(</span>ans<span class=\\"token punctuation\\">,</span> <span class=\\"token punctuation\\">(</span>lv <span class=\\"token operator\\">&gt;</span> <span class=\\"token number\\">0</span> <span class=\\"token operator\\">?</span> lv <span class=\\"token operator\\">:</span> <span class=\\"token number\\">0</span><span class=\\"token punctuation\\">)</span> <span class=\\"token operator\\">+</span> <span class=\\"token punctuation\\">(</span>rv <span class=\\"token operator\\">&gt;</span> <span class=\\"token number\\">0</span> <span class=\\"token operator\\">?</span> rv <span class=\\"token operator\\">:</span> <span class=\\"token number\\">0</span><span class=\\"token punctuation\\">)</span> <span class=\\"token operator\\">+</span> root<span class=\\"token punctuation\\">.</span>val<span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span> <span class=\\"token comment\\">// 串上左右节点</span>\\n        <span class=\\"token keyword\\">int</span> cs <span class=\\"token operator\\">=</span> <span class=\\"token class-name\\">Math</span><span class=\\"token punctuation\\">.</span><span class=\\"token function\\">max</span><span class=\\"token punctuation\\">(</span>lv<span class=\\"token punctuation\\">,</span> rv<span class=\\"token punctuation\\">)</span> <span class=\\"token operator\\">&gt;</span> <span class=\\"token number\\">0</span> <span class=\\"token operator\\">?</span> <span class=\\"token class-name\\">Math</span><span class=\\"token punctuation\\">.</span><span class=\\"token function\\">max</span><span class=\\"token punctuation\\">(</span>lv<span class=\\"token punctuation\\">,</span> rv<span class=\\"token punctuation\\">)</span> <span class=\\"token operator\\">:</span> <span class=\\"token number\\">0</span><span class=\\"token punctuation\\">;</span> <span class=\\"token comment\\">// 向左出发、向右出发</span>\\n        <span class=\\"token keyword\\">return</span> cs <span class=\\"token operator\\">+</span> root<span class=\\"token punctuation\\">.</span>val<span class=\\"token punctuation\\">;</span> <span class=\\"token comment\\">// 本身的节点的值必选</span>\\n    <span class=\\"token punctuation\\">}</span>\\n<span class=\\"token punctuation\\">}</span>\\n</code></pre><div class=\\"line-numbers\\" aria-hidden=\\"true\\"><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div></div></div>","autoDesc":true}');export{n as data};
