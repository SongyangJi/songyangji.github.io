const n=JSON.parse('{"key":"v-52b26b26","path":"/posts/Java%E9%9B%86%E5%90%88%E7%B1%BB/TreeMap%E3%80%81TreeSet%E6%BA%90%E7%A0%81.html","title":"TreeMap、TreeSet源码","lang":"zh-CN","frontmatter":{"title":"TreeMap、TreeSet源码","date":"2021-07-30T00:00:00.000Z","categories":["Java集合类"],"tags":["Java集合类","数据结构","源码系列"],"description":"TreeMap package java.util; public class TreeMap&lt;K,V&gt; extends AbstractMap&lt;K,V&gt; implements NavigableMap&lt;K,V&gt;, Cloneable, java.io.Serializable { // 比较器 private final Comparator&lt;? super K&gt; comparator; // 树根 private transient Entry&lt;K,V&gt; root; // 键值对的个数 private transient int size = 0; private transient int modCount = 0; /* 几个构造器方法 */ public TreeMap() { comparator = null; } public TreeMap(Comparator&lt;? super K&gt; comparator) { this.comparator = comparator; } public TreeMap(Map&lt;? extends K, ? extends V&gt; m) { comparator = null; putAll(m); } public TreeMap(SortedMap&lt;K, ? extends V&gt; m) { comparator = m.comparator(); try { buildFromSorted(m.size(), m.entrySet().iterator(), null, null); } catch (java.io.IOException cannotHappen) { } catch (ClassNotFoundException cannotHappen) { } } public int size() { return size; } // O(logn) public boolean containsKey(Object key) { return getEntry(key) != null; } // O(n) public boolean containsValue(Object value) { // 内部 Entry 的遍历 for (Entry&lt;K,V&gt; e = getFirstEntry(); e != null; e = successor(e)) if (valEquals(value, e.value)) return true; return false; } public V get(Object key) { Entry&lt;K,V&gt; p = getEntry(key); return (p==null ? null : p.value); } public Comparator&lt;? super K&gt; comparator() { return comparator; } // 最小键 public K firstKey() { return key(getFirstEntry()); } // 最大键 public K lastKey() { return key(getLastEntry()); } /* 一系列获取 entry 的 方法， 然后再通过 entry 去操纵键值对 */ final Entry&lt;K,V&gt; getFirstEntry() { Entry&lt;K,V&gt; p = root; if (p != null) while (p.left != null) p = p.left; return p; } final Entry&lt;K,V&gt; getLastEntry() { Entry&lt;K,V&gt; p = root; if (p != null) while (p.right != null) p = p.right; return p; } // 根据键值查找 entry // O(logn) final Entry&lt;K,V&gt; getEntry(Object key) { // Offload comparator-based version for sake of performance if (comparator != null) return getEntryUsingComparator(key); if (key == null) throw new NullPointerException(); @SuppressWarnings(\\"unchecked\\") Comparable&lt;? super K&gt; k = (Comparable&lt;? super K&gt;) key; // 从 树根开始，按照 BST 的搜索方式进行搜索 Entry&lt;K,V&gt; p = root; while (p != null) { int cmp = k.compareTo(p.key); if (cmp &lt; 0) p = p.left; else if (cmp &gt; 0) p = p.right; else return p; } return null; } final Entry&lt;K,V&gt; getEntryUsingComparator(Object key) { // 算法与上面一致 } /* 下面四个方法的时间复杂度都是 O(logn) */ // 返回与大于或等于给定键的最小键相关联的键值映射，如果没有此键，则 null final Entry&lt;K,V&gt; getCeilingEntry(K key) { Entry&lt;K,V&gt; p = root; while (p != null) { int cmp = compare(key, p.key); if (cmp &lt; 0) { if (p.left != null) p = p.left; else // key &lt; p.key 且 p 无 左孩子，那么 p.key 即为大于 key 中的最小键 return p; } else if (cmp &gt; 0) { if (p.right != null) { p = p.right; } else { // 下面的迭代需要注意一下， // 向上回溯 // 需要找到第一个在p右边的祖先节点 Entry&lt;K,V&gt; parent = p.parent; Entry&lt;K,V&gt; ch = p; while (parent != null &amp;&amp; ch == parent.right) { ch = parent; parent = parent.parent; } return parent; } } else // 刚好相等 return p; } return null; } // 返回与小于或等于给定键的最大键相关联的键值映射，如果没有此键，则 null final Entry&lt;K,V&gt; getFloorEntry(K key) { // 算法同上 } // 返回与严格大于给定键的最小键相关联的键值映射，如果没有此键，则 null final Entry&lt;K,V&gt; getHigherEntry(K key) { // 算法同上 } // 返回严格小于给定键的最大键相关联的键值映射，如果没有此键，则 null final Entry&lt;K,V&gt; getLowerEntry(K key) { // 算法同上 } public V put(K key, V value) { Entry&lt;K,V&gt; t = root; // 树为空 if (t == null) { compare(key, key); // 类型检查、判空检查 root = new Entry&lt;&gt;(key, value, null); size = 1; modCount++; return null; } int cmp; // 记录轨迹 Entry&lt;K,V&gt; parent; // 区分使用比较器与否 Comparator&lt;? super K&gt; cpr = comparator; if (cpr != null) { do { parent = t; cmp = cpr.compare(key, t.key); if (cmp &lt; 0) t = t.left; else if (cmp &gt; 0) t = t.right; else // 找到键，直接 setV return t.setValue(value); } while (t != null); } else { // 不使用比较器 } Entry&lt;K,V&gt; e = new Entry&lt;&gt;(key, value, parent); if (cmp &lt; 0) parent.left = e; else parent.right = e; // 调用红黑树的平衡算法 fixAfterInsertion(e); size++; modCount++; return null; } // 调用 deleteEntry; public V remove(Object key) { Entry&lt;K,V&gt; p = getEntry(key); if (p == null) return null; V oldValue = p.value; deleteEntry(p); return oldValue; } // O(1) // 只要 root = null， 经过可达性分析之后一整棵树都会被 GC public void clear() { modCount++; size = 0; root = null; } // NavigableMap API methods // 下面省略了一系列的 NavigableMap接口的方法 public Map.Entry&lt;K,V&gt; firstEntry() { return exportEntry(getFirstEntry()); } public Map.Entry&lt;K,V&gt; lastEntry() { return exportEntry(getLastEntry()); } // ............ /* 省略了视图类的代码 */ // 首次请求此视图时，初始化为包含条目集视图实例的字段。 // 视图是无状态的，因此没有理由创建多个视图。 // 注意，是视图，而不是快照 // 实现方法是通过通过内部类获取迭代器访问元素的 private transient EntrySet entrySet; private transient KeySet&lt;K&gt; navigableKeySet; private transient NavigableMap&lt;K,V&gt; descendingMap; public Set&lt;K&gt; keySet() { return navigableKeySet(); } public NavigableSet&lt;K&gt; navigableKeySet() { KeySet&lt;K&gt; nks = navigableKeySet; return (nks != null) ? nks : (navigableKeySet = new KeySet&lt;&gt;(this)); } public Collection&lt;V&gt; values() { Collection&lt;V&gt; vs = values; if (vs == null) { vs = new Values(); values = vs; } return vs; } public Set&lt;Map.Entry&lt;K,V&gt;&gt; entrySet() { EntrySet es = entrySet; return (es != null) ? es : (entrySet = new EntrySet()); } // 下面是作者包装的一些小方法（省略大部分） // 使用 exportEntry方法返回包装后的不可变的 Entry 因为内部的 Entry是可变的 static &lt;K,V&gt; Map.Entry&lt;K,V&gt; exportEntry(TreeMap.Entry&lt;K,V&gt; e) { return (e == null) ? null : new AbstractMap.SimpleImmutableEntry&lt;&gt;(e); } private static int computeRedLevel(int sz) { int level = 0; for (int m = sz - 1; m &gt;= 0; m = m / 2 - 1) level++; return level; } }","head":[["meta",{"property":"og:url","content":"https://mister-hope.github.io/posts/Java%E9%9B%86%E5%90%88%E7%B1%BB/TreeMap%E3%80%81TreeSet%E6%BA%90%E7%A0%81.html"}],["meta",{"property":"og:site_name","content":"常潇的技术站"}],["meta",{"property":"og:title","content":"TreeMap、TreeSet源码"}],["meta",{"property":"og:description","content":"TreeMap package java.util; public class TreeMap&lt;K,V&gt; extends AbstractMap&lt;K,V&gt; implements NavigableMap&lt;K,V&gt;, Cloneable, java.io.Serializable { // 比较器 private final Comparator&lt;? super K&gt; comparator; // 树根 private transient Entry&lt;K,V&gt; root; // 键值对的个数 private transient int size = 0; private transient int modCount = 0; /* 几个构造器方法 */ public TreeMap() { comparator = null; } public TreeMap(Comparator&lt;? super K&gt; comparator) { this.comparator = comparator; } public TreeMap(Map&lt;? extends K, ? extends V&gt; m) { comparator = null; putAll(m); } public TreeMap(SortedMap&lt;K, ? extends V&gt; m) { comparator = m.comparator(); try { buildFromSorted(m.size(), m.entrySet().iterator(), null, null); } catch (java.io.IOException cannotHappen) { } catch (ClassNotFoundException cannotHappen) { } } public int size() { return size; } // O(logn) public boolean containsKey(Object key) { return getEntry(key) != null; } // O(n) public boolean containsValue(Object value) { // 内部 Entry 的遍历 for (Entry&lt;K,V&gt; e = getFirstEntry(); e != null; e = successor(e)) if (valEquals(value, e.value)) return true; return false; } public V get(Object key) { Entry&lt;K,V&gt; p = getEntry(key); return (p==null ? null : p.value); } public Comparator&lt;? super K&gt; comparator() { return comparator; } // 最小键 public K firstKey() { return key(getFirstEntry()); } // 最大键 public K lastKey() { return key(getLastEntry()); } /* 一系列获取 entry 的 方法， 然后再通过 entry 去操纵键值对 */ final Entry&lt;K,V&gt; getFirstEntry() { Entry&lt;K,V&gt; p = root; if (p != null) while (p.left != null) p = p.left; return p; } final Entry&lt;K,V&gt; getLastEntry() { Entry&lt;K,V&gt; p = root; if (p != null) while (p.right != null) p = p.right; return p; } // 根据键值查找 entry // O(logn) final Entry&lt;K,V&gt; getEntry(Object key) { // Offload comparator-based version for sake of performance if (comparator != null) return getEntryUsingComparator(key); if (key == null) throw new NullPointerException(); @SuppressWarnings(\\"unchecked\\") Comparable&lt;? super K&gt; k = (Comparable&lt;? super K&gt;) key; // 从 树根开始，按照 BST 的搜索方式进行搜索 Entry&lt;K,V&gt; p = root; while (p != null) { int cmp = k.compareTo(p.key); if (cmp &lt; 0) p = p.left; else if (cmp &gt; 0) p = p.right; else return p; } return null; } final Entry&lt;K,V&gt; getEntryUsingComparator(Object key) { // 算法与上面一致 } /* 下面四个方法的时间复杂度都是 O(logn) */ // 返回与大于或等于给定键的最小键相关联的键值映射，如果没有此键，则 null final Entry&lt;K,V&gt; getCeilingEntry(K key) { Entry&lt;K,V&gt; p = root; while (p != null) { int cmp = compare(key, p.key); if (cmp &lt; 0) { if (p.left != null) p = p.left; else // key &lt; p.key 且 p 无 左孩子，那么 p.key 即为大于 key 中的最小键 return p; } else if (cmp &gt; 0) { if (p.right != null) { p = p.right; } else { // 下面的迭代需要注意一下， // 向上回溯 // 需要找到第一个在p右边的祖先节点 Entry&lt;K,V&gt; parent = p.parent; Entry&lt;K,V&gt; ch = p; while (parent != null &amp;&amp; ch == parent.right) { ch = parent; parent = parent.parent; } return parent; } } else // 刚好相等 return p; } return null; } // 返回与小于或等于给定键的最大键相关联的键值映射，如果没有此键，则 null final Entry&lt;K,V&gt; getFloorEntry(K key) { // 算法同上 } // 返回与严格大于给定键的最小键相关联的键值映射，如果没有此键，则 null final Entry&lt;K,V&gt; getHigherEntry(K key) { // 算法同上 } // 返回严格小于给定键的最大键相关联的键值映射，如果没有此键，则 null final Entry&lt;K,V&gt; getLowerEntry(K key) { // 算法同上 } public V put(K key, V value) { Entry&lt;K,V&gt; t = root; // 树为空 if (t == null) { compare(key, key); // 类型检查、判空检查 root = new Entry&lt;&gt;(key, value, null); size = 1; modCount++; return null; } int cmp; // 记录轨迹 Entry&lt;K,V&gt; parent; // 区分使用比较器与否 Comparator&lt;? super K&gt; cpr = comparator; if (cpr != null) { do { parent = t; cmp = cpr.compare(key, t.key); if (cmp &lt; 0) t = t.left; else if (cmp &gt; 0) t = t.right; else // 找到键，直接 setV return t.setValue(value); } while (t != null); } else { // 不使用比较器 } Entry&lt;K,V&gt; e = new Entry&lt;&gt;(key, value, parent); if (cmp &lt; 0) parent.left = e; else parent.right = e; // 调用红黑树的平衡算法 fixAfterInsertion(e); size++; modCount++; return null; } // 调用 deleteEntry; public V remove(Object key) { Entry&lt;K,V&gt; p = getEntry(key); if (p == null) return null; V oldValue = p.value; deleteEntry(p); return oldValue; } // O(1) // 只要 root = null， 经过可达性分析之后一整棵树都会被 GC public void clear() { modCount++; size = 0; root = null; } // NavigableMap API methods // 下面省略了一系列的 NavigableMap接口的方法 public Map.Entry&lt;K,V&gt; firstEntry() { return exportEntry(getFirstEntry()); } public Map.Entry&lt;K,V&gt; lastEntry() { return exportEntry(getLastEntry()); } // ............ /* 省略了视图类的代码 */ // 首次请求此视图时，初始化为包含条目集视图实例的字段。 // 视图是无状态的，因此没有理由创建多个视图。 // 注意，是视图，而不是快照 // 实现方法是通过通过内部类获取迭代器访问元素的 private transient EntrySet entrySet; private transient KeySet&lt;K&gt; navigableKeySet; private transient NavigableMap&lt;K,V&gt; descendingMap; public Set&lt;K&gt; keySet() { return navigableKeySet(); } public NavigableSet&lt;K&gt; navigableKeySet() { KeySet&lt;K&gt; nks = navigableKeySet; return (nks != null) ? nks : (navigableKeySet = new KeySet&lt;&gt;(this)); } public Collection&lt;V&gt; values() { Collection&lt;V&gt; vs = values; if (vs == null) { vs = new Values(); values = vs; } return vs; } public Set&lt;Map.Entry&lt;K,V&gt;&gt; entrySet() { EntrySet es = entrySet; return (es != null) ? es : (entrySet = new EntrySet()); } // 下面是作者包装的一些小方法（省略大部分） // 使用 exportEntry方法返回包装后的不可变的 Entry 因为内部的 Entry是可变的 static &lt;K,V&gt; Map.Entry&lt;K,V&gt; exportEntry(TreeMap.Entry&lt;K,V&gt; e) { return (e == null) ? null : new AbstractMap.SimpleImmutableEntry&lt;&gt;(e); } private static int computeRedLevel(int sz) { int level = 0; for (int m = sz - 1; m &gt;= 0; m = m / 2 - 1) level++; return level; } }"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-02-17T15:13:02.000Z"}],["meta",{"property":"article:author","content":"常潇-KeepCool"}],["meta",{"property":"article:tag","content":"Java集合类"}],["meta",{"property":"article:tag","content":"数据结构"}],["meta",{"property":"article:tag","content":"源码系列"}],["meta",{"property":"article:published_time","content":"2021-07-30T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2024-02-17T15:13:02.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"TreeMap、TreeSet源码\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2021-07-30T00:00:00.000Z\\",\\"dateModified\\":\\"2024-02-17T15:13:02.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"常潇-KeepCool\\",\\"url\\":\\"https://mister-hope.com\\"}]}"]]},"headers":[],"git":{"createdTime":1708182782000,"updatedTime":1708182782000,"contributors":[{"name":"jisongyang","email":"jisongyang@kuaishou.com","commits":1}]},"readingTime":{"minutes":9.09,"words":2727},"filePathRelative":"posts/Java集合类/TreeMap、TreeSet源码.md","localizedDate":"2021年7月30日","excerpt":"<h1> <code>TreeMap</code></h1>\\n<div class=\\"language-java line-numbers-mode\\" data-ext=\\"java\\"><pre class=\\"language-java\\"><code>\\n<span class=\\"token keyword\\">package</span> <span class=\\"token namespace\\">java<span class=\\"token punctuation\\">.</span>util</span><span class=\\"token punctuation\\">;</span>\\n\\n\\n<span class=\\"token keyword\\">public</span> <span class=\\"token keyword\\">class</span> <span class=\\"token class-name\\">TreeMap</span><span class=\\"token generics\\"><span class=\\"token punctuation\\">&lt;</span><span class=\\"token class-name\\">K</span><span class=\\"token punctuation\\">,</span><span class=\\"token class-name\\">V</span><span class=\\"token punctuation\\">&gt;</span></span>\\n    <span class=\\"token keyword\\">extends</span> <span class=\\"token class-name\\">AbstractMap</span><span class=\\"token generics\\"><span class=\\"token punctuation\\">&lt;</span><span class=\\"token class-name\\">K</span><span class=\\"token punctuation\\">,</span><span class=\\"token class-name\\">V</span><span class=\\"token punctuation\\">&gt;</span></span>\\n    <span class=\\"token keyword\\">implements</span> <span class=\\"token class-name\\">NavigableMap</span><span class=\\"token generics\\"><span class=\\"token punctuation\\">&lt;</span><span class=\\"token class-name\\">K</span><span class=\\"token punctuation\\">,</span><span class=\\"token class-name\\">V</span><span class=\\"token punctuation\\">&gt;</span></span><span class=\\"token punctuation\\">,</span> <span class=\\"token class-name\\">Cloneable</span><span class=\\"token punctuation\\">,</span> <span class=\\"token class-name\\"><span class=\\"token namespace\\">java<span class=\\"token punctuation\\">.</span>io<span class=\\"token punctuation\\">.</span></span>Serializable</span>\\n<span class=\\"token punctuation\\">{</span>\\n    <span class=\\"token comment\\">// 比较器</span>\\n    <span class=\\"token keyword\\">private</span> <span class=\\"token keyword\\">final</span> <span class=\\"token class-name\\">Comparator</span><span class=\\"token generics\\"><span class=\\"token punctuation\\">&lt;</span><span class=\\"token operator\\">?</span> <span class=\\"token keyword\\">super</span> <span class=\\"token class-name\\">K</span><span class=\\"token punctuation\\">&gt;</span></span> comparator<span class=\\"token punctuation\\">;</span>\\n\\n    <span class=\\"token comment\\">// 树根</span>\\n    <span class=\\"token keyword\\">private</span> <span class=\\"token keyword\\">transient</span> <span class=\\"token class-name\\">Entry</span><span class=\\"token generics\\"><span class=\\"token punctuation\\">&lt;</span><span class=\\"token class-name\\">K</span><span class=\\"token punctuation\\">,</span><span class=\\"token class-name\\">V</span><span class=\\"token punctuation\\">&gt;</span></span> root<span class=\\"token punctuation\\">;</span>\\n\\n    <span class=\\"token comment\\">// 键值对的个数</span>\\n    <span class=\\"token keyword\\">private</span> <span class=\\"token keyword\\">transient</span> <span class=\\"token keyword\\">int</span> size <span class=\\"token operator\\">=</span> <span class=\\"token number\\">0</span><span class=\\"token punctuation\\">;</span>\\n\\n    <span class=\\"token keyword\\">private</span> <span class=\\"token keyword\\">transient</span> <span class=\\"token keyword\\">int</span> modCount <span class=\\"token operator\\">=</span> <span class=\\"token number\\">0</span><span class=\\"token punctuation\\">;</span>\\n\\n\\n    <span class=\\"token comment\\">/*\\n    几个构造器方法\\n    */</span>\\n    \\n    <span class=\\"token keyword\\">public</span> <span class=\\"token class-name\\">TreeMap</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span> <span class=\\"token punctuation\\">{</span>\\n        comparator <span class=\\"token operator\\">=</span> <span class=\\"token keyword\\">null</span><span class=\\"token punctuation\\">;</span>\\n    <span class=\\"token punctuation\\">}</span>\\n\\n    <span class=\\"token keyword\\">public</span> <span class=\\"token class-name\\">TreeMap</span><span class=\\"token punctuation\\">(</span><span class=\\"token class-name\\">Comparator</span><span class=\\"token generics\\"><span class=\\"token punctuation\\">&lt;</span><span class=\\"token operator\\">?</span> <span class=\\"token keyword\\">super</span> <span class=\\"token class-name\\">K</span><span class=\\"token punctuation\\">&gt;</span></span> comparator<span class=\\"token punctuation\\">)</span> <span class=\\"token punctuation\\">{</span>\\n        <span class=\\"token keyword\\">this</span><span class=\\"token punctuation\\">.</span>comparator <span class=\\"token operator\\">=</span> comparator<span class=\\"token punctuation\\">;</span>\\n    <span class=\\"token punctuation\\">}</span>\\n\\n    <span class=\\"token keyword\\">public</span> <span class=\\"token class-name\\">TreeMap</span><span class=\\"token punctuation\\">(</span><span class=\\"token class-name\\">Map</span><span class=\\"token generics\\"><span class=\\"token punctuation\\">&lt;</span><span class=\\"token operator\\">?</span> <span class=\\"token keyword\\">extends</span> <span class=\\"token class-name\\">K</span><span class=\\"token punctuation\\">,</span> <span class=\\"token operator\\">?</span> <span class=\\"token keyword\\">extends</span> <span class=\\"token class-name\\">V</span><span class=\\"token punctuation\\">&gt;</span></span> m<span class=\\"token punctuation\\">)</span> <span class=\\"token punctuation\\">{</span>\\n        comparator <span class=\\"token operator\\">=</span> <span class=\\"token keyword\\">null</span><span class=\\"token punctuation\\">;</span>\\n        <span class=\\"token function\\">putAll</span><span class=\\"token punctuation\\">(</span>m<span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n    <span class=\\"token punctuation\\">}</span>\\n    \\n    <span class=\\"token keyword\\">public</span> <span class=\\"token class-name\\">TreeMap</span><span class=\\"token punctuation\\">(</span><span class=\\"token class-name\\">SortedMap</span><span class=\\"token generics\\"><span class=\\"token punctuation\\">&lt;</span><span class=\\"token class-name\\">K</span><span class=\\"token punctuation\\">,</span> <span class=\\"token operator\\">?</span> <span class=\\"token keyword\\">extends</span> <span class=\\"token class-name\\">V</span><span class=\\"token punctuation\\">&gt;</span></span> m<span class=\\"token punctuation\\">)</span> <span class=\\"token punctuation\\">{</span>\\n        comparator <span class=\\"token operator\\">=</span> m<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">comparator</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n        <span class=\\"token keyword\\">try</span> <span class=\\"token punctuation\\">{</span>\\n            <span class=\\"token function\\">buildFromSorted</span><span class=\\"token punctuation\\">(</span>m<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">size</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">,</span> m<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">entrySet</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">.</span><span class=\\"token function\\">iterator</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">,</span> <span class=\\"token keyword\\">null</span><span class=\\"token punctuation\\">,</span> <span class=\\"token keyword\\">null</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n        <span class=\\"token punctuation\\">}</span> <span class=\\"token keyword\\">catch</span> <span class=\\"token punctuation\\">(</span><span class=\\"token class-name\\"><span class=\\"token namespace\\">java<span class=\\"token punctuation\\">.</span>io<span class=\\"token punctuation\\">.</span></span>IOException</span> cannotHappen<span class=\\"token punctuation\\">)</span> <span class=\\"token punctuation\\">{</span>\\n        <span class=\\"token punctuation\\">}</span> <span class=\\"token keyword\\">catch</span> <span class=\\"token punctuation\\">(</span><span class=\\"token class-name\\">ClassNotFoundException</span> cannotHappen<span class=\\"token punctuation\\">)</span> <span class=\\"token punctuation\\">{</span>\\n        <span class=\\"token punctuation\\">}</span>\\n    <span class=\\"token punctuation\\">}</span>\\n\\n\\n  \\n    <span class=\\"token keyword\\">public</span> <span class=\\"token keyword\\">int</span> <span class=\\"token function\\">size</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span> <span class=\\"token punctuation\\">{</span>\\n        <span class=\\"token keyword\\">return</span> size<span class=\\"token punctuation\\">;</span>\\n    <span class=\\"token punctuation\\">}</span>\\n\\n    <span class=\\"token comment\\">// O(logn)</span>\\n    <span class=\\"token keyword\\">public</span> <span class=\\"token keyword\\">boolean</span> <span class=\\"token function\\">containsKey</span><span class=\\"token punctuation\\">(</span><span class=\\"token class-name\\">Object</span> key<span class=\\"token punctuation\\">)</span> <span class=\\"token punctuation\\">{</span>\\n        <span class=\\"token keyword\\">return</span> <span class=\\"token function\\">getEntry</span><span class=\\"token punctuation\\">(</span>key<span class=\\"token punctuation\\">)</span> <span class=\\"token operator\\">!=</span> <span class=\\"token keyword\\">null</span><span class=\\"token punctuation\\">;</span>\\n    <span class=\\"token punctuation\\">}</span>\\n\\n    <span class=\\"token comment\\">// O(n)</span>\\n    <span class=\\"token keyword\\">public</span> <span class=\\"token keyword\\">boolean</span> <span class=\\"token function\\">containsValue</span><span class=\\"token punctuation\\">(</span><span class=\\"token class-name\\">Object</span> value<span class=\\"token punctuation\\">)</span> <span class=\\"token punctuation\\">{</span>\\n        <span class=\\"token comment\\">// 内部 Entry 的遍历</span>\\n        <span class=\\"token keyword\\">for</span> <span class=\\"token punctuation\\">(</span><span class=\\"token class-name\\">Entry</span><span class=\\"token generics\\"><span class=\\"token punctuation\\">&lt;</span><span class=\\"token class-name\\">K</span><span class=\\"token punctuation\\">,</span><span class=\\"token class-name\\">V</span><span class=\\"token punctuation\\">&gt;</span></span> e <span class=\\"token operator\\">=</span> <span class=\\"token function\\">getFirstEntry</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span> e <span class=\\"token operator\\">!=</span> <span class=\\"token keyword\\">null</span><span class=\\"token punctuation\\">;</span> e <span class=\\"token operator\\">=</span> <span class=\\"token function\\">successor</span><span class=\\"token punctuation\\">(</span>e<span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">)</span>\\n            <span class=\\"token keyword\\">if</span> <span class=\\"token punctuation\\">(</span><span class=\\"token function\\">valEquals</span><span class=\\"token punctuation\\">(</span>value<span class=\\"token punctuation\\">,</span> e<span class=\\"token punctuation\\">.</span>value<span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">)</span>\\n                <span class=\\"token keyword\\">return</span> <span class=\\"token boolean\\">true</span><span class=\\"token punctuation\\">;</span>\\n        <span class=\\"token keyword\\">return</span> <span class=\\"token boolean\\">false</span><span class=\\"token punctuation\\">;</span>\\n    <span class=\\"token punctuation\\">}</span>\\n\\n    \\n    <span class=\\"token keyword\\">public</span> <span class=\\"token class-name\\">V</span> <span class=\\"token function\\">get</span><span class=\\"token punctuation\\">(</span><span class=\\"token class-name\\">Object</span> key<span class=\\"token punctuation\\">)</span> <span class=\\"token punctuation\\">{</span>\\n        <span class=\\"token class-name\\">Entry</span><span class=\\"token generics\\"><span class=\\"token punctuation\\">&lt;</span><span class=\\"token class-name\\">K</span><span class=\\"token punctuation\\">,</span><span class=\\"token class-name\\">V</span><span class=\\"token punctuation\\">&gt;</span></span> p <span class=\\"token operator\\">=</span> <span class=\\"token function\\">getEntry</span><span class=\\"token punctuation\\">(</span>key<span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n        <span class=\\"token keyword\\">return</span> <span class=\\"token punctuation\\">(</span>p<span class=\\"token operator\\">==</span><span class=\\"token keyword\\">null</span> <span class=\\"token operator\\">?</span> <span class=\\"token keyword\\">null</span> <span class=\\"token operator\\">:</span> p<span class=\\"token punctuation\\">.</span>value<span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n    <span class=\\"token punctuation\\">}</span>\\n\\n    <span class=\\"token keyword\\">public</span> <span class=\\"token class-name\\">Comparator</span><span class=\\"token generics\\"><span class=\\"token punctuation\\">&lt;</span><span class=\\"token operator\\">?</span> <span class=\\"token keyword\\">super</span> <span class=\\"token class-name\\">K</span><span class=\\"token punctuation\\">&gt;</span></span> <span class=\\"token function\\">comparator</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span> <span class=\\"token punctuation\\">{</span>\\n        <span class=\\"token keyword\\">return</span> comparator<span class=\\"token punctuation\\">;</span>\\n    <span class=\\"token punctuation\\">}</span>\\n\\n    <span class=\\"token comment\\">// 最小键</span>\\n    <span class=\\"token keyword\\">public</span> <span class=\\"token class-name\\">K</span> <span class=\\"token function\\">firstKey</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span> <span class=\\"token punctuation\\">{</span>\\n        <span class=\\"token keyword\\">return</span> <span class=\\"token function\\">key</span><span class=\\"token punctuation\\">(</span><span class=\\"token function\\">getFirstEntry</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n    <span class=\\"token punctuation\\">}</span>\\n\\n    <span class=\\"token comment\\">// 最大键</span>\\n    <span class=\\"token keyword\\">public</span> <span class=\\"token class-name\\">K</span> <span class=\\"token function\\">lastKey</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span> <span class=\\"token punctuation\\">{</span>\\n        <span class=\\"token keyword\\">return</span> <span class=\\"token function\\">key</span><span class=\\"token punctuation\\">(</span><span class=\\"token function\\">getLastEntry</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n    <span class=\\"token punctuation\\">}</span>\\n\\n    \\n    <span class=\\"token comment\\">/*\\n    一系列获取 entry 的 方法，\\n    然后再通过 entry 去操纵键值对\\n    */</span>\\n    \\n    <span class=\\"token keyword\\">final</span> <span class=\\"token class-name\\">Entry</span><span class=\\"token generics\\"><span class=\\"token punctuation\\">&lt;</span><span class=\\"token class-name\\">K</span><span class=\\"token punctuation\\">,</span><span class=\\"token class-name\\">V</span><span class=\\"token punctuation\\">&gt;</span></span> <span class=\\"token function\\">getFirstEntry</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span> <span class=\\"token punctuation\\">{</span>\\n        <span class=\\"token class-name\\">Entry</span><span class=\\"token generics\\"><span class=\\"token punctuation\\">&lt;</span><span class=\\"token class-name\\">K</span><span class=\\"token punctuation\\">,</span><span class=\\"token class-name\\">V</span><span class=\\"token punctuation\\">&gt;</span></span> p <span class=\\"token operator\\">=</span> root<span class=\\"token punctuation\\">;</span>\\n        <span class=\\"token keyword\\">if</span> <span class=\\"token punctuation\\">(</span>p <span class=\\"token operator\\">!=</span> <span class=\\"token keyword\\">null</span><span class=\\"token punctuation\\">)</span>\\n            <span class=\\"token keyword\\">while</span> <span class=\\"token punctuation\\">(</span>p<span class=\\"token punctuation\\">.</span>left <span class=\\"token operator\\">!=</span> <span class=\\"token keyword\\">null</span><span class=\\"token punctuation\\">)</span>\\n                p <span class=\\"token operator\\">=</span> p<span class=\\"token punctuation\\">.</span>left<span class=\\"token punctuation\\">;</span>\\n        <span class=\\"token keyword\\">return</span> p<span class=\\"token punctuation\\">;</span>\\n    <span class=\\"token punctuation\\">}</span>\\n\\n \\n    <span class=\\"token keyword\\">final</span> <span class=\\"token class-name\\">Entry</span><span class=\\"token generics\\"><span class=\\"token punctuation\\">&lt;</span><span class=\\"token class-name\\">K</span><span class=\\"token punctuation\\">,</span><span class=\\"token class-name\\">V</span><span class=\\"token punctuation\\">&gt;</span></span> <span class=\\"token function\\">getLastEntry</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span> <span class=\\"token punctuation\\">{</span>\\n        <span class=\\"token class-name\\">Entry</span><span class=\\"token generics\\"><span class=\\"token punctuation\\">&lt;</span><span class=\\"token class-name\\">K</span><span class=\\"token punctuation\\">,</span><span class=\\"token class-name\\">V</span><span class=\\"token punctuation\\">&gt;</span></span> p <span class=\\"token operator\\">=</span> root<span class=\\"token punctuation\\">;</span>\\n        <span class=\\"token keyword\\">if</span> <span class=\\"token punctuation\\">(</span>p <span class=\\"token operator\\">!=</span> <span class=\\"token keyword\\">null</span><span class=\\"token punctuation\\">)</span>\\n            <span class=\\"token keyword\\">while</span> <span class=\\"token punctuation\\">(</span>p<span class=\\"token punctuation\\">.</span>right <span class=\\"token operator\\">!=</span> <span class=\\"token keyword\\">null</span><span class=\\"token punctuation\\">)</span>\\n                p <span class=\\"token operator\\">=</span> p<span class=\\"token punctuation\\">.</span>right<span class=\\"token punctuation\\">;</span>\\n        <span class=\\"token keyword\\">return</span> p<span class=\\"token punctuation\\">;</span>\\n    <span class=\\"token punctuation\\">}</span>\\n    \\n    \\n    <span class=\\"token comment\\">// 根据键值查找 entry </span>\\n    <span class=\\"token comment\\">// O(logn)</span>\\n    <span class=\\"token keyword\\">final</span> <span class=\\"token class-name\\">Entry</span><span class=\\"token generics\\"><span class=\\"token punctuation\\">&lt;</span><span class=\\"token class-name\\">K</span><span class=\\"token punctuation\\">,</span><span class=\\"token class-name\\">V</span><span class=\\"token punctuation\\">&gt;</span></span> <span class=\\"token function\\">getEntry</span><span class=\\"token punctuation\\">(</span><span class=\\"token class-name\\">Object</span> key<span class=\\"token punctuation\\">)</span> <span class=\\"token punctuation\\">{</span>\\n        <span class=\\"token comment\\">// Offload comparator-based version for sake of performance</span>\\n        <span class=\\"token keyword\\">if</span> <span class=\\"token punctuation\\">(</span>comparator <span class=\\"token operator\\">!=</span> <span class=\\"token keyword\\">null</span><span class=\\"token punctuation\\">)</span>\\n            <span class=\\"token keyword\\">return</span> <span class=\\"token function\\">getEntryUsingComparator</span><span class=\\"token punctuation\\">(</span>key<span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n        <span class=\\"token keyword\\">if</span> <span class=\\"token punctuation\\">(</span>key <span class=\\"token operator\\">==</span> <span class=\\"token keyword\\">null</span><span class=\\"token punctuation\\">)</span>\\n            <span class=\\"token keyword\\">throw</span> <span class=\\"token keyword\\">new</span> <span class=\\"token class-name\\">NullPointerException</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n        <span class=\\"token annotation punctuation\\">@SuppressWarnings</span><span class=\\"token punctuation\\">(</span><span class=\\"token string\\">\\"unchecked\\"</span><span class=\\"token punctuation\\">)</span>\\n            <span class=\\"token class-name\\">Comparable</span><span class=\\"token generics\\"><span class=\\"token punctuation\\">&lt;</span><span class=\\"token operator\\">?</span> <span class=\\"token keyword\\">super</span> <span class=\\"token class-name\\">K</span><span class=\\"token punctuation\\">&gt;</span></span> k <span class=\\"token operator\\">=</span> <span class=\\"token punctuation\\">(</span><span class=\\"token class-name\\">Comparable</span><span class=\\"token generics\\"><span class=\\"token punctuation\\">&lt;</span><span class=\\"token operator\\">?</span> <span class=\\"token keyword\\">super</span> <span class=\\"token class-name\\">K</span><span class=\\"token punctuation\\">&gt;</span></span><span class=\\"token punctuation\\">)</span> key<span class=\\"token punctuation\\">;</span>\\n       \\n        <span class=\\"token comment\\">// 从 树根开始，按照 BST 的搜索方式进行搜索</span>\\n        <span class=\\"token class-name\\">Entry</span><span class=\\"token generics\\"><span class=\\"token punctuation\\">&lt;</span><span class=\\"token class-name\\">K</span><span class=\\"token punctuation\\">,</span><span class=\\"token class-name\\">V</span><span class=\\"token punctuation\\">&gt;</span></span> p <span class=\\"token operator\\">=</span> root<span class=\\"token punctuation\\">;</span>\\n        <span class=\\"token keyword\\">while</span> <span class=\\"token punctuation\\">(</span>p <span class=\\"token operator\\">!=</span> <span class=\\"token keyword\\">null</span><span class=\\"token punctuation\\">)</span> <span class=\\"token punctuation\\">{</span>\\n            <span class=\\"token keyword\\">int</span> cmp <span class=\\"token operator\\">=</span> k<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">compareTo</span><span class=\\"token punctuation\\">(</span>p<span class=\\"token punctuation\\">.</span>key<span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n            <span class=\\"token keyword\\">if</span> <span class=\\"token punctuation\\">(</span>cmp <span class=\\"token operator\\">&lt;</span> <span class=\\"token number\\">0</span><span class=\\"token punctuation\\">)</span>\\n                p <span class=\\"token operator\\">=</span> p<span class=\\"token punctuation\\">.</span>left<span class=\\"token punctuation\\">;</span>\\n            <span class=\\"token keyword\\">else</span> <span class=\\"token keyword\\">if</span> <span class=\\"token punctuation\\">(</span>cmp <span class=\\"token operator\\">&gt;</span> <span class=\\"token number\\">0</span><span class=\\"token punctuation\\">)</span>\\n                p <span class=\\"token operator\\">=</span> p<span class=\\"token punctuation\\">.</span>right<span class=\\"token punctuation\\">;</span>\\n            <span class=\\"token keyword\\">else</span>\\n                <span class=\\"token keyword\\">return</span> p<span class=\\"token punctuation\\">;</span>\\n        <span class=\\"token punctuation\\">}</span>\\n        <span class=\\"token keyword\\">return</span> <span class=\\"token keyword\\">null</span><span class=\\"token punctuation\\">;</span>\\n    <span class=\\"token punctuation\\">}</span>\\n\\n\\n    <span class=\\"token keyword\\">final</span> <span class=\\"token class-name\\">Entry</span><span class=\\"token generics\\"><span class=\\"token punctuation\\">&lt;</span><span class=\\"token class-name\\">K</span><span class=\\"token punctuation\\">,</span><span class=\\"token class-name\\">V</span><span class=\\"token punctuation\\">&gt;</span></span> <span class=\\"token function\\">getEntryUsingComparator</span><span class=\\"token punctuation\\">(</span><span class=\\"token class-name\\">Object</span> key<span class=\\"token punctuation\\">)</span> <span class=\\"token punctuation\\">{</span>\\n        <span class=\\"token comment\\">// 算法与上面一致</span>\\n    <span class=\\"token punctuation\\">}</span>\\n    \\n    <span class=\\"token comment\\">/*\\n    下面四个方法的时间复杂度都是 O(logn)\\n    */</span>\\n\\n    <span class=\\"token comment\\">// 返回与大于或等于给定键的最小键相关联的键值映射，如果没有此键，则 null</span>\\n    <span class=\\"token keyword\\">final</span> <span class=\\"token class-name\\">Entry</span><span class=\\"token generics\\"><span class=\\"token punctuation\\">&lt;</span><span class=\\"token class-name\\">K</span><span class=\\"token punctuation\\">,</span><span class=\\"token class-name\\">V</span><span class=\\"token punctuation\\">&gt;</span></span> <span class=\\"token function\\">getCeilingEntry</span><span class=\\"token punctuation\\">(</span><span class=\\"token class-name\\">K</span> key<span class=\\"token punctuation\\">)</span> <span class=\\"token punctuation\\">{</span>\\n        <span class=\\"token class-name\\">Entry</span><span class=\\"token generics\\"><span class=\\"token punctuation\\">&lt;</span><span class=\\"token class-name\\">K</span><span class=\\"token punctuation\\">,</span><span class=\\"token class-name\\">V</span><span class=\\"token punctuation\\">&gt;</span></span> p <span class=\\"token operator\\">=</span> root<span class=\\"token punctuation\\">;</span>\\n        <span class=\\"token keyword\\">while</span> <span class=\\"token punctuation\\">(</span>p <span class=\\"token operator\\">!=</span> <span class=\\"token keyword\\">null</span><span class=\\"token punctuation\\">)</span> <span class=\\"token punctuation\\">{</span>\\n            <span class=\\"token keyword\\">int</span> cmp <span class=\\"token operator\\">=</span> <span class=\\"token function\\">compare</span><span class=\\"token punctuation\\">(</span>key<span class=\\"token punctuation\\">,</span> p<span class=\\"token punctuation\\">.</span>key<span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n            <span class=\\"token keyword\\">if</span> <span class=\\"token punctuation\\">(</span>cmp <span class=\\"token operator\\">&lt;</span> <span class=\\"token number\\">0</span><span class=\\"token punctuation\\">)</span> <span class=\\"token punctuation\\">{</span>\\n                <span class=\\"token keyword\\">if</span> <span class=\\"token punctuation\\">(</span>p<span class=\\"token punctuation\\">.</span>left <span class=\\"token operator\\">!=</span> <span class=\\"token keyword\\">null</span><span class=\\"token punctuation\\">)</span>\\n                    p <span class=\\"token operator\\">=</span> p<span class=\\"token punctuation\\">.</span>left<span class=\\"token punctuation\\">;</span>\\n                <span class=\\"token keyword\\">else</span>\\n                    <span class=\\"token comment\\">// key &lt; p.key 且 p 无 左孩子，那么 p.key 即为大于 key 中的最小键</span>\\n                    <span class=\\"token keyword\\">return</span> p<span class=\\"token punctuation\\">;</span>\\n            <span class=\\"token punctuation\\">}</span> <span class=\\"token keyword\\">else</span> <span class=\\"token keyword\\">if</span> <span class=\\"token punctuation\\">(</span>cmp <span class=\\"token operator\\">&gt;</span> <span class=\\"token number\\">0</span><span class=\\"token punctuation\\">)</span> <span class=\\"token punctuation\\">{</span>\\n                <span class=\\"token keyword\\">if</span> <span class=\\"token punctuation\\">(</span>p<span class=\\"token punctuation\\">.</span>right <span class=\\"token operator\\">!=</span> <span class=\\"token keyword\\">null</span><span class=\\"token punctuation\\">)</span> <span class=\\"token punctuation\\">{</span>\\n                    p <span class=\\"token operator\\">=</span> p<span class=\\"token punctuation\\">.</span>right<span class=\\"token punctuation\\">;</span>\\n                <span class=\\"token punctuation\\">}</span> <span class=\\"token keyword\\">else</span> <span class=\\"token punctuation\\">{</span>\\n                    <span class=\\"token comment\\">// 下面的迭代需要注意一下，</span>\\n                    <span class=\\"token comment\\">// 向上回溯</span>\\n                    <span class=\\"token comment\\">// 需要找到第一个在p右边的祖先节点</span>\\n                    <span class=\\"token class-name\\">Entry</span><span class=\\"token generics\\"><span class=\\"token punctuation\\">&lt;</span><span class=\\"token class-name\\">K</span><span class=\\"token punctuation\\">,</span><span class=\\"token class-name\\">V</span><span class=\\"token punctuation\\">&gt;</span></span> parent <span class=\\"token operator\\">=</span> p<span class=\\"token punctuation\\">.</span>parent<span class=\\"token punctuation\\">;</span>\\n                    <span class=\\"token class-name\\">Entry</span><span class=\\"token generics\\"><span class=\\"token punctuation\\">&lt;</span><span class=\\"token class-name\\">K</span><span class=\\"token punctuation\\">,</span><span class=\\"token class-name\\">V</span><span class=\\"token punctuation\\">&gt;</span></span> ch <span class=\\"token operator\\">=</span> p<span class=\\"token punctuation\\">;</span>\\n                    <span class=\\"token keyword\\">while</span> <span class=\\"token punctuation\\">(</span>parent <span class=\\"token operator\\">!=</span> <span class=\\"token keyword\\">null</span> <span class=\\"token operator\\">&amp;&amp;</span> ch <span class=\\"token operator\\">==</span> parent<span class=\\"token punctuation\\">.</span>right<span class=\\"token punctuation\\">)</span> <span class=\\"token punctuation\\">{</span>\\n                        ch <span class=\\"token operator\\">=</span> parent<span class=\\"token punctuation\\">;</span>\\n                        parent <span class=\\"token operator\\">=</span> parent<span class=\\"token punctuation\\">.</span>parent<span class=\\"token punctuation\\">;</span>\\n                    <span class=\\"token punctuation\\">}</span>\\n                    <span class=\\"token keyword\\">return</span> parent<span class=\\"token punctuation\\">;</span>\\n                <span class=\\"token punctuation\\">}</span>\\n            <span class=\\"token punctuation\\">}</span> <span class=\\"token keyword\\">else</span>\\n                <span class=\\"token comment\\">// 刚好相等</span>\\n                <span class=\\"token keyword\\">return</span> p<span class=\\"token punctuation\\">;</span>\\n        <span class=\\"token punctuation\\">}</span>\\n        <span class=\\"token keyword\\">return</span> <span class=\\"token keyword\\">null</span><span class=\\"token punctuation\\">;</span>\\n    <span class=\\"token punctuation\\">}</span>\\n\\n    <span class=\\"token comment\\">// 返回与小于或等于给定键的最大键相关联的键值映射，如果没有此键，则 null </span>\\n    <span class=\\"token keyword\\">final</span> <span class=\\"token class-name\\">Entry</span><span class=\\"token generics\\"><span class=\\"token punctuation\\">&lt;</span><span class=\\"token class-name\\">K</span><span class=\\"token punctuation\\">,</span><span class=\\"token class-name\\">V</span><span class=\\"token punctuation\\">&gt;</span></span> <span class=\\"token function\\">getFloorEntry</span><span class=\\"token punctuation\\">(</span><span class=\\"token class-name\\">K</span> key<span class=\\"token punctuation\\">)</span> <span class=\\"token punctuation\\">{</span>\\n        <span class=\\"token comment\\">// 算法同上</span>\\n    <span class=\\"token punctuation\\">}</span>\\n\\n    <span class=\\"token comment\\">// 返回与严格大于给定键的最小键相关联的键值映射，如果没有此键，则 null</span>\\n    <span class=\\"token keyword\\">final</span> <span class=\\"token class-name\\">Entry</span><span class=\\"token generics\\"><span class=\\"token punctuation\\">&lt;</span><span class=\\"token class-name\\">K</span><span class=\\"token punctuation\\">,</span><span class=\\"token class-name\\">V</span><span class=\\"token punctuation\\">&gt;</span></span> <span class=\\"token function\\">getHigherEntry</span><span class=\\"token punctuation\\">(</span><span class=\\"token class-name\\">K</span> key<span class=\\"token punctuation\\">)</span> <span class=\\"token punctuation\\">{</span>\\n        <span class=\\"token comment\\">// 算法同上</span>\\n    <span class=\\"token punctuation\\">}</span>\\n\\n    <span class=\\"token comment\\">// 返回严格小于给定键的最大键相关联的键值映射，如果没有此键，则 null </span>\\n    <span class=\\"token keyword\\">final</span> <span class=\\"token class-name\\">Entry</span><span class=\\"token generics\\"><span class=\\"token punctuation\\">&lt;</span><span class=\\"token class-name\\">K</span><span class=\\"token punctuation\\">,</span><span class=\\"token class-name\\">V</span><span class=\\"token punctuation\\">&gt;</span></span> <span class=\\"token function\\">getLowerEntry</span><span class=\\"token punctuation\\">(</span><span class=\\"token class-name\\">K</span> key<span class=\\"token punctuation\\">)</span> <span class=\\"token punctuation\\">{</span>\\n        <span class=\\"token comment\\">// 算法同上</span>\\n    <span class=\\"token punctuation\\">}</span>\\n\\n    \\n    <span class=\\"token keyword\\">public</span> <span class=\\"token class-name\\">V</span> <span class=\\"token function\\">put</span><span class=\\"token punctuation\\">(</span><span class=\\"token class-name\\">K</span> key<span class=\\"token punctuation\\">,</span> <span class=\\"token class-name\\">V</span> value<span class=\\"token punctuation\\">)</span> <span class=\\"token punctuation\\">{</span>\\n        <span class=\\"token class-name\\">Entry</span><span class=\\"token generics\\"><span class=\\"token punctuation\\">&lt;</span><span class=\\"token class-name\\">K</span><span class=\\"token punctuation\\">,</span><span class=\\"token class-name\\">V</span><span class=\\"token punctuation\\">&gt;</span></span> t <span class=\\"token operator\\">=</span> root<span class=\\"token punctuation\\">;</span>\\n        <span class=\\"token comment\\">// 树为空</span>\\n        <span class=\\"token keyword\\">if</span> <span class=\\"token punctuation\\">(</span>t <span class=\\"token operator\\">==</span> <span class=\\"token keyword\\">null</span><span class=\\"token punctuation\\">)</span> <span class=\\"token punctuation\\">{</span>\\n            <span class=\\"token function\\">compare</span><span class=\\"token punctuation\\">(</span>key<span class=\\"token punctuation\\">,</span> key<span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span> <span class=\\"token comment\\">// 类型检查、判空检查</span>\\n            root <span class=\\"token operator\\">=</span> <span class=\\"token keyword\\">new</span> <span class=\\"token class-name\\">Entry</span><span class=\\"token generics\\"><span class=\\"token punctuation\\">&lt;</span><span class=\\"token punctuation\\">&gt;</span></span><span class=\\"token punctuation\\">(</span>key<span class=\\"token punctuation\\">,</span> value<span class=\\"token punctuation\\">,</span> <span class=\\"token keyword\\">null</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n            size <span class=\\"token operator\\">=</span> <span class=\\"token number\\">1</span><span class=\\"token punctuation\\">;</span>\\n            modCount<span class=\\"token operator\\">++</span><span class=\\"token punctuation\\">;</span>\\n            <span class=\\"token keyword\\">return</span> <span class=\\"token keyword\\">null</span><span class=\\"token punctuation\\">;</span>\\n        <span class=\\"token punctuation\\">}</span>\\n        \\n        <span class=\\"token keyword\\">int</span> cmp<span class=\\"token punctuation\\">;</span>\\n        <span class=\\"token comment\\">// 记录轨迹</span>\\n        <span class=\\"token class-name\\">Entry</span><span class=\\"token generics\\"><span class=\\"token punctuation\\">&lt;</span><span class=\\"token class-name\\">K</span><span class=\\"token punctuation\\">,</span><span class=\\"token class-name\\">V</span><span class=\\"token punctuation\\">&gt;</span></span> parent<span class=\\"token punctuation\\">;</span>\\n        <span class=\\"token comment\\">// 区分使用比较器与否</span>\\n        <span class=\\"token class-name\\">Comparator</span><span class=\\"token generics\\"><span class=\\"token punctuation\\">&lt;</span><span class=\\"token operator\\">?</span> <span class=\\"token keyword\\">super</span> <span class=\\"token class-name\\">K</span><span class=\\"token punctuation\\">&gt;</span></span> cpr <span class=\\"token operator\\">=</span> comparator<span class=\\"token punctuation\\">;</span>\\n        <span class=\\"token keyword\\">if</span> <span class=\\"token punctuation\\">(</span>cpr <span class=\\"token operator\\">!=</span> <span class=\\"token keyword\\">null</span><span class=\\"token punctuation\\">)</span> <span class=\\"token punctuation\\">{</span>\\n            <span class=\\"token keyword\\">do</span> <span class=\\"token punctuation\\">{</span>\\n                parent <span class=\\"token operator\\">=</span> t<span class=\\"token punctuation\\">;</span>\\n                cmp <span class=\\"token operator\\">=</span> cpr<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">compare</span><span class=\\"token punctuation\\">(</span>key<span class=\\"token punctuation\\">,</span> t<span class=\\"token punctuation\\">.</span>key<span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n                <span class=\\"token keyword\\">if</span> <span class=\\"token punctuation\\">(</span>cmp <span class=\\"token operator\\">&lt;</span> <span class=\\"token number\\">0</span><span class=\\"token punctuation\\">)</span>\\n                    t <span class=\\"token operator\\">=</span> t<span class=\\"token punctuation\\">.</span>left<span class=\\"token punctuation\\">;</span>\\n                <span class=\\"token keyword\\">else</span> <span class=\\"token keyword\\">if</span> <span class=\\"token punctuation\\">(</span>cmp <span class=\\"token operator\\">&gt;</span> <span class=\\"token number\\">0</span><span class=\\"token punctuation\\">)</span>\\n                    t <span class=\\"token operator\\">=</span> t<span class=\\"token punctuation\\">.</span>right<span class=\\"token punctuation\\">;</span>\\n                <span class=\\"token keyword\\">else</span>\\n                    <span class=\\"token comment\\">// 找到键，直接 setV</span>\\n                    <span class=\\"token keyword\\">return</span> t<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">setValue</span><span class=\\"token punctuation\\">(</span>value<span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n            <span class=\\"token punctuation\\">}</span> <span class=\\"token keyword\\">while</span> <span class=\\"token punctuation\\">(</span>t <span class=\\"token operator\\">!=</span> <span class=\\"token keyword\\">null</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n        <span class=\\"token punctuation\\">}</span>\\n        <span class=\\"token keyword\\">else</span> <span class=\\"token punctuation\\">{</span>\\n        <span class=\\"token comment\\">// 不使用比较器</span>\\n        <span class=\\"token punctuation\\">}</span>\\n        <span class=\\"token class-name\\">Entry</span><span class=\\"token generics\\"><span class=\\"token punctuation\\">&lt;</span><span class=\\"token class-name\\">K</span><span class=\\"token punctuation\\">,</span><span class=\\"token class-name\\">V</span><span class=\\"token punctuation\\">&gt;</span></span> e <span class=\\"token operator\\">=</span> <span class=\\"token keyword\\">new</span> <span class=\\"token class-name\\">Entry</span><span class=\\"token generics\\"><span class=\\"token punctuation\\">&lt;</span><span class=\\"token punctuation\\">&gt;</span></span><span class=\\"token punctuation\\">(</span>key<span class=\\"token punctuation\\">,</span> value<span class=\\"token punctuation\\">,</span> parent<span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n        <span class=\\"token keyword\\">if</span> <span class=\\"token punctuation\\">(</span>cmp <span class=\\"token operator\\">&lt;</span> <span class=\\"token number\\">0</span><span class=\\"token punctuation\\">)</span>\\n            parent<span class=\\"token punctuation\\">.</span>left <span class=\\"token operator\\">=</span> e<span class=\\"token punctuation\\">;</span>\\n        <span class=\\"token keyword\\">else</span>\\n            parent<span class=\\"token punctuation\\">.</span>right <span class=\\"token operator\\">=</span> e<span class=\\"token punctuation\\">;</span>\\n        <span class=\\"token comment\\">// 调用红黑树的平衡算法</span>\\n        <span class=\\"token function\\">fixAfterInsertion</span><span class=\\"token punctuation\\">(</span>e<span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n        size<span class=\\"token operator\\">++</span><span class=\\"token punctuation\\">;</span>\\n        modCount<span class=\\"token operator\\">++</span><span class=\\"token punctuation\\">;</span>\\n        <span class=\\"token keyword\\">return</span> <span class=\\"token keyword\\">null</span><span class=\\"token punctuation\\">;</span>\\n    <span class=\\"token punctuation\\">}</span>\\n\\n    \\n    <span class=\\"token comment\\">// 调用 deleteEntry;</span>\\n    <span class=\\"token keyword\\">public</span> <span class=\\"token class-name\\">V</span> <span class=\\"token function\\">remove</span><span class=\\"token punctuation\\">(</span><span class=\\"token class-name\\">Object</span> key<span class=\\"token punctuation\\">)</span> <span class=\\"token punctuation\\">{</span>\\n        <span class=\\"token class-name\\">Entry</span><span class=\\"token generics\\"><span class=\\"token punctuation\\">&lt;</span><span class=\\"token class-name\\">K</span><span class=\\"token punctuation\\">,</span><span class=\\"token class-name\\">V</span><span class=\\"token punctuation\\">&gt;</span></span> p <span class=\\"token operator\\">=</span> <span class=\\"token function\\">getEntry</span><span class=\\"token punctuation\\">(</span>key<span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n        <span class=\\"token keyword\\">if</span> <span class=\\"token punctuation\\">(</span>p <span class=\\"token operator\\">==</span> <span class=\\"token keyword\\">null</span><span class=\\"token punctuation\\">)</span>\\n            <span class=\\"token keyword\\">return</span> <span class=\\"token keyword\\">null</span><span class=\\"token punctuation\\">;</span>\\n\\n        <span class=\\"token class-name\\">V</span> oldValue <span class=\\"token operator\\">=</span> p<span class=\\"token punctuation\\">.</span>value<span class=\\"token punctuation\\">;</span>\\n        <span class=\\"token function\\">deleteEntry</span><span class=\\"token punctuation\\">(</span>p<span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n        <span class=\\"token keyword\\">return</span> oldValue<span class=\\"token punctuation\\">;</span>\\n    <span class=\\"token punctuation\\">}</span>\\n\\n    <span class=\\"token comment\\">// O(1)</span>\\n    <span class=\\"token comment\\">// 只要 root = null， 经过可达性分析之后一整棵树都会被 GC</span>\\n    <span class=\\"token keyword\\">public</span> <span class=\\"token keyword\\">void</span> <span class=\\"token function\\">clear</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span> <span class=\\"token punctuation\\">{</span>\\n        modCount<span class=\\"token operator\\">++</span><span class=\\"token punctuation\\">;</span>\\n        size <span class=\\"token operator\\">=</span> <span class=\\"token number\\">0</span><span class=\\"token punctuation\\">;</span>\\n        root <span class=\\"token operator\\">=</span> <span class=\\"token keyword\\">null</span><span class=\\"token punctuation\\">;</span>\\n    <span class=\\"token punctuation\\">}</span>\\n\\n   \\n\\n    <span class=\\"token comment\\">// NavigableMap API methods</span>\\n    <span class=\\"token comment\\">// 下面省略了一系列的 NavigableMap接口的方法</span>\\n    \\n    <span class=\\"token keyword\\">public</span> <span class=\\"token class-name\\">Map<span class=\\"token punctuation\\">.</span>Entry</span><span class=\\"token generics\\"><span class=\\"token punctuation\\">&lt;</span><span class=\\"token class-name\\">K</span><span class=\\"token punctuation\\">,</span><span class=\\"token class-name\\">V</span><span class=\\"token punctuation\\">&gt;</span></span> <span class=\\"token function\\">firstEntry</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span> <span class=\\"token punctuation\\">{</span>\\n        <span class=\\"token keyword\\">return</span> <span class=\\"token function\\">exportEntry</span><span class=\\"token punctuation\\">(</span><span class=\\"token function\\">getFirstEntry</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n    <span class=\\"token punctuation\\">}</span>\\n    \\n    <span class=\\"token keyword\\">public</span> <span class=\\"token class-name\\">Map<span class=\\"token punctuation\\">.</span>Entry</span><span class=\\"token generics\\"><span class=\\"token punctuation\\">&lt;</span><span class=\\"token class-name\\">K</span><span class=\\"token punctuation\\">,</span><span class=\\"token class-name\\">V</span><span class=\\"token punctuation\\">&gt;</span></span> <span class=\\"token function\\">lastEntry</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span> <span class=\\"token punctuation\\">{</span>\\n        <span class=\\"token keyword\\">return</span> <span class=\\"token function\\">exportEntry</span><span class=\\"token punctuation\\">(</span><span class=\\"token function\\">getLastEntry</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n    <span class=\\"token punctuation\\">}</span>\\n    \\n    <span class=\\"token comment\\">// ............</span>\\n\\n    \\n    <span class=\\"token comment\\">/*\\n    省略了视图类的代码\\n    */</span>\\n    <span class=\\"token comment\\">// 首次请求此视图时，初始化为包含条目集视图实例的字段。 </span>\\n    <span class=\\"token comment\\">// 视图是无状态的，因此没有理由创建多个视图。</span>\\n    \\n    <span class=\\"token comment\\">// 注意，是视图，而不是快照</span>\\n    <span class=\\"token comment\\">// 实现方法是通过通过内部类获取迭代器访问元素的</span>\\n    <span class=\\"token keyword\\">private</span> <span class=\\"token keyword\\">transient</span> <span class=\\"token class-name\\">EntrySet</span> entrySet<span class=\\"token punctuation\\">;</span>\\n    <span class=\\"token keyword\\">private</span> <span class=\\"token keyword\\">transient</span> <span class=\\"token class-name\\">KeySet</span><span class=\\"token generics\\"><span class=\\"token punctuation\\">&lt;</span><span class=\\"token class-name\\">K</span><span class=\\"token punctuation\\">&gt;</span></span> navigableKeySet<span class=\\"token punctuation\\">;</span>\\n    <span class=\\"token keyword\\">private</span> <span class=\\"token keyword\\">transient</span> <span class=\\"token class-name\\">NavigableMap</span><span class=\\"token generics\\"><span class=\\"token punctuation\\">&lt;</span><span class=\\"token class-name\\">K</span><span class=\\"token punctuation\\">,</span><span class=\\"token class-name\\">V</span><span class=\\"token punctuation\\">&gt;</span></span> descendingMap<span class=\\"token punctuation\\">;</span>\\n\\n    <span class=\\"token keyword\\">public</span> <span class=\\"token class-name\\">Set</span><span class=\\"token generics\\"><span class=\\"token punctuation\\">&lt;</span><span class=\\"token class-name\\">K</span><span class=\\"token punctuation\\">&gt;</span></span> <span class=\\"token function\\">keySet</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span> <span class=\\"token punctuation\\">{</span>\\n        <span class=\\"token keyword\\">return</span> <span class=\\"token function\\">navigableKeySet</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n    <span class=\\"token punctuation\\">}</span>\\n\\n    <span class=\\"token keyword\\">public</span> <span class=\\"token class-name\\">NavigableSet</span><span class=\\"token generics\\"><span class=\\"token punctuation\\">&lt;</span><span class=\\"token class-name\\">K</span><span class=\\"token punctuation\\">&gt;</span></span> <span class=\\"token function\\">navigableKeySet</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span> <span class=\\"token punctuation\\">{</span>\\n        <span class=\\"token class-name\\">KeySet</span><span class=\\"token generics\\"><span class=\\"token punctuation\\">&lt;</span><span class=\\"token class-name\\">K</span><span class=\\"token punctuation\\">&gt;</span></span> nks <span class=\\"token operator\\">=</span> navigableKeySet<span class=\\"token punctuation\\">;</span>\\n        <span class=\\"token keyword\\">return</span> <span class=\\"token punctuation\\">(</span>nks <span class=\\"token operator\\">!=</span> <span class=\\"token keyword\\">null</span><span class=\\"token punctuation\\">)</span> <span class=\\"token operator\\">?</span> nks <span class=\\"token operator\\">:</span> <span class=\\"token punctuation\\">(</span>navigableKeySet <span class=\\"token operator\\">=</span> <span class=\\"token keyword\\">new</span> <span class=\\"token class-name\\">KeySet</span><span class=\\"token generics\\"><span class=\\"token punctuation\\">&lt;</span><span class=\\"token punctuation\\">&gt;</span></span><span class=\\"token punctuation\\">(</span><span class=\\"token keyword\\">this</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n    <span class=\\"token punctuation\\">}</span>\\n\\n    <span class=\\"token keyword\\">public</span> <span class=\\"token class-name\\">Collection</span><span class=\\"token generics\\"><span class=\\"token punctuation\\">&lt;</span><span class=\\"token class-name\\">V</span><span class=\\"token punctuation\\">&gt;</span></span> <span class=\\"token function\\">values</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span> <span class=\\"token punctuation\\">{</span>\\n        <span class=\\"token class-name\\">Collection</span><span class=\\"token generics\\"><span class=\\"token punctuation\\">&lt;</span><span class=\\"token class-name\\">V</span><span class=\\"token punctuation\\">&gt;</span></span> vs <span class=\\"token operator\\">=</span> values<span class=\\"token punctuation\\">;</span>\\n        <span class=\\"token keyword\\">if</span> <span class=\\"token punctuation\\">(</span>vs <span class=\\"token operator\\">==</span> <span class=\\"token keyword\\">null</span><span class=\\"token punctuation\\">)</span> <span class=\\"token punctuation\\">{</span>\\n            vs <span class=\\"token operator\\">=</span> <span class=\\"token keyword\\">new</span> <span class=\\"token class-name\\">Values</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n            values <span class=\\"token operator\\">=</span> vs<span class=\\"token punctuation\\">;</span>\\n        <span class=\\"token punctuation\\">}</span>\\n        <span class=\\"token keyword\\">return</span> vs<span class=\\"token punctuation\\">;</span>\\n    <span class=\\"token punctuation\\">}</span>\\n    \\n    <span class=\\"token keyword\\">public</span> <span class=\\"token class-name\\">Set</span><span class=\\"token generics\\"><span class=\\"token punctuation\\">&lt;</span><span class=\\"token class-name\\">Map<span class=\\"token punctuation\\">.</span>Entry</span><span class=\\"token punctuation\\">&lt;</span><span class=\\"token class-name\\">K</span><span class=\\"token punctuation\\">,</span><span class=\\"token class-name\\">V</span><span class=\\"token punctuation\\">&gt;</span><span class=\\"token punctuation\\">&gt;</span></span> <span class=\\"token function\\">entrySet</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span> <span class=\\"token punctuation\\">{</span>\\n        <span class=\\"token class-name\\">EntrySet</span> es <span class=\\"token operator\\">=</span> entrySet<span class=\\"token punctuation\\">;</span>\\n        <span class=\\"token keyword\\">return</span> <span class=\\"token punctuation\\">(</span>es <span class=\\"token operator\\">!=</span> <span class=\\"token keyword\\">null</span><span class=\\"token punctuation\\">)</span> <span class=\\"token operator\\">?</span> es <span class=\\"token operator\\">:</span> <span class=\\"token punctuation\\">(</span>entrySet <span class=\\"token operator\\">=</span> <span class=\\"token keyword\\">new</span> <span class=\\"token class-name\\">EntrySet</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n    <span class=\\"token punctuation\\">}</span>\\n\\n   \\n    <span class=\\"token comment\\">// 下面是作者包装的一些小方法（省略大部分）</span>\\n    \\n    <span class=\\"token comment\\">// 使用 exportEntry方法返回包装后的不可变的 Entry 因为内部的 Entry是可变的</span>\\n    <span class=\\"token keyword\\">static</span> <span class=\\"token generics\\"><span class=\\"token punctuation\\">&lt;</span><span class=\\"token class-name\\">K</span><span class=\\"token punctuation\\">,</span><span class=\\"token class-name\\">V</span><span class=\\"token punctuation\\">&gt;</span></span> <span class=\\"token class-name\\">Map<span class=\\"token punctuation\\">.</span>Entry</span><span class=\\"token generics\\"><span class=\\"token punctuation\\">&lt;</span><span class=\\"token class-name\\">K</span><span class=\\"token punctuation\\">,</span><span class=\\"token class-name\\">V</span><span class=\\"token punctuation\\">&gt;</span></span> <span class=\\"token function\\">exportEntry</span><span class=\\"token punctuation\\">(</span><span class=\\"token class-name\\">TreeMap<span class=\\"token punctuation\\">.</span>Entry</span><span class=\\"token generics\\"><span class=\\"token punctuation\\">&lt;</span><span class=\\"token class-name\\">K</span><span class=\\"token punctuation\\">,</span><span class=\\"token class-name\\">V</span><span class=\\"token punctuation\\">&gt;</span></span> e<span class=\\"token punctuation\\">)</span> <span class=\\"token punctuation\\">{</span>\\n        <span class=\\"token keyword\\">return</span> <span class=\\"token punctuation\\">(</span>e <span class=\\"token operator\\">==</span> <span class=\\"token keyword\\">null</span><span class=\\"token punctuation\\">)</span> <span class=\\"token operator\\">?</span> <span class=\\"token keyword\\">null</span> <span class=\\"token operator\\">:</span>\\n            <span class=\\"token keyword\\">new</span> <span class=\\"token class-name\\">AbstractMap<span class=\\"token punctuation\\">.</span>SimpleImmutableEntry</span><span class=\\"token generics\\"><span class=\\"token punctuation\\">&lt;</span><span class=\\"token punctuation\\">&gt;</span></span><span class=\\"token punctuation\\">(</span>e<span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n    <span class=\\"token punctuation\\">}</span>\\n\\n    <span class=\\"token keyword\\">private</span> <span class=\\"token keyword\\">static</span> <span class=\\"token keyword\\">int</span> <span class=\\"token function\\">computeRedLevel</span><span class=\\"token punctuation\\">(</span><span class=\\"token keyword\\">int</span> sz<span class=\\"token punctuation\\">)</span> <span class=\\"token punctuation\\">{</span>\\n        <span class=\\"token keyword\\">int</span> level <span class=\\"token operator\\">=</span> <span class=\\"token number\\">0</span><span class=\\"token punctuation\\">;</span>\\n        <span class=\\"token keyword\\">for</span> <span class=\\"token punctuation\\">(</span><span class=\\"token keyword\\">int</span> m <span class=\\"token operator\\">=</span> sz <span class=\\"token operator\\">-</span> <span class=\\"token number\\">1</span><span class=\\"token punctuation\\">;</span> m <span class=\\"token operator\\">&gt;=</span> <span class=\\"token number\\">0</span><span class=\\"token punctuation\\">;</span> m <span class=\\"token operator\\">=</span> m <span class=\\"token operator\\">/</span> <span class=\\"token number\\">2</span> <span class=\\"token operator\\">-</span> <span class=\\"token number\\">1</span><span class=\\"token punctuation\\">)</span>\\n             level<span class=\\"token operator\\">++</span><span class=\\"token punctuation\\">;</span>\\n        <span class=\\"token keyword\\">return</span> level<span class=\\"token punctuation\\">;</span>\\n    <span class=\\"token punctuation\\">}</span>\\n    \\n<span class=\\"token punctuation\\">}</span>\\n</code></pre><div class=\\"line-numbers\\" aria-hidden=\\"true\\"><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div></div></div>","autoDesc":true}');export{n as data};
