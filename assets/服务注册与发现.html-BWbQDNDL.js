import{_ as r}from"./plugin-vue_export-helper-DlAUqK2U.js";import{o as e,c as t,a}from"./app-CN-Tp3xY.js";const n={},o=a('<h1 id="服务注册与发现基本原理" tabindex="-1"><a class="header-anchor" href="#服务注册与发现基本原理" aria-hidden="true">#</a> 服务注册与发现基本原理</h1><p>服务注册与发现是分为注册和发现两个关键的步骤。</p><p><strong>服务注册</strong>：服务进程在注册中心注册自己的元数据信息。通常包括主机和端口号，有时还有身份验证信息，协议，版本号，以及运行环境的信息。</p><p><strong>服务发现</strong>：客户端服务进程向注册中心发起查询，来获取服务的信息。服务发现的一个重要作用就是提供给客户端一个可用的服务列表。</p><h2 id="服务注册" tabindex="-1"><a class="header-anchor" href="#服务注册" aria-hidden="true">#</a> 服务注册</h2><p>注册是服务自己要负责注册与注销的工作。当服务启动后注册线程向注册中心注册，当服务下线时注销自己</p><h2 id="服务发现" tabindex="-1"><a class="header-anchor" href="#服务发现" aria-hidden="true">#</a> 服务发现</h2><p>服务发现分为客户端发现和代理发现。</p><p><strong>客户端发现</strong></p><p>客户端发现是指客户端负责向注册中心查询可用服务地址，获取到所有的可用实例地址列表后客户端根据负载均衡算法选择一个实例发起请求调用。</p><p>这种方式非常直接，客户端可以控制负载均衡算法。</p><p>但是缺点也很明显，获取实例地址、负载均衡等逻辑与服务的业务逻辑耦合在一起，如果服务发现或者负载平衡有变化，那么所有的服务都要修改重新上线。</p><p><strong>代理发现</strong></p><p>代理发现是指新增一个路由服务负责服务发现获取可用的实例列表，服务消费者如果需要调用服务A的一个实例可以直接将请求发往路由服务，路由服务根据配置好的负载均衡算法从可用的实例列表中选择一个实例将请求转发过去即可。</p><p>如果发现实例不可用，路由服务还可以自行重试，服务消费者完全不用感知。</p><h2 id="心跳机制" tabindex="-1"><a class="header-anchor" href="#心跳机制" aria-hidden="true">#</a> 心跳机制</h2><p>如果服务有多个实例，其中一个实例出现宕机，注册中心是可以实时感知到，并且将该实例信息从列表中移出，也称为摘机。</p><p>如何实现摘机？业界比较常用的方式是通过心跳检测的方式实现，心跳检测有<strong>主动</strong>和<strong>被动</strong>两种方式。</p><p><strong>被动检测</strong>是指服务主动向注册中心发送心跳消息，时间间隔可自定义，比如配置5秒发送一次，注册中心如果在三个周期内比如说15秒内没有收到实例的心跳消息，就会将该实例从列表中移除。</p><p><strong>主动检测</strong>是注册中心主动发起，每隔几秒中会给所有列表中的服务实例发送心跳检测消息，如果多个周期内未发送成功或未收到回复就会主动移除该实例。</p>',20),s=[o];function p(h,d){return e(),t("div",null,s)}const _=r(n,[["render",p],["__file","服务注册与发现.html.vue"]]);export{_ as default};
