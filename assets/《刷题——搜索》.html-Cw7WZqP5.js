const n=JSON.parse('{"key":"v-3fe1b376","path":"/posts/%E5%88%B7%E9%A2%98/%E3%80%8A%E5%88%B7%E9%A2%98%E2%80%94%E2%80%94%E6%90%9C%E7%B4%A2%E3%80%8B.html","title":"《刷题——搜索》","lang":"zh-CN","frontmatter":{"title":"《刷题——搜索》","date":"2023-01-23T06:20:15.000Z","categories":["算法题"],"tags":["深度优先搜索","广度优先搜索"],"description":"递归、深搜 字符串的全排列 有重复字符如何去重？ import java.util.*; public class Solution { Set&lt;String&gt; res = new HashSet&lt;&gt;(); char[] cs; boolean[] st; int n; String str; public ArrayList&lt;String&gt; Permutation(String str) { n = str.length(); cs = new char[n]; st = new boolean[n]; this.str = str; dfs(0); return new ArrayList&lt;&gt;(res); } void dfs(int pos) { if(pos == n) { res.add(new String(cs)); return; } for(int i = 0; i &lt; n; i++) { if(!st[i]) { st[i] = true; cs[pos] = str.charAt(i); dfs(pos+1); st[i] = false; } } } }","head":[["meta",{"property":"og:url","content":"https://mister-hope.github.io/posts/%E5%88%B7%E9%A2%98/%E3%80%8A%E5%88%B7%E9%A2%98%E2%80%94%E2%80%94%E6%90%9C%E7%B4%A2%E3%80%8B.html"}],["meta",{"property":"og:site_name","content":"常潇的技术站"}],["meta",{"property":"og:title","content":"《刷题——搜索》"}],["meta",{"property":"og:description","content":"递归、深搜 字符串的全排列 有重复字符如何去重？ import java.util.*; public class Solution { Set&lt;String&gt; res = new HashSet&lt;&gt;(); char[] cs; boolean[] st; int n; String str; public ArrayList&lt;String&gt; Permutation(String str) { n = str.length(); cs = new char[n]; st = new boolean[n]; this.str = str; dfs(0); return new ArrayList&lt;&gt;(res); } void dfs(int pos) { if(pos == n) { res.add(new String(cs)); return; } for(int i = 0; i &lt; n; i++) { if(!st[i]) { st[i] = true; cs[pos] = str.charAt(i); dfs(pos+1); st[i] = false; } } } }"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-02-17T15:13:02.000Z"}],["meta",{"property":"article:author","content":"常潇-KeepCool"}],["meta",{"property":"article:tag","content":"深度优先搜索"}],["meta",{"property":"article:tag","content":"广度优先搜索"}],["meta",{"property":"article:published_time","content":"2023-01-23T06:20:15.000Z"}],["meta",{"property":"article:modified_time","content":"2024-02-17T15:13:02.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"《刷题——搜索》\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2023-01-23T06:20:15.000Z\\",\\"dateModified\\":\\"2024-02-17T15:13:02.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"常潇-KeepCool\\",\\"url\\":\\"https://mister-hope.com\\"}]}"]]},"headers":[{"level":2,"title":"递归、深搜","slug":"递归、深搜","link":"#递归、深搜","children":[{"level":3,"title":"字符串的全排列","slug":"字符串的全排列","link":"#字符串的全排列","children":[]},{"level":3,"title":"括号生成","slug":"括号生成","link":"#括号生成","children":[]},{"level":3,"title":"IP生成（dfs+剪枝）","slug":"ip生成-dfs-剪枝","link":"#ip生成-dfs-剪枝","children":[]},{"level":3,"title":"子集","slug":"子集","link":"#子集","children":[]},{"level":3,"title":"全排列的交换写法","slug":"全排列的交换写法","link":"#全排列的交换写法","children":[]},{"level":3,"title":"全排列（字典序+去重）","slug":"全排列-字典序-去重","link":"#全排列-字典序-去重","children":[]},{"level":3,"title":"组合数（字典序、去重）","slug":"组合数-字典序、去重","link":"#组合数-字典序、去重","children":[]}]}],"git":{"createdTime":1705723098000,"updatedTime":1708182782000,"contributors":[{"name":"jisongyang","email":"jisongyang@kuaishou.com","commits":2}]},"readingTime":{"minutes":5.78,"words":1734},"filePathRelative":"posts/刷题/《刷题——搜索》.md","localizedDate":"2023年1月23日","excerpt":"<h2> 递归、深搜</h2>\\n<h3> 字符串的全排列</h3>\\n<p><strong>有重复字符如何去重？</strong></p>\\n<div class=\\"language-java line-numbers-mode\\" data-ext=\\"java\\"><pre class=\\"language-java\\"><code><span class=\\"token keyword\\">import</span> <span class=\\"token import\\"><span class=\\"token namespace\\">java<span class=\\"token punctuation\\">.</span>util<span class=\\"token punctuation\\">.</span></span><span class=\\"token operator\\">*</span></span><span class=\\"token punctuation\\">;</span>\\n\\n<span class=\\"token keyword\\">public</span> <span class=\\"token keyword\\">class</span> <span class=\\"token class-name\\">Solution</span> <span class=\\"token punctuation\\">{</span>\\n    <span class=\\"token class-name\\">Set</span><span class=\\"token generics\\"><span class=\\"token punctuation\\">&lt;</span><span class=\\"token class-name\\">String</span><span class=\\"token punctuation\\">&gt;</span></span> res <span class=\\"token operator\\">=</span> <span class=\\"token keyword\\">new</span> <span class=\\"token class-name\\">HashSet</span><span class=\\"token generics\\"><span class=\\"token punctuation\\">&lt;</span><span class=\\"token punctuation\\">&gt;</span></span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n    <span class=\\"token keyword\\">char</span><span class=\\"token punctuation\\">[</span><span class=\\"token punctuation\\">]</span> cs<span class=\\"token punctuation\\">;</span>\\n    <span class=\\"token keyword\\">boolean</span><span class=\\"token punctuation\\">[</span><span class=\\"token punctuation\\">]</span> st<span class=\\"token punctuation\\">;</span>\\n    <span class=\\"token keyword\\">int</span> n<span class=\\"token punctuation\\">;</span>\\n    <span class=\\"token class-name\\">String</span> str<span class=\\"token punctuation\\">;</span>\\n    \\n    <span class=\\"token keyword\\">public</span> <span class=\\"token class-name\\">ArrayList</span><span class=\\"token generics\\"><span class=\\"token punctuation\\">&lt;</span><span class=\\"token class-name\\">String</span><span class=\\"token punctuation\\">&gt;</span></span> <span class=\\"token class-name\\">Permutation</span><span class=\\"token punctuation\\">(</span><span class=\\"token class-name\\">String</span> str<span class=\\"token punctuation\\">)</span> <span class=\\"token punctuation\\">{</span>\\n        n <span class=\\"token operator\\">=</span> str<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">length</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n        cs <span class=\\"token operator\\">=</span> <span class=\\"token keyword\\">new</span> <span class=\\"token keyword\\">char</span><span class=\\"token punctuation\\">[</span>n<span class=\\"token punctuation\\">]</span><span class=\\"token punctuation\\">;</span>\\n        st <span class=\\"token operator\\">=</span> <span class=\\"token keyword\\">new</span> <span class=\\"token keyword\\">boolean</span><span class=\\"token punctuation\\">[</span>n<span class=\\"token punctuation\\">]</span><span class=\\"token punctuation\\">;</span>\\n        <span class=\\"token keyword\\">this</span><span class=\\"token punctuation\\">.</span>str <span class=\\"token operator\\">=</span> str<span class=\\"token punctuation\\">;</span>\\n        <span class=\\"token function\\">dfs</span><span class=\\"token punctuation\\">(</span><span class=\\"token number\\">0</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n        <span class=\\"token keyword\\">return</span> <span class=\\"token keyword\\">new</span> <span class=\\"token class-name\\">ArrayList</span><span class=\\"token generics\\"><span class=\\"token punctuation\\">&lt;</span><span class=\\"token punctuation\\">&gt;</span></span><span class=\\"token punctuation\\">(</span>res<span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n    <span class=\\"token punctuation\\">}</span>\\n    \\n    <span class=\\"token keyword\\">void</span> <span class=\\"token function\\">dfs</span><span class=\\"token punctuation\\">(</span><span class=\\"token keyword\\">int</span> pos<span class=\\"token punctuation\\">)</span> <span class=\\"token punctuation\\">{</span>\\n        <span class=\\"token keyword\\">if</span><span class=\\"token punctuation\\">(</span>pos <span class=\\"token operator\\">==</span> n<span class=\\"token punctuation\\">)</span> <span class=\\"token punctuation\\">{</span>\\n            res<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">add</span><span class=\\"token punctuation\\">(</span><span class=\\"token keyword\\">new</span> <span class=\\"token class-name\\">String</span><span class=\\"token punctuation\\">(</span>cs<span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n            <span class=\\"token keyword\\">return</span><span class=\\"token punctuation\\">;</span>\\n        <span class=\\"token punctuation\\">}</span>\\n        <span class=\\"token keyword\\">for</span><span class=\\"token punctuation\\">(</span><span class=\\"token keyword\\">int</span> i <span class=\\"token operator\\">=</span> <span class=\\"token number\\">0</span><span class=\\"token punctuation\\">;</span> i <span class=\\"token operator\\">&lt;</span> n<span class=\\"token punctuation\\">;</span> i<span class=\\"token operator\\">++</span><span class=\\"token punctuation\\">)</span> <span class=\\"token punctuation\\">{</span>\\n            <span class=\\"token keyword\\">if</span><span class=\\"token punctuation\\">(</span><span class=\\"token operator\\">!</span>st<span class=\\"token punctuation\\">[</span>i<span class=\\"token punctuation\\">]</span><span class=\\"token punctuation\\">)</span> <span class=\\"token punctuation\\">{</span>\\n                st<span class=\\"token punctuation\\">[</span>i<span class=\\"token punctuation\\">]</span> <span class=\\"token operator\\">=</span> <span class=\\"token boolean\\">true</span><span class=\\"token punctuation\\">;</span>\\n                cs<span class=\\"token punctuation\\">[</span>pos<span class=\\"token punctuation\\">]</span> <span class=\\"token operator\\">=</span> str<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">charAt</span><span class=\\"token punctuation\\">(</span>i<span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n                <span class=\\"token function\\">dfs</span><span class=\\"token punctuation\\">(</span>pos<span class=\\"token operator\\">+</span><span class=\\"token number\\">1</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n                st<span class=\\"token punctuation\\">[</span>i<span class=\\"token punctuation\\">]</span> <span class=\\"token operator\\">=</span> <span class=\\"token boolean\\">false</span><span class=\\"token punctuation\\">;</span>\\n            <span class=\\"token punctuation\\">}</span>\\n        <span class=\\"token punctuation\\">}</span>\\n    <span class=\\"token punctuation\\">}</span>\\n    \\n<span class=\\"token punctuation\\">}</span>\\n</code></pre><div class=\\"line-numbers\\" aria-hidden=\\"true\\"><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div></div></div>","autoDesc":true}');export{n as data};
