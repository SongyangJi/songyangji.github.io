const t=JSON.parse('{"key":"v-04613eb4","path":"/posts/Linux/Linux%E7%9A%84mmap%E6%A6%82%E5%BF%B5%E3%80%81%E5%8E%9F%E7%90%86%E3%80%81%E4%BD%BF%E7%94%A8.html","title":"Linux的mmap概念、原理、使用","lang":"zh-CN","frontmatter":{"title":"Linux的mmap概念、原理、使用","date":"2021-11-22T09:52:37.000Z","categories":["Linux"],"tags":["Linux","内核"],"description":"mmap基础概念 mmap是一种内存映射文件的方法，即将一个文件或者其它对象映射到进程的地址空间，实现文件磁盘地址和进程虚拟地址空间中一段虚拟地址的一一对映关系。 实现这样的映射关系后**，进程就可以采用指针的方式读写操作这一段内存**，而系统会自动回写脏页面到对应的文件磁盘上，即完成了对文件的操作而不必再调用read,write等系统调用函数。相反，内核空间对这段区域的修改也直接反映用户空间，从而可以实现不同进程间的文件共享。","head":[["meta",{"property":"og:url","content":"https://mister-hope.github.io/posts/Linux/Linux%E7%9A%84mmap%E6%A6%82%E5%BF%B5%E3%80%81%E5%8E%9F%E7%90%86%E3%80%81%E4%BD%BF%E7%94%A8.html"}],["meta",{"property":"og:site_name","content":"常潇的技术站"}],["meta",{"property":"og:title","content":"Linux的mmap概念、原理、使用"}],["meta",{"property":"og:description","content":"mmap基础概念 mmap是一种内存映射文件的方法，即将一个文件或者其它对象映射到进程的地址空间，实现文件磁盘地址和进程虚拟地址空间中一段虚拟地址的一一对映关系。 实现这样的映射关系后**，进程就可以采用指针的方式读写操作这一段内存**，而系统会自动回写脏页面到对应的文件磁盘上，即完成了对文件的操作而不必再调用read,write等系统调用函数。相反，内核空间对这段区域的修改也直接反映用户空间，从而可以实现不同进程间的文件共享。"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-02-17T15:13:02.000Z"}],["meta",{"property":"article:author","content":"常潇-KeepCool"}],["meta",{"property":"article:tag","content":"Linux"}],["meta",{"property":"article:tag","content":"内核"}],["meta",{"property":"article:published_time","content":"2021-11-22T09:52:37.000Z"}],["meta",{"property":"article:modified_time","content":"2024-02-17T15:13:02.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"Linux的mmap概念、原理、使用\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2021-11-22T09:52:37.000Z\\",\\"dateModified\\":\\"2024-02-17T15:13:02.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"常潇-KeepCool\\",\\"url\\":\\"https://mister-hope.com\\"}]}"]]},"headers":[{"level":2,"title":"内存映射步骤","slug":"内存映射步骤","link":"#内存映射步骤","children":[{"level":3,"title":"内核怎样保证各个进程寻址到同一个共享内存区域的内存页面","slug":"内核怎样保证各个进程寻址到同一个共享内存区域的内存页面","link":"#内核怎样保证各个进程寻址到同一个共享内存区域的内存页面","children":[]}]}],"git":{"createdTime":1708182782000,"updatedTime":1708182782000,"contributors":[{"name":"jisongyang","email":"jisongyang@kuaishou.com","commits":1}]},"readingTime":{"minutes":18.81,"words":5643},"filePathRelative":"posts/Linux/Linux的mmap概念、原理、使用.md","localizedDate":"2021年11月22日","excerpt":"<h1> mmap基础概念</h1>\\n<p><code>mmap</code>是一种<strong>内存映射文件</strong>的方法，即<strong>将一个文件或者其它对象映射到进程的地址空间</strong>，<strong>实现文件磁盘地址和进程虚拟地址空间中一段虚拟地址的一一对映关系</strong>。</p>\\n<p>实现这样的映射关系后**，进程就可以采用指针的方式读写操作这一段内存**，而<strong>系统会自动回写脏页面到对应的文件磁盘上</strong>，即完成了对文件的操作而不必再调用read,write等系统调用函数。相反，内核空间对这段区域的修改也直接反映用户空间，从而可以实现<strong>不同进程间的文件共享</strong>。</p>","autoDesc":true}');export{t as data};
