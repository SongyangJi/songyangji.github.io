const n=JSON.parse('{"key":"v-61efdb47","path":"/posts/Redis/Redis%E7%9A%84%E5%AE%9E%E6%88%98%E5%B0%8F%E4%BE%8B%E5%AD%90.html","title":"Redis的实战小例子","lang":"zh-CN","frontmatter":{"title":"Redis的实战小例子","date":"2022-09-21T15:14:47.000Z","categories":["Redis"],"tags":null,"description":"缓存 最常见的使用方式。 分布式锁 https://songyangji.gitee.io/2021/11/29/Redis%E5%AE%9E%E7%8E%B0%E5%88%86%E5%B8%83%E5%BC%8F%E9%94%81/ 排行榜 在线比赛的排行榜。 使用 zset即可。 @Service public class GameService { @Resource RedisTemplate redisTemplate; ZSetOperations ops; @PostConstruct public void init() { ops = redisTemplate.opsForZSet(); } public void incrUserScoreInGame(String gameId, int uid, double addedScore) { ops.incrementScore(gameId, uid, addedScore); } public void addUserWithScore(String gameId, int uid, double score) { ops.add(gameId, uid, score); } public List&lt;UserScore&gt; getTopK(String gameId, int k) { Set&lt;ZSetOperations.TypedTuple&lt;Integer&gt;&gt; set = ops.rangeWithScores(gameId, 0, k - 1); ArrayList&lt;UserScore&gt; objects = new ArrayList&lt;&gt;(); assert set != null; for (ZSetOperations.TypedTuple&lt;Integer&gt; tuple : set) { UserScore userScore = new UserScore(tuple.getValue() == null ? -1 : tuple.getValue() , tuple.getScore() == null ?0 : tuple.getScore()); objects.add(userScore); } return objects; } }","head":[["meta",{"property":"og:url","content":"https://mister-hope.github.io/posts/Redis/Redis%E7%9A%84%E5%AE%9E%E6%88%98%E5%B0%8F%E4%BE%8B%E5%AD%90.html"}],["meta",{"property":"og:site_name","content":"常潇的技术站"}],["meta",{"property":"og:title","content":"Redis的实战小例子"}],["meta",{"property":"og:description","content":"缓存 最常见的使用方式。 分布式锁 https://songyangji.gitee.io/2021/11/29/Redis%E5%AE%9E%E7%8E%B0%E5%88%86%E5%B8%83%E5%BC%8F%E9%94%81/ 排行榜 在线比赛的排行榜。 使用 zset即可。 @Service public class GameService { @Resource RedisTemplate redisTemplate; ZSetOperations ops; @PostConstruct public void init() { ops = redisTemplate.opsForZSet(); } public void incrUserScoreInGame(String gameId, int uid, double addedScore) { ops.incrementScore(gameId, uid, addedScore); } public void addUserWithScore(String gameId, int uid, double score) { ops.add(gameId, uid, score); } public List&lt;UserScore&gt; getTopK(String gameId, int k) { Set&lt;ZSetOperations.TypedTuple&lt;Integer&gt;&gt; set = ops.rangeWithScores(gameId, 0, k - 1); ArrayList&lt;UserScore&gt; objects = new ArrayList&lt;&gt;(); assert set != null; for (ZSetOperations.TypedTuple&lt;Integer&gt; tuple : set) { UserScore userScore = new UserScore(tuple.getValue() == null ? -1 : tuple.getValue() , tuple.getScore() == null ?0 : tuple.getScore()); objects.add(userScore); } return objects; } }"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-02-17T15:13:02.000Z"}],["meta",{"property":"article:author","content":"常潇-KeepCool"}],["meta",{"property":"article:published_time","content":"2022-09-21T15:14:47.000Z"}],["meta",{"property":"article:modified_time","content":"2024-02-17T15:13:02.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"Redis的实战小例子\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2022-09-21T15:14:47.000Z\\",\\"dateModified\\":\\"2024-02-17T15:13:02.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"常潇-KeepCool\\",\\"url\\":\\"https://mister-hope.com\\"}]}"]]},"headers":[{"level":2,"title":"缓存","slug":"缓存","link":"#缓存","children":[]},{"level":2,"title":"分布式锁","slug":"分布式锁","link":"#分布式锁","children":[]},{"level":2,"title":"排行榜","slug":"排行榜","link":"#排行榜","children":[]},{"level":2,"title":"签到","slug":"签到","link":"#签到","children":[]},{"level":2,"title":"面对面开房间","slug":"面对面开房间","link":"#面对面开房间","children":[]},{"level":2,"title":"第一种：基于Redis的setnx的操作","slug":"第一种-基于redis的setnx的操作","link":"#第一种-基于redis的setnx的操作","children":[]},{"level":2,"title":"第二种：基于Redis的数据结构zset]","slug":"第二种-基于redis的数据结构zset","link":"#第二种-基于redis的数据结构zset","children":[]},{"level":2,"title":"第三种：基于Redis的令牌桶算法","slug":"第三种-基于redis的令牌桶算法","link":"#第三种-基于redis的令牌桶算法","children":[]},{"level":2,"title":"第四种：基于Redis的漏桶算法","slug":"第四种-基于redis的漏桶算法","link":"#第四种-基于redis的漏桶算法","children":[]}],"git":{"createdTime":1708182782000,"updatedTime":1708182782000,"contributors":[{"name":"jisongyang","email":"jisongyang@kuaishou.com","commits":1}]},"readingTime":{"minutes":8.28,"words":2484},"filePathRelative":"posts/Redis/Redis的实战小例子.md","localizedDate":"2022年9月21日","excerpt":"<h2> 缓存</h2>\\n<p>最常见的使用方式。</p>\\n<h2> 分布式锁</h2>\\n<p>https://songyangji.gitee.io/2021/11/29/Redis%E5%AE%9E%E7%8E%B0%E5%88%86%E5%B8%83%E5%BC%8F%E9%94%81/</p>\\n<h2> 排行榜</h2>\\n<p>在线比赛的排行榜。</p>\\n<p>使用 zset即可。</p>\\n<div class=\\"language-java line-numbers-mode\\" data-ext=\\"java\\"><pre class=\\"language-java\\"><code><span class=\\"token annotation punctuation\\">@Service</span>\\n<span class=\\"token keyword\\">public</span> <span class=\\"token keyword\\">class</span> <span class=\\"token class-name\\">GameService</span> <span class=\\"token punctuation\\">{</span>\\n\\n    <span class=\\"token annotation punctuation\\">@Resource</span>\\n    <span class=\\"token class-name\\">RedisTemplate</span> redisTemplate<span class=\\"token punctuation\\">;</span>\\n    <span class=\\"token class-name\\">ZSetOperations</span> ops<span class=\\"token punctuation\\">;</span>\\n\\n    <span class=\\"token annotation punctuation\\">@PostConstruct</span>\\n    <span class=\\"token keyword\\">public</span> <span class=\\"token keyword\\">void</span> <span class=\\"token function\\">init</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span> <span class=\\"token punctuation\\">{</span>\\n        ops <span class=\\"token operator\\">=</span> redisTemplate<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">opsForZSet</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n    <span class=\\"token punctuation\\">}</span>\\n\\n    <span class=\\"token keyword\\">public</span> <span class=\\"token keyword\\">void</span> <span class=\\"token function\\">incrUserScoreInGame</span><span class=\\"token punctuation\\">(</span><span class=\\"token class-name\\">String</span> gameId<span class=\\"token punctuation\\">,</span> <span class=\\"token keyword\\">int</span> uid<span class=\\"token punctuation\\">,</span> <span class=\\"token keyword\\">double</span> addedScore<span class=\\"token punctuation\\">)</span> <span class=\\"token punctuation\\">{</span>\\n        ops<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">incrementScore</span><span class=\\"token punctuation\\">(</span>gameId<span class=\\"token punctuation\\">,</span> uid<span class=\\"token punctuation\\">,</span> addedScore<span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n    <span class=\\"token punctuation\\">}</span>\\n\\n    <span class=\\"token keyword\\">public</span> <span class=\\"token keyword\\">void</span> <span class=\\"token function\\">addUserWithScore</span><span class=\\"token punctuation\\">(</span><span class=\\"token class-name\\">String</span> gameId<span class=\\"token punctuation\\">,</span> <span class=\\"token keyword\\">int</span> uid<span class=\\"token punctuation\\">,</span> <span class=\\"token keyword\\">double</span> score<span class=\\"token punctuation\\">)</span> <span class=\\"token punctuation\\">{</span>\\n        ops<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">add</span><span class=\\"token punctuation\\">(</span>gameId<span class=\\"token punctuation\\">,</span> uid<span class=\\"token punctuation\\">,</span> score<span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n    <span class=\\"token punctuation\\">}</span>\\n\\n    <span class=\\"token keyword\\">public</span> <span class=\\"token class-name\\">List</span><span class=\\"token generics\\"><span class=\\"token punctuation\\">&lt;</span><span class=\\"token class-name\\">UserScore</span><span class=\\"token punctuation\\">&gt;</span></span> <span class=\\"token function\\">getTopK</span><span class=\\"token punctuation\\">(</span><span class=\\"token class-name\\">String</span> gameId<span class=\\"token punctuation\\">,</span> <span class=\\"token keyword\\">int</span> k<span class=\\"token punctuation\\">)</span> <span class=\\"token punctuation\\">{</span>\\n        <span class=\\"token class-name\\">Set</span><span class=\\"token generics\\"><span class=\\"token punctuation\\">&lt;</span><span class=\\"token class-name\\">ZSetOperations<span class=\\"token punctuation\\">.</span>TypedTuple</span><span class=\\"token punctuation\\">&lt;</span><span class=\\"token class-name\\">Integer</span><span class=\\"token punctuation\\">&gt;</span><span class=\\"token punctuation\\">&gt;</span></span> set <span class=\\"token operator\\">=</span> ops<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">rangeWithScores</span><span class=\\"token punctuation\\">(</span>gameId<span class=\\"token punctuation\\">,</span> <span class=\\"token number\\">0</span><span class=\\"token punctuation\\">,</span> k <span class=\\"token operator\\">-</span> <span class=\\"token number\\">1</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n        <span class=\\"token class-name\\">ArrayList</span><span class=\\"token generics\\"><span class=\\"token punctuation\\">&lt;</span><span class=\\"token class-name\\">UserScore</span><span class=\\"token punctuation\\">&gt;</span></span> objects <span class=\\"token operator\\">=</span> <span class=\\"token keyword\\">new</span> <span class=\\"token class-name\\">ArrayList</span><span class=\\"token generics\\"><span class=\\"token punctuation\\">&lt;</span><span class=\\"token punctuation\\">&gt;</span></span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n        <span class=\\"token keyword\\">assert</span> set <span class=\\"token operator\\">!=</span> <span class=\\"token keyword\\">null</span><span class=\\"token punctuation\\">;</span>\\n        <span class=\\"token keyword\\">for</span> <span class=\\"token punctuation\\">(</span><span class=\\"token class-name\\">ZSetOperations<span class=\\"token punctuation\\">.</span>TypedTuple</span><span class=\\"token generics\\"><span class=\\"token punctuation\\">&lt;</span><span class=\\"token class-name\\">Integer</span><span class=\\"token punctuation\\">&gt;</span></span> tuple <span class=\\"token operator\\">:</span> set<span class=\\"token punctuation\\">)</span> <span class=\\"token punctuation\\">{</span>\\n            <span class=\\"token class-name\\">UserScore</span> userScore <span class=\\"token operator\\">=</span> <span class=\\"token keyword\\">new</span> <span class=\\"token class-name\\">UserScore</span><span class=\\"token punctuation\\">(</span>tuple<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">getValue</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span> <span class=\\"token operator\\">==</span> <span class=\\"token keyword\\">null</span> <span class=\\"token operator\\">?</span> <span class=\\"token operator\\">-</span><span class=\\"token number\\">1</span> <span class=\\"token operator\\">:</span> tuple<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">getValue</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span> <span class=\\"token punctuation\\">,</span> tuple<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">getScore</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span> <span class=\\"token operator\\">==</span> <span class=\\"token keyword\\">null</span> <span class=\\"token operator\\">?</span><span class=\\"token number\\">0</span> <span class=\\"token operator\\">:</span> tuple<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">getScore</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n            objects<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">add</span><span class=\\"token punctuation\\">(</span>userScore<span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n        <span class=\\"token punctuation\\">}</span>\\n        <span class=\\"token keyword\\">return</span> objects<span class=\\"token punctuation\\">;</span>\\n    <span class=\\"token punctuation\\">}</span>\\n    \\n<span class=\\"token punctuation\\">}</span>\\n</code></pre><div class=\\"line-numbers\\" aria-hidden=\\"true\\"><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div></div></div>","autoDesc":true}');export{n as data};
