const n=JSON.parse('{"key":"v-0e69d1f4","path":"/posts/Java%E5%B9%B6%E5%8F%91%E6%8A%80%E6%9C%AF/Java%E7%BA%BF%E7%A8%8B%E7%8A%B6%E6%80%81%E8%BD%AC%E5%8C%96.html","title":"Java线程基本知识","lang":"zh-CN","frontmatter":{"title":"Java线程基本知识","date":"2022-09-25T17:00:01.000Z","categories":["Java多线程"],"tags":["Java多线程"],"description":"多线程使用方式 1. 直接继承Thread public class Main { static class MyThread extends Thread { @Override public void run() { System.out.println(\\"here\\"); } } public static void main(String[] args) throws Exception { MyThread myThread = new MyThread(); myThread.start(); } }","head":[["meta",{"property":"og:url","content":"https://mister-hope.github.io/posts/Java%E5%B9%B6%E5%8F%91%E6%8A%80%E6%9C%AF/Java%E7%BA%BF%E7%A8%8B%E7%8A%B6%E6%80%81%E8%BD%AC%E5%8C%96.html"}],["meta",{"property":"og:site_name","content":"常潇的技术站"}],["meta",{"property":"og:title","content":"Java线程基本知识"}],["meta",{"property":"og:description","content":"多线程使用方式 1. 直接继承Thread public class Main { static class MyThread extends Thread { @Override public void run() { System.out.println(\\"here\\"); } } public static void main(String[] args) throws Exception { MyThread myThread = new MyThread(); myThread.start(); } }"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-02-17T15:13:02.000Z"}],["meta",{"property":"article:author","content":"常潇-KeepCool"}],["meta",{"property":"article:tag","content":"Java多线程"}],["meta",{"property":"article:published_time","content":"2022-09-25T17:00:01.000Z"}],["meta",{"property":"article:modified_time","content":"2024-02-17T15:13:02.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"Java线程基本知识\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2022-09-25T17:00:01.000Z\\",\\"dateModified\\":\\"2024-02-17T15:13:02.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"常潇-KeepCool\\",\\"url\\":\\"https://mister-hope.com\\"}]}"]]},"headers":[{"level":2,"title":"1. 直接继承Thread","slug":"_1-直接继承thread","link":"#_1-直接继承thread","children":[]},{"level":2,"title":"2. 实现Runnable","slug":"_2-实现runnable","link":"#_2-实现runnable","children":[]},{"level":2,"title":"3. 使用Callable","slug":"_3-使用callable","link":"#_3-使用callable","children":[]},{"level":2,"title":"4. 使用FutureTask","slug":"_4-使用futuretask","link":"#_4-使用futuretask","children":[]},{"level":2,"title":"5. 使用CompletableFuture","slug":"_5-使用completablefuture","link":"#_5-使用completablefuture","children":[]},{"level":2,"title":"一、新建状态(NEW)","slug":"一、新建状态-new","link":"#一、新建状态-new","children":[]},{"level":2,"title":"二、运行状态(RUNNABLE)","slug":"二、运行状态-runnable","link":"#二、运行状态-runnable","children":[{"level":3,"title":"就绪状态（READY)","slug":"就绪状态-ready","link":"#就绪状态-ready","children":[]},{"level":3,"title":"运行状态(RUNNING)","slug":"运行状态-running","link":"#运行状态-running","children":[]}]},{"level":2,"title":"三、阻塞状态(BLOCKED)","slug":"三、阻塞状态-blocked","link":"#三、阻塞状态-blocked","children":[]},{"level":2,"title":"四、等待状态(WAITING)","slug":"四、等待状态-waiting","link":"#四、等待状态-waiting","children":[{"level":3,"title":"运行->等待","slug":"运行-等待","link":"#运行-等待","children":[]},{"level":3,"title":"等待->就绪","slug":"等待-就绪","link":"#等待-就绪","children":[]}]},{"level":2,"title":"五、超时等待状态(TIMED_WAITING)","slug":"五、超时等待状态-timed-waiting","link":"#五、超时等待状态-timed-waiting","children":[{"level":3,"title":"运行->超时等待","slug":"运行-超时等待","link":"#运行-超时等待","children":[]},{"level":3,"title":"超时等待->就绪","slug":"超时等待-就绪","link":"#超时等待-就绪","children":[]}]},{"level":2,"title":"六、消亡状态","slug":"六、消亡状态","link":"#六、消亡状态","children":[]}],"git":{"createdTime":1708182782000,"updatedTime":1708182782000,"contributors":[{"name":"jisongyang","email":"jisongyang@kuaishou.com","commits":1}]},"readingTime":{"minutes":5.85,"words":1755},"filePathRelative":"posts/Java并发技术/Java线程状态转化.md","localizedDate":"2022年9月26日","excerpt":"<h1> 多线程使用方式</h1>\\n<h2> 1. 直接继承Thread</h2>\\n<div class=\\"language-java line-numbers-mode\\" data-ext=\\"java\\"><pre class=\\"language-java\\"><code><span class=\\"token keyword\\">public</span> <span class=\\"token keyword\\">class</span> <span class=\\"token class-name\\">Main</span> <span class=\\"token punctuation\\">{</span>\\n\\n\\n    <span class=\\"token keyword\\">static</span> <span class=\\"token keyword\\">class</span> <span class=\\"token class-name\\">MyThread</span> <span class=\\"token keyword\\">extends</span> <span class=\\"token class-name\\">Thread</span> <span class=\\"token punctuation\\">{</span>\\n        <span class=\\"token annotation punctuation\\">@Override</span>\\n        <span class=\\"token keyword\\">public</span> <span class=\\"token keyword\\">void</span> <span class=\\"token function\\">run</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span> <span class=\\"token punctuation\\">{</span>\\n            <span class=\\"token class-name\\">System</span><span class=\\"token punctuation\\">.</span>out<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">println</span><span class=\\"token punctuation\\">(</span><span class=\\"token string\\">\\"here\\"</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n        <span class=\\"token punctuation\\">}</span>\\n    <span class=\\"token punctuation\\">}</span>\\n\\n    <span class=\\"token keyword\\">public</span> <span class=\\"token keyword\\">static</span> <span class=\\"token keyword\\">void</span> <span class=\\"token function\\">main</span><span class=\\"token punctuation\\">(</span><span class=\\"token class-name\\">String</span><span class=\\"token punctuation\\">[</span><span class=\\"token punctuation\\">]</span> args<span class=\\"token punctuation\\">)</span> <span class=\\"token keyword\\">throws</span> <span class=\\"token class-name\\">Exception</span> <span class=\\"token punctuation\\">{</span>\\n        <span class=\\"token class-name\\">MyThread</span> myThread <span class=\\"token operator\\">=</span> <span class=\\"token keyword\\">new</span> <span class=\\"token class-name\\">MyThread</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n        myThread<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">start</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n    <span class=\\"token punctuation\\">}</span>\\n<span class=\\"token punctuation\\">}</span>\\n</code></pre><div class=\\"line-numbers\\" aria-hidden=\\"true\\"><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div></div></div>","autoDesc":true}');export{n as data};
