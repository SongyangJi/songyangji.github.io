const n=JSON.parse('{"key":"v-37d37852","path":"/posts/%E5%88%B7%E9%A2%98/%E4%B8%80%E4%BA%9B%E8%BF%98%E4%B8%8D%E9%94%99%E7%9A%84%E9%A2%98-1.html","title":"一些还不错的题-1","lang":"zh-CN","frontmatter":{"title":"一些还不错的题-1","date":"2022-03-20T00:00:01.000Z","categories":["刷题"],"description":"链表 链表中的节点每k个一组翻转 题：将给出的链表中的节点每 k 个一组翻转，返回翻转后的链表 如果链表中的节点数不是 k 的倍数，将最后剩下的节点保持原样 你不能更改节点中的值，只能更改节点本身。 class Solution { public: /** * * @param head ListNode类 * @param k int整型 * @return ListNode类 */ int len(ListNode* head) { int cnt = 0; while(head) { ++cnt; head = head-&gt;next; } return cnt; } ListNode* reverseKGroup(ListNode* head, int k) { // write code here ListNode *dum = new ListNode(-1), *cur = dum; ListNode* p = head; while(p) { int l = len(p); if(l &lt; k) { cur-&gt;next = p; break; } ListNode *res = nullptr, *q = p; // 头插 for(int i = 0; i &lt; k; i++) { auto nxt = q-&gt;next; q-&gt;next = res; res = q; q = nxt; } cur-&gt;next = res; // 接上 cur = p; // cur 移动 p = q; // p 移动 } return dum-&gt;next; } };","head":[["meta",{"property":"og:url","content":"https://mister-hope.github.io/posts/%E5%88%B7%E9%A2%98/%E4%B8%80%E4%BA%9B%E8%BF%98%E4%B8%8D%E9%94%99%E7%9A%84%E9%A2%98-1.html"}],["meta",{"property":"og:site_name","content":"常潇的技术站"}],["meta",{"property":"og:title","content":"一些还不错的题-1"}],["meta",{"property":"og:description","content":"链表 链表中的节点每k个一组翻转 题：将给出的链表中的节点每 k 个一组翻转，返回翻转后的链表 如果链表中的节点数不是 k 的倍数，将最后剩下的节点保持原样 你不能更改节点中的值，只能更改节点本身。 class Solution { public: /** * * @param head ListNode类 * @param k int整型 * @return ListNode类 */ int len(ListNode* head) { int cnt = 0; while(head) { ++cnt; head = head-&gt;next; } return cnt; } ListNode* reverseKGroup(ListNode* head, int k) { // write code here ListNode *dum = new ListNode(-1), *cur = dum; ListNode* p = head; while(p) { int l = len(p); if(l &lt; k) { cur-&gt;next = p; break; } ListNode *res = nullptr, *q = p; // 头插 for(int i = 0; i &lt; k; i++) { auto nxt = q-&gt;next; q-&gt;next = res; res = q; q = nxt; } cur-&gt;next = res; // 接上 cur = p; // cur 移动 p = q; // p 移动 } return dum-&gt;next; } };"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-02-17T15:13:02.000Z"}],["meta",{"property":"article:author","content":"常潇-KeepCool"}],["meta",{"property":"article:published_time","content":"2022-03-20T00:00:01.000Z"}],["meta",{"property":"article:modified_time","content":"2024-02-17T15:13:02.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"一些还不错的题-1\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2022-03-20T00:00:01.000Z\\",\\"dateModified\\":\\"2024-02-17T15:13:02.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"常潇-KeepCool\\",\\"url\\":\\"https://mister-hope.com\\"}]}"]]},"headers":[{"level":2,"title":"链表","slug":"链表","link":"#链表","children":[{"level":3,"title":"链表中的节点每k个一组翻转","slug":"链表中的节点每k个一组翻转","link":"#链表中的节点每k个一组翻转","children":[]},{"level":3,"title":"判断链表中是否有环（快慢指针）","slug":"判断链表中是否有环-快慢指针","link":"#判断链表中是否有环-快慢指针","children":[]},{"level":3,"title":"环的入口","slug":"环的入口","link":"#环的入口","children":[]},{"level":3,"title":"链表相交","slug":"链表相交","link":"#链表相交","children":[]},{"level":3,"title":"链表的两路归并","slug":"链表的两路归并","link":"#链表的两路归并","children":[]},{"level":3,"title":"多路归并问题","slug":"多路归并问题","link":"#多路归并问题","children":[]},{"level":3,"title":"链表题","slug":"链表题","link":"#链表题","children":[]}]},{"level":2,"title":"快排","slug":"快排","link":"#快排","children":[{"level":3,"title":"裸快排","slug":"裸快排","link":"#裸快排","children":[]},{"level":3,"title":"前K大","slug":"前k大","link":"#前k大","children":[]},{"level":3,"title":"第 K 大","slug":"第-k-大","link":"#第-k-大","children":[]},{"level":3,"title":"链表快排","slug":"链表快排","link":"#链表快排","children":[]}]},{"level":2,"title":"LRU","slug":"lru","link":"#lru","children":[{"level":3,"title":"双向链表 + 哈希表","slug":"双向链表-哈希表","link":"#双向链表-哈希表","children":[]},{"level":3,"title":"LinkedHashMap","slug":"linkedhashmap","link":"#linkedhashmap","children":[]},{"level":3,"title":"LFU（最不经常使用）缓存结构设计","slug":"lfu-最不经常使用-缓存结构设计","link":"#lfu-最不经常使用-缓存结构设计","children":[]}]},{"level":2,"title":"滑动窗口","slug":"滑动窗口","link":"#滑动窗口","children":[{"level":3,"title":"雪花串","slug":"雪花串","link":"#雪花串","children":[]}]},{"level":2,"title":"DP","slug":"dp","link":"#dp","children":[{"level":3,"title":"最长公共子串","slug":"最长公共子串","link":"#最长公共子串","children":[]},{"level":3,"title":"LCS（最长公共子序列）","slug":"lcs-最长公共子序列","link":"#lcs-最长公共子序列","children":[]},{"level":3,"title":"编辑距离（LCS变种）","slug":"编辑距离-lcs变种","link":"#编辑距离-lcs变种","children":[]}]},{"level":2,"title":"二叉树","slug":"二叉树","link":"#二叉树","children":[{"level":3,"title":"二叉树的LCA（least-common-ancestor）","slug":"二叉树的lca-least-common-ancestor","link":"#二叉树的lca-least-common-ancestor","children":[]},{"level":3,"title":"二叉树的重建 + 层序遍历","slug":"二叉树的重建-层序遍历","link":"#二叉树的重建-层序遍历","children":[]},{"level":3,"title":"二叉搜索树、完全树的判定","slug":"二叉搜索树、完全树的判定","link":"#二叉搜索树、完全树的判定","children":[]}]},{"level":2,"title":"双指针","slug":"双指针","link":"#双指针","children":[{"level":3,"title":"两数之和","slug":"两数之和","link":"#两数之和","children":[]},{"level":3,"title":"三数之和","slug":"三数之和","link":"#三数之和","children":[]},{"level":3,"title":"接雨水","slug":"接雨水","link":"#接雨水","children":[]}]},{"level":2,"title":"栈、队列","slug":"栈、队列","link":"#栈、队列","children":[{"level":3,"title":"双栈队列","slug":"双栈队列","link":"#双栈队列","children":[]},{"level":3,"title":"包含min函数的栈（单调栈）","slug":"包含min函数的栈-单调栈","link":"#包含min函数的栈-单调栈","children":[]},{"level":3,"title":"表达式计算问题","slug":"表达式计算问题","link":"#表达式计算问题","children":[]}]},{"level":2,"title":"二分","slug":"二分","link":"#二分","children":[{"level":3,"title":"两个有序数组找中位数","slug":"两个有序数组找中位数","link":"#两个有序数组找中位数","children":[]},{"level":3,"title":"搜索旋转排序数组","slug":"搜索旋转排序数组","link":"#搜索旋转排序数组","children":[]},{"level":3,"title":"LIS（最长上升子序列）二分+贪心","slug":"lis-最长上升子序列-二分-贪心","link":"#lis-最长上升子序列-二分-贪心","children":[]}]},{"level":2,"title":"递归（dfs）","slug":"递归-dfs","link":"#递归-dfs","children":[{"level":3,"title":"字符串的全排列","slug":"字符串的全排列","link":"#字符串的全排列","children":[]}]},{"level":2,"title":"其他","slug":"其他","link":"#其他","children":[{"level":3,"title":"连续子数组的最大和（前缀和）","slug":"连续子数组的最大和-前缀和","link":"#连续子数组的最大和-前缀和","children":[]},{"level":3,"title":"超过半数的数","slug":"超过半数的数","link":"#超过半数的数","children":[]},{"level":3,"title":"有序矩阵的搜索","slug":"有序矩阵的搜索","link":"#有序矩阵的搜索","children":[]},{"level":3,"title":"进制转换","slug":"进制转换","link":"#进制转换","children":[]},{"level":3,"title":"区间合并","slug":"区间合并","link":"#区间合并","children":[]}]}],"git":{"createdTime":1708182782000,"updatedTime":1708182782000,"contributors":[{"name":"jisongyang","email":"jisongyang@kuaishou.com","commits":1}]},"readingTime":{"minutes":25.31,"words":7592},"filePathRelative":"posts/刷题/一些还不错的题-1.md","localizedDate":"2022年3月20日","excerpt":"<h2> 链表</h2>\\n<h3> 链表中的节点每k个一组翻转</h3>\\n<p>题：将给出的链表中的节点每 k 个一组翻转，返回翻转后的链表\\n如果链表中的节点数不是 k 的倍数，将最后剩下的节点保持原样\\n你不能更改节点中的值，只能更改节点本身。</p>\\n<div class=\\"language-java line-numbers-mode\\" data-ext=\\"java\\"><pre class=\\"language-java\\"><code><span class=\\"token keyword\\">class</span> <span class=\\"token class-name\\">Solution</span> <span class=\\"token punctuation\\">{</span>\\n<span class=\\"token keyword\\">public</span><span class=\\"token operator\\">:</span>\\n    <span class=\\"token doc-comment comment\\">/**\\n     * \\n     * <span class=\\"token keyword\\">@param</span> <span class=\\"token parameter\\">head</span> ListNode类 \\n     * <span class=\\"token keyword\\">@param</span> <span class=\\"token parameter\\">k</span> int整型 \\n     * <span class=\\"token keyword\\">@return</span> ListNode类\\n     */</span>\\n    <span class=\\"token keyword\\">int</span> <span class=\\"token function\\">len</span><span class=\\"token punctuation\\">(</span><span class=\\"token class-name\\">ListNode</span><span class=\\"token operator\\">*</span> head<span class=\\"token punctuation\\">)</span> <span class=\\"token punctuation\\">{</span>\\n        <span class=\\"token keyword\\">int</span> cnt <span class=\\"token operator\\">=</span> <span class=\\"token number\\">0</span><span class=\\"token punctuation\\">;</span>\\n        <span class=\\"token keyword\\">while</span><span class=\\"token punctuation\\">(</span>head<span class=\\"token punctuation\\">)</span> <span class=\\"token punctuation\\">{</span>\\n            <span class=\\"token operator\\">++</span>cnt<span class=\\"token punctuation\\">;</span>\\n            head <span class=\\"token operator\\">=</span> head<span class=\\"token operator\\">-&gt;</span>next<span class=\\"token punctuation\\">;</span>\\n        <span class=\\"token punctuation\\">}</span>\\n        <span class=\\"token keyword\\">return</span> cnt<span class=\\"token punctuation\\">;</span>\\n    <span class=\\"token punctuation\\">}</span>\\n    \\n    <span class=\\"token class-name\\">ListNode</span><span class=\\"token operator\\">*</span> <span class=\\"token function\\">reverseKGroup</span><span class=\\"token punctuation\\">(</span><span class=\\"token class-name\\">ListNode</span><span class=\\"token operator\\">*</span> head<span class=\\"token punctuation\\">,</span> <span class=\\"token keyword\\">int</span> k<span class=\\"token punctuation\\">)</span> <span class=\\"token punctuation\\">{</span>\\n        <span class=\\"token comment\\">// write code here</span>\\n        <span class=\\"token class-name\\">ListNode</span> <span class=\\"token operator\\">*</span>dum <span class=\\"token operator\\">=</span> <span class=\\"token keyword\\">new</span> <span class=\\"token class-name\\">ListNode</span><span class=\\"token punctuation\\">(</span><span class=\\"token operator\\">-</span><span class=\\"token number\\">1</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">,</span> <span class=\\"token operator\\">*</span>cur <span class=\\"token operator\\">=</span> dum<span class=\\"token punctuation\\">;</span>\\n        <span class=\\"token class-name\\">ListNode</span><span class=\\"token operator\\">*</span> p <span class=\\"token operator\\">=</span> head<span class=\\"token punctuation\\">;</span>\\n        <span class=\\"token keyword\\">while</span><span class=\\"token punctuation\\">(</span>p<span class=\\"token punctuation\\">)</span> <span class=\\"token punctuation\\">{</span>\\n            <span class=\\"token keyword\\">int</span> l <span class=\\"token operator\\">=</span> <span class=\\"token function\\">len</span><span class=\\"token punctuation\\">(</span>p<span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n            <span class=\\"token keyword\\">if</span><span class=\\"token punctuation\\">(</span>l <span class=\\"token operator\\">&lt;</span> k<span class=\\"token punctuation\\">)</span> <span class=\\"token punctuation\\">{</span>\\n                cur<span class=\\"token operator\\">-&gt;</span>next <span class=\\"token operator\\">=</span> p<span class=\\"token punctuation\\">;</span>\\n                <span class=\\"token keyword\\">break</span><span class=\\"token punctuation\\">;</span>\\n            <span class=\\"token punctuation\\">}</span>\\n            <span class=\\"token class-name\\">ListNode</span> <span class=\\"token operator\\">*</span>res <span class=\\"token operator\\">=</span> nullptr<span class=\\"token punctuation\\">,</span> <span class=\\"token operator\\">*</span>q <span class=\\"token operator\\">=</span> p<span class=\\"token punctuation\\">;</span>\\n            <span class=\\"token comment\\">// 头插</span>\\n            <span class=\\"token keyword\\">for</span><span class=\\"token punctuation\\">(</span><span class=\\"token keyword\\">int</span> i <span class=\\"token operator\\">=</span> <span class=\\"token number\\">0</span><span class=\\"token punctuation\\">;</span> i <span class=\\"token operator\\">&lt;</span> k<span class=\\"token punctuation\\">;</span> i<span class=\\"token operator\\">++</span><span class=\\"token punctuation\\">)</span> <span class=\\"token punctuation\\">{</span>\\n                auto nxt <span class=\\"token operator\\">=</span> q<span class=\\"token operator\\">-&gt;</span>next<span class=\\"token punctuation\\">;</span>\\n                q<span class=\\"token operator\\">-&gt;</span>next <span class=\\"token operator\\">=</span> res<span class=\\"token punctuation\\">;</span>\\n                res <span class=\\"token operator\\">=</span> q<span class=\\"token punctuation\\">;</span>\\n                q <span class=\\"token operator\\">=</span> nxt<span class=\\"token punctuation\\">;</span>\\n            <span class=\\"token punctuation\\">}</span>\\n            cur<span class=\\"token operator\\">-&gt;</span>next <span class=\\"token operator\\">=</span> res<span class=\\"token punctuation\\">;</span> <span class=\\"token comment\\">// 接上</span>\\n            cur <span class=\\"token operator\\">=</span> p<span class=\\"token punctuation\\">;</span> <span class=\\"token comment\\">// cur 移动</span>\\n            p <span class=\\"token operator\\">=</span> q<span class=\\"token punctuation\\">;</span> <span class=\\"token comment\\">// p 移动</span>\\n        <span class=\\"token punctuation\\">}</span>\\n        <span class=\\"token keyword\\">return</span> dum<span class=\\"token operator\\">-&gt;</span>next<span class=\\"token punctuation\\">;</span>\\n    <span class=\\"token punctuation\\">}</span>\\n<span class=\\"token punctuation\\">}</span><span class=\\"token punctuation\\">;</span>\\n</code></pre><div class=\\"line-numbers\\" aria-hidden=\\"true\\"><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div></div></div>","autoDesc":true}');export{n as data};
