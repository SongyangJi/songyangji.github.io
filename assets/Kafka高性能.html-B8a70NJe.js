const t=JSON.parse('{"key":"v-0a845916","path":"/posts/%E6%B6%88%E6%81%AF%E4%B8%AD%E9%97%B4%E4%BB%B6/Kafka%E9%AB%98%E6%80%A7%E8%83%BD.html","title":"Kafka高性能","lang":"zh-CN","frontmatter":{"title":"Kafka高性能","date":"2023-01-09T02:43:20.000Z","categories":["Kafka"],"tags":["消息中间件","Message Queue","Kafka"],"description":"宏观架构层面 利用Partition实现并行处理 Partition提供并行处理的能力 Kafka是一个Pub-Sub的消息系统，无论是发布还是订阅，都须指定Topic。如《Kafka设计解析（一）- Kafka背景及架构介绍 》一文所述，Topic只是一个逻辑的概念。每个Topic都包含一个或多个Partition，不同Partition可位于不同节点。同时Partition在物理上对应一个本地文件夹，每个Partition包含一个或多个Segment，每个Segment包含一个数据文件和一个与之对应的索引文件。在逻辑上，可以把一个Partition当作一个非常长的数组，可通过这个“数组”的索引（offset）去访问其数据。","head":[["meta",{"property":"og:url","content":"https://mister-hope.github.io/posts/%E6%B6%88%E6%81%AF%E4%B8%AD%E9%97%B4%E4%BB%B6/Kafka%E9%AB%98%E6%80%A7%E8%83%BD.html"}],["meta",{"property":"og:site_name","content":"常潇的技术站"}],["meta",{"property":"og:title","content":"Kafka高性能"}],["meta",{"property":"og:description","content":"宏观架构层面 利用Partition实现并行处理 Partition提供并行处理的能力 Kafka是一个Pub-Sub的消息系统，无论是发布还是订阅，都须指定Topic。如《Kafka设计解析（一）- Kafka背景及架构介绍 》一文所述，Topic只是一个逻辑的概念。每个Topic都包含一个或多个Partition，不同Partition可位于不同节点。同时Partition在物理上对应一个本地文件夹，每个Partition包含一个或多个Segment，每个Segment包含一个数据文件和一个与之对应的索引文件。在逻辑上，可以把一个Partition当作一个非常长的数组，可通过这个“数组”的索引（offset）去访问其数据。"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-02-17T15:13:02.000Z"}],["meta",{"property":"article:author","content":"常潇-KeepCool"}],["meta",{"property":"article:tag","content":"消息中间件"}],["meta",{"property":"article:tag","content":"Message Queue"}],["meta",{"property":"article:tag","content":"Kafka"}],["meta",{"property":"article:published_time","content":"2023-01-09T02:43:20.000Z"}],["meta",{"property":"article:modified_time","content":"2024-02-17T15:13:02.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"Kafka高性能\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2023-01-09T02:43:20.000Z\\",\\"dateModified\\":\\"2024-02-17T15:13:02.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"常潇-KeepCool\\",\\"url\\":\\"https://mister-hope.com\\"}]}"]]},"headers":[{"level":2,"title":"利用Partition实现并行处理","slug":"利用partition实现并行处理","link":"#利用partition实现并行处理","children":[{"level":3,"title":"Partition提供并行处理的能力","slug":"partition提供并行处理的能力","link":"#partition提供并行处理的能力","children":[]},{"level":3,"title":"Partition是最小并发粒度","slug":"partition是最小并发粒度","link":"#partition是最小并发粒度","children":[]}]},{"level":2,"title":"ISR实现可用性与数据一致性的动态平衡","slug":"isr实现可用性与数据一致性的动态平衡","link":"#isr实现可用性与数据一致性的动态平衡","children":[{"level":3,"title":"CAP理论","slug":"cap理论","link":"#cap理论","children":[]},{"level":3,"title":"常用数据复制及一致性方案","slug":"常用数据复制及一致性方案","link":"#常用数据复制及一致性方案","children":[]},{"level":3,"title":"使用ISR方案的原因","slug":"使用isr方案的原因","link":"#使用isr方案的原因","children":[]},{"level":3,"title":"ISR相关配置说明","slug":"isr相关配置说明","link":"#isr相关配置说明","children":[]}]},{"level":2,"title":"高效使用磁盘","slug":"高效使用磁盘","link":"#高效使用磁盘","children":[{"level":3,"title":"顺序写磁盘","slug":"顺序写磁盘","link":"#顺序写磁盘","children":[]},{"level":3,"title":"充分利用Page Cache","slug":"充分利用page-cache","link":"#充分利用page-cache","children":[]},{"level":3,"title":"支持多Disk Drive","slug":"支持多disk-drive","link":"#支持多disk-drive","children":[]}]},{"level":2,"title":"零拷贝","slug":"零拷贝","link":"#零拷贝","children":[{"level":3,"title":"传统模式下的四次拷贝与四次上下文切换","slug":"传统模式下的四次拷贝与四次上下文切换","link":"#传统模式下的四次拷贝与四次上下文切换","children":[]},{"level":3,"title":"sendfile和transferTo实现零拷贝","slug":"sendfile和transferto实现零拷贝","link":"#sendfile和transferto实现零拷贝","children":[]}]},{"level":2,"title":"减少网络开销","slug":"减少网络开销","link":"#减少网络开销","children":[{"level":3,"title":"批处理","slug":"批处理","link":"#批处理","children":[]},{"level":3,"title":"数据压缩降低网络负载","slug":"数据压缩降低网络负载","link":"#数据压缩降低网络负载","children":[]},{"level":3,"title":"高效的序列化方式","slug":"高效的序列化方式","link":"#高效的序列化方式","children":[]}]}],"git":{"createdTime":1708182782000,"updatedTime":1708182782000,"contributors":[{"name":"jisongyang","email":"jisongyang@kuaishou.com","commits":1}]},"readingTime":{"minutes":17.32,"words":5196},"filePathRelative":"posts/消息中间件/Kafka高性能.md","localizedDate":"2023年1月9日","excerpt":"<h1> 宏观架构层面</h1>\\n<h2> 利用Partition实现并行处理</h2>\\n<h3> Partition提供并行处理的能力</h3>\\n<p>Kafka是一个Pub-Sub的消息系统，无论是发布还是订阅，都须指定Topic。如《<a href=\\"http://www.jasongj.com/2015/03/10/KafkaColumn1\\" target=\\"_blank\\" rel=\\"noopener noreferrer\\">Kafka设计解析（一）- Kafka背景及架构介绍</a>\\n》一文所述，Topic只是一个逻辑的概念。每个Topic都包含一个或多个Partition，不同Partition可位于不同节点。同时Partition在物理上对应一个本地文件夹，每个Partition包含一个或多个Segment，每个Segment包含一个数据文件和一个与之对应的索引文件。在逻辑上，可以把一个Partition当作一个非常长的数组，可通过这个“数组”的索引（offset）去访问其数据。</p>","autoDesc":true}');export{t as data};
