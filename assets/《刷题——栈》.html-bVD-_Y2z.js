const n=JSON.parse('{"key":"v-6a680697","path":"/posts/%E5%88%B7%E9%A2%98/%E3%80%8A%E5%88%B7%E9%A2%98%E2%80%94%E2%80%94%E6%A0%88%E3%80%8B.html","title":"《刷题——栈、队列》","lang":"zh-CN","frontmatter":{"title":"《刷题——栈、队列》","date":"2022-12-31T19:32:45.000Z","categories":["算法题"],"tags":["数据结构","栈"],"description":"栈 双栈队列 import java.util.Stack; public class Solution { Stack&lt;Integer&gt; stack1 = new Stack&lt;Integer&gt;(); // 正常的栈 Stack&lt;Integer&gt; stack2 = new Stack&lt;Integer&gt;(); // FIFO的顺序 public void push(int node) { stack1.push(node); } public int pop() { if(stack2.size() &gt; 0) return stack2.pop(); // 空的话，就一口气全将 “正常的栈” 弹出来 while(!stack1.isEmpty()) { stack2.push(stack1.pop()); } return stack2.pop(); } }","head":[["meta",{"property":"og:url","content":"https://mister-hope.github.io/posts/%E5%88%B7%E9%A2%98/%E3%80%8A%E5%88%B7%E9%A2%98%E2%80%94%E2%80%94%E6%A0%88%E3%80%8B.html"}],["meta",{"property":"og:site_name","content":"常潇的技术站"}],["meta",{"property":"og:title","content":"《刷题——栈、队列》"}],["meta",{"property":"og:description","content":"栈 双栈队列 import java.util.Stack; public class Solution { Stack&lt;Integer&gt; stack1 = new Stack&lt;Integer&gt;(); // 正常的栈 Stack&lt;Integer&gt; stack2 = new Stack&lt;Integer&gt;(); // FIFO的顺序 public void push(int node) { stack1.push(node); } public int pop() { if(stack2.size() &gt; 0) return stack2.pop(); // 空的话，就一口气全将 “正常的栈” 弹出来 while(!stack1.isEmpty()) { stack2.push(stack1.pop()); } return stack2.pop(); } }"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-02-17T15:13:02.000Z"}],["meta",{"property":"article:author","content":"常潇-KeepCool"}],["meta",{"property":"article:tag","content":"数据结构"}],["meta",{"property":"article:tag","content":"栈"}],["meta",{"property":"article:published_time","content":"2022-12-31T19:32:45.000Z"}],["meta",{"property":"article:modified_time","content":"2024-02-17T15:13:02.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"《刷题——栈、队列》\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2022-12-31T19:32:45.000Z\\",\\"dateModified\\":\\"2024-02-17T15:13:02.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"常潇-KeepCool\\",\\"url\\":\\"https://mister-hope.com\\"}]}"]]},"headers":[{"level":2,"title":"栈","slug":"栈","link":"#栈","children":[{"level":3,"title":"双栈队列","slug":"双栈队列","link":"#双栈队列","children":[]},{"level":3,"title":"包含min函数的栈（单调栈）","slug":"包含min函数的栈-单调栈","link":"#包含min函数的栈-单调栈","children":[]},{"level":3,"title":"表达式计算问题","slug":"表达式计算问题","link":"#表达式计算问题","children":[]},{"level":3,"title":"字符串解码","slug":"字符串解码","link":"#字符串解码","children":[]},{"level":3,"title":"最长有效括号（栈）","slug":"最长有效括号-栈","link":"#最长有效括号-栈","children":[]}]},{"level":2,"title":"队列","slug":"队列","link":"#队列","children":[{"level":3,"title":"滑动窗口的最大值 (单调队列)","slug":"滑动窗口的最大值-单调队列","link":"#滑动窗口的最大值-单调队列","children":[]}]}],"git":{"createdTime":1705723098000,"updatedTime":1708182782000,"contributors":[{"name":"jisongyang","email":"jisongyang@kuaishou.com","commits":2}]},"readingTime":{"minutes":4.29,"words":1288},"filePathRelative":"posts/刷题/《刷题——栈》.md","localizedDate":"2023年1月1日","excerpt":"<h2> 栈</h2>\\n<h3> 双栈队列</h3>\\n<div class=\\"language-java line-numbers-mode\\" data-ext=\\"java\\"><pre class=\\"language-java\\"><code><span class=\\"token keyword\\">import</span> <span class=\\"token import\\"><span class=\\"token namespace\\">java<span class=\\"token punctuation\\">.</span>util<span class=\\"token punctuation\\">.</span></span><span class=\\"token class-name\\">Stack</span></span><span class=\\"token punctuation\\">;</span>\\n\\n<span class=\\"token keyword\\">public</span> <span class=\\"token keyword\\">class</span> <span class=\\"token class-name\\">Solution</span> <span class=\\"token punctuation\\">{</span>\\n    <span class=\\"token class-name\\">Stack</span><span class=\\"token generics\\"><span class=\\"token punctuation\\">&lt;</span><span class=\\"token class-name\\">Integer</span><span class=\\"token punctuation\\">&gt;</span></span> stack1 <span class=\\"token operator\\">=</span> <span class=\\"token keyword\\">new</span> <span class=\\"token class-name\\">Stack</span><span class=\\"token generics\\"><span class=\\"token punctuation\\">&lt;</span><span class=\\"token class-name\\">Integer</span><span class=\\"token punctuation\\">&gt;</span></span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span> <span class=\\"token comment\\">// 正常的栈</span>\\n    <span class=\\"token class-name\\">Stack</span><span class=\\"token generics\\"><span class=\\"token punctuation\\">&lt;</span><span class=\\"token class-name\\">Integer</span><span class=\\"token punctuation\\">&gt;</span></span> stack2 <span class=\\"token operator\\">=</span> <span class=\\"token keyword\\">new</span> <span class=\\"token class-name\\">Stack</span><span class=\\"token generics\\"><span class=\\"token punctuation\\">&lt;</span><span class=\\"token class-name\\">Integer</span><span class=\\"token punctuation\\">&gt;</span></span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span> <span class=\\"token comment\\">// FIFO的顺序</span>\\n    \\n    <span class=\\"token keyword\\">public</span> <span class=\\"token keyword\\">void</span> <span class=\\"token function\\">push</span><span class=\\"token punctuation\\">(</span><span class=\\"token keyword\\">int</span> node<span class=\\"token punctuation\\">)</span> <span class=\\"token punctuation\\">{</span>\\n        stack1<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">push</span><span class=\\"token punctuation\\">(</span>node<span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n    <span class=\\"token punctuation\\">}</span>\\n    \\n    <span class=\\"token keyword\\">public</span> <span class=\\"token keyword\\">int</span> <span class=\\"token function\\">pop</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span> <span class=\\"token punctuation\\">{</span>\\n        <span class=\\"token keyword\\">if</span><span class=\\"token punctuation\\">(</span>stack2<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">size</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span> <span class=\\"token operator\\">&gt;</span> <span class=\\"token number\\">0</span><span class=\\"token punctuation\\">)</span> <span class=\\"token keyword\\">return</span> stack2<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">pop</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n        <span class=\\"token comment\\">// 空的话，就一口气全将 “正常的栈” 弹出来</span>\\n        <span class=\\"token keyword\\">while</span><span class=\\"token punctuation\\">(</span><span class=\\"token operator\\">!</span>stack1<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">isEmpty</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">)</span> <span class=\\"token punctuation\\">{</span>\\n            stack2<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">push</span><span class=\\"token punctuation\\">(</span>stack1<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">pop</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n        <span class=\\"token punctuation\\">}</span>\\n        <span class=\\"token keyword\\">return</span> stack2<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">pop</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n    <span class=\\"token punctuation\\">}</span>\\n<span class=\\"token punctuation\\">}</span>\\n</code></pre><div class=\\"line-numbers\\" aria-hidden=\\"true\\"><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div></div></div>","autoDesc":true}');export{n as data};
