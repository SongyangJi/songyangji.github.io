const n=JSON.parse('{"key":"v-a40b4a1a","path":"/posts/CGLIB%E4%BB%A3%E7%90%86%E5%92%8CJDK%E4%BB%A3%E7%90%86.html","title":"CGLIB代理和JDK代理","lang":"zh-CN","frontmatter":{"title":"CGLIB代理和JDK代理","date":"2022-03-16T00:00:00.000Z","categories":["Java"],"tags":["Java语言基础"],"description":"CGLIB // CGLIB动态代理 // 1. 首先实现一个MethodInterceptor，方法调用会被转发到该类的intercept()方法。 class MyMethodInterceptor implements MethodInterceptor{ ... \\t@Override \\tpublic Object intercept(Object obj, Method method, Object[] args, MethodProxy proxy) throws Throwable { \\t\\tlogger.info(\\"You said: \\" + Arrays.toString(args)); \\t\\treturn proxy.invokeSuper(obj, args); \\t} } // 2. 然后在需要使用HelloConcrete的时候，通过CGLIB动态代理获取代理对象。 Enhancer enhancer = new Enhancer(); enhancer.setSuperclass(HelloConcrete.class); enhancer.setCallback(new MyMethodInterceptor()); HelloConcrete hello = (HelloConcrete)enhancer.create(); System.out.println(hello.sayHello(\\"I love you!\\"));","head":[["meta",{"property":"og:url","content":"https://mister-hope.github.io/posts/CGLIB%E4%BB%A3%E7%90%86%E5%92%8CJDK%E4%BB%A3%E7%90%86.html"}],["meta",{"property":"og:site_name","content":"常潇的技术站"}],["meta",{"property":"og:title","content":"CGLIB代理和JDK代理"}],["meta",{"property":"og:description","content":"CGLIB // CGLIB动态代理 // 1. 首先实现一个MethodInterceptor，方法调用会被转发到该类的intercept()方法。 class MyMethodInterceptor implements MethodInterceptor{ ... \\t@Override \\tpublic Object intercept(Object obj, Method method, Object[] args, MethodProxy proxy) throws Throwable { \\t\\tlogger.info(\\"You said: \\" + Arrays.toString(args)); \\t\\treturn proxy.invokeSuper(obj, args); \\t} } // 2. 然后在需要使用HelloConcrete的时候，通过CGLIB动态代理获取代理对象。 Enhancer enhancer = new Enhancer(); enhancer.setSuperclass(HelloConcrete.class); enhancer.setCallback(new MyMethodInterceptor()); HelloConcrete hello = (HelloConcrete)enhancer.create(); System.out.println(hello.sayHello(\\"I love you!\\"));"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-02-17T15:13:02.000Z"}],["meta",{"property":"article:author","content":"常潇-KeepCool"}],["meta",{"property":"article:tag","content":"Java语言基础"}],["meta",{"property":"article:published_time","content":"2022-03-16T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2024-02-17T15:13:02.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"CGLIB代理和JDK代理\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2022-03-16T00:00:00.000Z\\",\\"dateModified\\":\\"2024-02-17T15:13:02.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"常潇-KeepCool\\",\\"url\\":\\"https://mister-hope.com\\"}]}"]]},"headers":[{"level":2,"title":"CGLIB","slug":"cglib","link":"#cglib","children":[]},{"level":2,"title":"优缺点比较","slug":"优缺点比较","link":"#优缺点比较","children":[]}],"git":{"createdTime":1705581818000,"updatedTime":1708182782000,"contributors":[{"name":"jisongyang","email":"jisongyang@kuaishou.com","commits":2}]},"readingTime":{"minutes":1.48,"words":443},"filePathRelative":"posts/CGLIB代理和JDK代理.md","localizedDate":"2022年3月16日","excerpt":"<h2> CGLIB</h2>\\n<div class=\\"language-java line-numbers-mode\\" data-ext=\\"java\\"><pre class=\\"language-java\\"><code><span class=\\"token comment\\">// CGLIB动态代理</span>\\n<span class=\\"token comment\\">// 1. 首先实现一个MethodInterceptor，方法调用会被转发到该类的intercept()方法。</span>\\n<span class=\\"token keyword\\">class</span> <span class=\\"token class-name\\">MyMethodInterceptor</span> <span class=\\"token keyword\\">implements</span> <span class=\\"token class-name\\">MethodInterceptor</span><span class=\\"token punctuation\\">{</span>\\n  <span class=\\"token punctuation\\">.</span><span class=\\"token punctuation\\">.</span><span class=\\"token punctuation\\">.</span>\\n\\t<span class=\\"token annotation punctuation\\">@Override</span>\\n\\t<span class=\\"token keyword\\">public</span> <span class=\\"token class-name\\">Object</span> <span class=\\"token function\\">intercept</span><span class=\\"token punctuation\\">(</span><span class=\\"token class-name\\">Object</span> obj<span class=\\"token punctuation\\">,</span> <span class=\\"token class-name\\">Method</span> method<span class=\\"token punctuation\\">,</span> <span class=\\"token class-name\\">Object</span><span class=\\"token punctuation\\">[</span><span class=\\"token punctuation\\">]</span> args<span class=\\"token punctuation\\">,</span> <span class=\\"token class-name\\">MethodProxy</span> proxy<span class=\\"token punctuation\\">)</span> <span class=\\"token keyword\\">throws</span> <span class=\\"token class-name\\">Throwable</span> <span class=\\"token punctuation\\">{</span>\\n\\t\\tlogger<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">info</span><span class=\\"token punctuation\\">(</span><span class=\\"token string\\">\\"You said: \\"</span> <span class=\\"token operator\\">+</span> <span class=\\"token class-name\\">Arrays</span><span class=\\"token punctuation\\">.</span><span class=\\"token function\\">toString</span><span class=\\"token punctuation\\">(</span>args<span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n\\t\\t<span class=\\"token keyword\\">return</span> proxy<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">invokeSuper</span><span class=\\"token punctuation\\">(</span>obj<span class=\\"token punctuation\\">,</span> args<span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n\\t<span class=\\"token punctuation\\">}</span>\\n<span class=\\"token punctuation\\">}</span>\\n<span class=\\"token comment\\">// 2. 然后在需要使用HelloConcrete的时候，通过CGLIB动态代理获取代理对象。</span>\\n<span class=\\"token class-name\\">Enhancer</span> enhancer <span class=\\"token operator\\">=</span> <span class=\\"token keyword\\">new</span> <span class=\\"token class-name\\">Enhancer</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\nenhancer<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">setSuperclass</span><span class=\\"token punctuation\\">(</span><span class=\\"token class-name\\">HelloConcrete</span><span class=\\"token punctuation\\">.</span><span class=\\"token keyword\\">class</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\nenhancer<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">setCallback</span><span class=\\"token punctuation\\">(</span><span class=\\"token keyword\\">new</span> <span class=\\"token class-name\\">MyMethodInterceptor</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n\\n<span class=\\"token class-name\\">HelloConcrete</span> hello <span class=\\"token operator\\">=</span> <span class=\\"token punctuation\\">(</span><span class=\\"token class-name\\">HelloConcrete</span><span class=\\"token punctuation\\">)</span>enhancer<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">create</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n<span class=\\"token class-name\\">System</span><span class=\\"token punctuation\\">.</span>out<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">println</span><span class=\\"token punctuation\\">(</span>hello<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">sayHello</span><span class=\\"token punctuation\\">(</span><span class=\\"token string\\">\\"I love you!\\"</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n\\n</code></pre><div class=\\"line-numbers\\" aria-hidden=\\"true\\"><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div></div></div>","autoDesc":true}');export{n as data};
