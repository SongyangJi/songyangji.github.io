const n=JSON.parse(`{"key":"v-aa6c2b76","path":"/posts/%E7%AE%97%E6%B3%95/%E5%A4%A7%E6%95%B4%E6%95%B0%E5%8F%96%E6%A8%A1%E3%80%81%E6%9C%80%E5%A4%A7%E5%85%AC%E7%BA%A6%E6%95%B0%E4%B8%8E%E6%9C%80%E5%B0%8F%E5%85%AC%E5%80%8D%E6%95%B0%E3%80%81%E5%BF%AB%E9%80%9F%E5%B9%82%E4%B8%8E%E6%85%A2%E9%80%9F%E4%B9%98.html","title":"大整数取模、最大公约数与最小公倍数、快速幂与慢速乘、矩阵乘法加速","lang":"zh-CN","frontmatter":{"title":"大整数取模、最大公约数与最小公倍数、快速幂与慢速乘、矩阵乘法加速","date":"2021-11-11T00:00:00.000Z","categories":["算法"],"tags":["数学"],"description":"大整数取模 Description： 输入一个字符串 a 代表一个很大的数，一个32位整数b，问a能否整除b。 Large Division LightOJ - 1214 亲测 10ms。 #include&lt;stdio.h&gt; #include&lt;iostream&gt; #include&lt;cmath&gt; #include&lt;math.h&gt; #include&lt;string&gt; #include&lt;string.h&gt; #include&lt;algorithm&gt; #define ll long long using namespace std; //大整数取模 string a; int b; int main(){ int t; cin&gt;&gt;t; for(int i=1;i&lt;=t;i++){ cin&gt;&gt;a&gt;&gt;b; b = abs(b); ll sum=0; if(a[0]=='-') a.erase(a.begin()); for(int j=0;j&lt;a.length();j++){ sum = sum*10 + a[j]-'0'; sum%=b; } if(sum&gt;0) printf(\\"Case %d: not divisible\\\\n\\",i); else printf(\\"Case %d: divisible\\\\n\\",i); } return 0; }","head":[["meta",{"property":"og:url","content":"https://mister-hope.github.io/posts/%E7%AE%97%E6%B3%95/%E5%A4%A7%E6%95%B4%E6%95%B0%E5%8F%96%E6%A8%A1%E3%80%81%E6%9C%80%E5%A4%A7%E5%85%AC%E7%BA%A6%E6%95%B0%E4%B8%8E%E6%9C%80%E5%B0%8F%E5%85%AC%E5%80%8D%E6%95%B0%E3%80%81%E5%BF%AB%E9%80%9F%E5%B9%82%E4%B8%8E%E6%85%A2%E9%80%9F%E4%B9%98.html"}],["meta",{"property":"og:site_name","content":"常潇的技术站"}],["meta",{"property":"og:title","content":"大整数取模、最大公约数与最小公倍数、快速幂与慢速乘、矩阵乘法加速"}],["meta",{"property":"og:description","content":"大整数取模 Description： 输入一个字符串 a 代表一个很大的数，一个32位整数b，问a能否整除b。 Large Division LightOJ - 1214 亲测 10ms。 #include&lt;stdio.h&gt; #include&lt;iostream&gt; #include&lt;cmath&gt; #include&lt;math.h&gt; #include&lt;string&gt; #include&lt;string.h&gt; #include&lt;algorithm&gt; #define ll long long using namespace std; //大整数取模 string a; int b; int main(){ int t; cin&gt;&gt;t; for(int i=1;i&lt;=t;i++){ cin&gt;&gt;a&gt;&gt;b; b = abs(b); ll sum=0; if(a[0]=='-') a.erase(a.begin()); for(int j=0;j&lt;a.length();j++){ sum = sum*10 + a[j]-'0'; sum%=b; } if(sum&gt;0) printf(\\"Case %d: not divisible\\\\n\\",i); else printf(\\"Case %d: divisible\\\\n\\",i); } return 0; }"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-02-17T15:13:02.000Z"}],["meta",{"property":"article:author","content":"常潇-KeepCool"}],["meta",{"property":"article:tag","content":"数学"}],["meta",{"property":"article:published_time","content":"2021-11-11T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2024-02-17T15:13:02.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"大整数取模、最大公约数与最小公倍数、快速幂与慢速乘、矩阵乘法加速\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2021-11-11T00:00:00.000Z\\",\\"dateModified\\":\\"2024-02-17T15:13:02.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"常潇-KeepCool\\",\\"url\\":\\"https://mister-hope.com\\"}]}"]]},"headers":[{"level":2,"title":"大整数取模","slug":"大整数取模","link":"#大整数取模","children":[]},{"level":2,"title":"最大公约数与最小公倍数","slug":"最大公约数与最小公倍数","link":"#最大公约数与最小公倍数","children":[]},{"level":2,"title":"快速幂与慢速乘","slug":"快速幂与慢速乘","link":"#快速幂与慢速乘","children":[]},{"level":2,"title":"矩阵加速","slug":"矩阵加速","link":"#矩阵加速","children":[]}],"git":{"createdTime":1708182782000,"updatedTime":1708182782000,"contributors":[{"name":"jisongyang","email":"jisongyang@kuaishou.com","commits":1}]},"readingTime":{"minutes":3.36,"words":1009},"filePathRelative":"posts/算法/大整数取模、最大公约数与最小公倍数、快速幂与慢速乘.md","localizedDate":"2021年11月11日","excerpt":"<h2> 大整数取模</h2>\\n<p>Description：\\n输入一个字符串 a 代表一个很大的数，一个32位整数b，问a能否整除b。\\n<a href=\\"https://vjudge.net/problem/LightOJ-1214\\" target=\\"_blank\\" rel=\\"noopener noreferrer\\">Large Division LightOJ - 1214\\n</a>\\n亲测 10ms。</p>\\n<div class=\\"language-cpp line-numbers-mode\\" data-ext=\\"cpp\\"><pre class=\\"language-cpp\\"><code><span class=\\"token macro property\\"><span class=\\"token directive-hash\\">#</span><span class=\\"token directive keyword\\">include</span><span class=\\"token string\\">&lt;stdio.h&gt;</span></span>\\n<span class=\\"token macro property\\"><span class=\\"token directive-hash\\">#</span><span class=\\"token directive keyword\\">include</span><span class=\\"token string\\">&lt;iostream&gt;</span></span>\\n<span class=\\"token macro property\\"><span class=\\"token directive-hash\\">#</span><span class=\\"token directive keyword\\">include</span><span class=\\"token string\\">&lt;cmath&gt;</span></span>\\n<span class=\\"token macro property\\"><span class=\\"token directive-hash\\">#</span><span class=\\"token directive keyword\\">include</span><span class=\\"token string\\">&lt;math.h&gt;</span></span>\\n<span class=\\"token macro property\\"><span class=\\"token directive-hash\\">#</span><span class=\\"token directive keyword\\">include</span><span class=\\"token string\\">&lt;string&gt;</span></span>\\n<span class=\\"token macro property\\"><span class=\\"token directive-hash\\">#</span><span class=\\"token directive keyword\\">include</span><span class=\\"token string\\">&lt;string.h&gt;</span></span>\\n<span class=\\"token macro property\\"><span class=\\"token directive-hash\\">#</span><span class=\\"token directive keyword\\">include</span><span class=\\"token string\\">&lt;algorithm&gt;</span></span>\\n<span class=\\"token macro property\\"><span class=\\"token directive-hash\\">#</span><span class=\\"token directive keyword\\">define</span> <span class=\\"token macro-name\\">ll</span> <span class=\\"token expression\\"><span class=\\"token keyword\\">long</span> <span class=\\"token keyword\\">long</span></span></span>\\n<span class=\\"token keyword\\">using</span> <span class=\\"token keyword\\">namespace</span> std<span class=\\"token punctuation\\">;</span>\\n\\n<span class=\\"token comment\\">//大整数取模</span>\\n\\nstring a<span class=\\"token punctuation\\">;</span>\\n<span class=\\"token keyword\\">int</span> b<span class=\\"token punctuation\\">;</span>\\n<span class=\\"token keyword\\">int</span> <span class=\\"token function\\">main</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">{</span>\\n    <span class=\\"token keyword\\">int</span> t<span class=\\"token punctuation\\">;</span>\\n    cin<span class=\\"token operator\\">&gt;&gt;</span>t<span class=\\"token punctuation\\">;</span>\\n    <span class=\\"token keyword\\">for</span><span class=\\"token punctuation\\">(</span><span class=\\"token keyword\\">int</span> i<span class=\\"token operator\\">=</span><span class=\\"token number\\">1</span><span class=\\"token punctuation\\">;</span>i<span class=\\"token operator\\">&lt;=</span>t<span class=\\"token punctuation\\">;</span>i<span class=\\"token operator\\">++</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">{</span>\\n        cin<span class=\\"token operator\\">&gt;&gt;</span>a<span class=\\"token operator\\">&gt;&gt;</span>b<span class=\\"token punctuation\\">;</span>\\n        b <span class=\\"token operator\\">=</span> <span class=\\"token function\\">abs</span><span class=\\"token punctuation\\">(</span>b<span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n        ll sum<span class=\\"token operator\\">=</span><span class=\\"token number\\">0</span><span class=\\"token punctuation\\">;</span>\\n        <span class=\\"token keyword\\">if</span><span class=\\"token punctuation\\">(</span>a<span class=\\"token punctuation\\">[</span><span class=\\"token number\\">0</span><span class=\\"token punctuation\\">]</span><span class=\\"token operator\\">==</span><span class=\\"token char\\">'-'</span><span class=\\"token punctuation\\">)</span> a<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">erase</span><span class=\\"token punctuation\\">(</span>a<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">begin</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n        <span class=\\"token keyword\\">for</span><span class=\\"token punctuation\\">(</span><span class=\\"token keyword\\">int</span> j<span class=\\"token operator\\">=</span><span class=\\"token number\\">0</span><span class=\\"token punctuation\\">;</span>j<span class=\\"token operator\\">&lt;</span>a<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">length</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>j<span class=\\"token operator\\">++</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">{</span>\\n            sum <span class=\\"token operator\\">=</span> sum<span class=\\"token operator\\">*</span><span class=\\"token number\\">10</span> <span class=\\"token operator\\">+</span> a<span class=\\"token punctuation\\">[</span>j<span class=\\"token punctuation\\">]</span><span class=\\"token operator\\">-</span><span class=\\"token char\\">'0'</span><span class=\\"token punctuation\\">;</span>\\n            sum<span class=\\"token operator\\">%=</span>b<span class=\\"token punctuation\\">;</span>\\n        <span class=\\"token punctuation\\">}</span>\\n        <span class=\\"token keyword\\">if</span><span class=\\"token punctuation\\">(</span>sum<span class=\\"token operator\\">&gt;</span><span class=\\"token number\\">0</span><span class=\\"token punctuation\\">)</span> <span class=\\"token function\\">printf</span><span class=\\"token punctuation\\">(</span><span class=\\"token string\\">\\"Case %d: not divisible\\\\n\\"</span><span class=\\"token punctuation\\">,</span>i<span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n        <span class=\\"token keyword\\">else</span> <span class=\\"token function\\">printf</span><span class=\\"token punctuation\\">(</span><span class=\\"token string\\">\\"Case %d: divisible\\\\n\\"</span><span class=\\"token punctuation\\">,</span>i<span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n    <span class=\\"token punctuation\\">}</span>\\n    <span class=\\"token keyword\\">return</span> <span class=\\"token number\\">0</span><span class=\\"token punctuation\\">;</span>\\n<span class=\\"token punctuation\\">}</span>\\n</code></pre><div class=\\"line-numbers\\" aria-hidden=\\"true\\"><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div></div></div>","autoDesc":true}`);export{n as data};
