const n=JSON.parse(`{"key":"v-5091ca17","path":"/posts/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%20%E2%80%94%E2%80%94%20%E7%94%9F%E4%BA%A7%E8%80%85%E3%80%81%E6%B6%88%E8%B4%B9%E8%80%85%E6%A8%A1%E5%BC%8F.html","title":"设计模式 —— 生产者、消费者模式","lang":"zh-CN","frontmatter":{"title":"设计模式 —— 生产者、消费者模式","date":"2022-09-26T02:51:27.000Z","categories":["设计模式"],"tags":null,"description":"使用 Semaphore和循环数组 使用信号量限制对有限资源的访问 使用二进制信号量实现锁 import java.util.concurrent.Semaphore; import java.util.concurrent.TimeUnit; /** * @Author: Song yang Ji * @ProjectName: learn-multiThread * @Version 1.0 * @Description: */ class ProducerThread extends Thread { int rate; MultiProducerConsumer multiProducerConsumer; public ProducerThread(int rate, MultiProducerConsumer multiProducerConsumer) { this.multiProducerConsumer = multiProducerConsumer; this.rate = rate; } @Override public void run() { while (true) { try { multiProducerConsumer.produce(); } catch (InterruptedException e) { e.printStackTrace(); } try { TimeUnit.SECONDS.sleep(rate); } catch (InterruptedException e) { e.printStackTrace(); } } } } class ConsumerThread extends Thread { int rate; MultiProducerConsumer multiProducerConsumer; public ConsumerThread(int rate,MultiProducerConsumer multiProducerConsumer) { this.rate = rate; this.multiProducerConsumer = multiProducerConsumer; } @Override public void run() { while (true) { try { multiProducerConsumer.consume(); } catch (InterruptedException e) { e.printStackTrace(); } try { TimeUnit.SECONDS.sleep(rate); } catch (InterruptedException e) { e.printStackTrace(); } } } } public class MultiProducerConsumer { // 默认缓冲区的长度 static final int DEFAULT_BUFFER_SIZE = 8; int bufferSize; // 缓冲数组 char[] bufferArray; // 生产者放置产品的位置、消费者获取产品的位置 (如果是 AtomicInteger， 生产者（消费者）自身就不需要互斥了) int putPos, pollPos; // 生产者使用缓冲的信号量、消费者消费产品的信号量 Semaphore bufferSemaphore, availableSemaphore; // 使用二级制信号量实现生产者、消费者各自的互斥锁，（Lock 或者其他锁形式也都是可以的） Semaphore producerMutex, consumerMutex; public MultiProducerConsumer() { this(DEFAULT_BUFFER_SIZE); } public MultiProducerConsumer(int bufferSize) { this.bufferSize = bufferSize; bufferArray = new char[bufferSize]; bufferSemaphore = new Semaphore(DEFAULT_BUFFER_SIZE); availableSemaphore = new Semaphore(0); producerMutex = new Semaphore(1); consumerMutex = new Semaphore(1); } // 生产者生产产品 void produce() throws InterruptedException { // 若缓冲区已满，则阻塞 bufferSemaphore.acquire(); int pos; // 原子地获取下一个放置的位置 producerMutex.acquire(); pos = putPos; putPos = (putPos + 1) % bufferSize; // 循环下移 // 唤醒另一个因互斥而阻塞的生产者 producerMutex.release(); // 执行生产操作 (可能耗时很大) char c = (char) ((int) 'A' + pos); bufferArray[pos] = c; System.out.printf(\\"生产者 %s 放置产品 %c 到 buffer[%d]\\\\n\\", Thread.currentThread().getName(), c, pos); // 唤醒可能的消费者消费 availableSemaphore.release(); } void consume() throws InterruptedException { // 若缓冲区暂无产品消费，则阻塞 availableSemaphore.acquire(); int pos; // 原子地获取下一个消费的位置 consumerMutex.acquire(); pos = pollPos; pollPos = (pollPos + 1) % bufferSize; // 循环下移 // 唤醒另一个因互斥而阻塞的消费者 consumerMutex.release(); // 执行消费操作 (可能耗时很大) char c = bufferArray[pos]; System.out.printf(\\"消费者 %s 在 buffer[%d] 消费产品 %c\\\\n\\", Thread.currentThread().getName(), pos, c); // 唤醒可能的生产者继续生产 bufferSemaphore.release(); } public static void main(String[] args) throws InterruptedException { MultiProducerConsumer multiProducerConsumer = new MultiProducerConsumer(); for (int i = 1; i &lt;= 3; i++) { new ProducerThread(i,multiProducerConsumer).start(); } TimeUnit.SECONDS.sleep(1); for (int i = 1; i &lt;= 3; i++) { new ConsumerThread(i,multiProducerConsumer).start(); } } }","head":[["meta",{"property":"og:url","content":"https://mister-hope.github.io/posts/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%20%E2%80%94%E2%80%94%20%E7%94%9F%E4%BA%A7%E8%80%85%E3%80%81%E6%B6%88%E8%B4%B9%E8%80%85%E6%A8%A1%E5%BC%8F.html"}],["meta",{"property":"og:site_name","content":"常潇的技术站"}],["meta",{"property":"og:title","content":"设计模式 —— 生产者、消费者模式"}],["meta",{"property":"og:description","content":"使用 Semaphore和循环数组 使用信号量限制对有限资源的访问 使用二进制信号量实现锁 import java.util.concurrent.Semaphore; import java.util.concurrent.TimeUnit; /** * @Author: Song yang Ji * @ProjectName: learn-multiThread * @Version 1.0 * @Description: */ class ProducerThread extends Thread { int rate; MultiProducerConsumer multiProducerConsumer; public ProducerThread(int rate, MultiProducerConsumer multiProducerConsumer) { this.multiProducerConsumer = multiProducerConsumer; this.rate = rate; } @Override public void run() { while (true) { try { multiProducerConsumer.produce(); } catch (InterruptedException e) { e.printStackTrace(); } try { TimeUnit.SECONDS.sleep(rate); } catch (InterruptedException e) { e.printStackTrace(); } } } } class ConsumerThread extends Thread { int rate; MultiProducerConsumer multiProducerConsumer; public ConsumerThread(int rate,MultiProducerConsumer multiProducerConsumer) { this.rate = rate; this.multiProducerConsumer = multiProducerConsumer; } @Override public void run() { while (true) { try { multiProducerConsumer.consume(); } catch (InterruptedException e) { e.printStackTrace(); } try { TimeUnit.SECONDS.sleep(rate); } catch (InterruptedException e) { e.printStackTrace(); } } } } public class MultiProducerConsumer { // 默认缓冲区的长度 static final int DEFAULT_BUFFER_SIZE = 8; int bufferSize; // 缓冲数组 char[] bufferArray; // 生产者放置产品的位置、消费者获取产品的位置 (如果是 AtomicInteger， 生产者（消费者）自身就不需要互斥了) int putPos, pollPos; // 生产者使用缓冲的信号量、消费者消费产品的信号量 Semaphore bufferSemaphore, availableSemaphore; // 使用二级制信号量实现生产者、消费者各自的互斥锁，（Lock 或者其他锁形式也都是可以的） Semaphore producerMutex, consumerMutex; public MultiProducerConsumer() { this(DEFAULT_BUFFER_SIZE); } public MultiProducerConsumer(int bufferSize) { this.bufferSize = bufferSize; bufferArray = new char[bufferSize]; bufferSemaphore = new Semaphore(DEFAULT_BUFFER_SIZE); availableSemaphore = new Semaphore(0); producerMutex = new Semaphore(1); consumerMutex = new Semaphore(1); } // 生产者生产产品 void produce() throws InterruptedException { // 若缓冲区已满，则阻塞 bufferSemaphore.acquire(); int pos; // 原子地获取下一个放置的位置 producerMutex.acquire(); pos = putPos; putPos = (putPos + 1) % bufferSize; // 循环下移 // 唤醒另一个因互斥而阻塞的生产者 producerMutex.release(); // 执行生产操作 (可能耗时很大) char c = (char) ((int) 'A' + pos); bufferArray[pos] = c; System.out.printf(\\"生产者 %s 放置产品 %c 到 buffer[%d]\\\\n\\", Thread.currentThread().getName(), c, pos); // 唤醒可能的消费者消费 availableSemaphore.release(); } void consume() throws InterruptedException { // 若缓冲区暂无产品消费，则阻塞 availableSemaphore.acquire(); int pos; // 原子地获取下一个消费的位置 consumerMutex.acquire(); pos = pollPos; pollPos = (pollPos + 1) % bufferSize; // 循环下移 // 唤醒另一个因互斥而阻塞的消费者 consumerMutex.release(); // 执行消费操作 (可能耗时很大) char c = bufferArray[pos]; System.out.printf(\\"消费者 %s 在 buffer[%d] 消费产品 %c\\\\n\\", Thread.currentThread().getName(), pos, c); // 唤醒可能的生产者继续生产 bufferSemaphore.release(); } public static void main(String[] args) throws InterruptedException { MultiProducerConsumer multiProducerConsumer = new MultiProducerConsumer(); for (int i = 1; i &lt;= 3; i++) { new ProducerThread(i,multiProducerConsumer).start(); } TimeUnit.SECONDS.sleep(1); for (int i = 1; i &lt;= 3; i++) { new ConsumerThread(i,multiProducerConsumer).start(); } } }"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-02-17T15:13:02.000Z"}],["meta",{"property":"article:author","content":"常潇-KeepCool"}],["meta",{"property":"article:published_time","content":"2022-09-26T02:51:27.000Z"}],["meta",{"property":"article:modified_time","content":"2024-02-17T15:13:02.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"设计模式 —— 生产者、消费者模式\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2022-09-26T02:51:27.000Z\\",\\"dateModified\\":\\"2024-02-17T15:13:02.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"常潇-KeepCool\\",\\"url\\":\\"https://mister-hope.com\\"}]}"]]},"headers":[],"git":{"createdTime":1708182782000,"updatedTime":1708182782000,"contributors":[{"name":"jisongyang","email":"jisongyang@kuaishou.com","commits":1}]},"readingTime":{"minutes":2.37,"words":710},"filePathRelative":"posts/设计模式/设计模式 —— 生产者、消费者模式.md","localizedDate":"2022年9月26日","excerpt":"<h1> 使用 Semaphore和循环数组</h1>\\n<ul>\\n<li><strong>使用信号量限制对有限资源的访问</strong></li>\\n<li><strong>使用二进制信号量实现锁</strong></li>\\n</ul>\\n<div class=\\"language-java line-numbers-mode\\" data-ext=\\"java\\"><pre class=\\"language-java\\"><code><span class=\\"token keyword\\">import</span> <span class=\\"token import\\"><span class=\\"token namespace\\">java<span class=\\"token punctuation\\">.</span>util<span class=\\"token punctuation\\">.</span>concurrent<span class=\\"token punctuation\\">.</span></span><span class=\\"token class-name\\">Semaphore</span></span><span class=\\"token punctuation\\">;</span>\\n<span class=\\"token keyword\\">import</span> <span class=\\"token import\\"><span class=\\"token namespace\\">java<span class=\\"token punctuation\\">.</span>util<span class=\\"token punctuation\\">.</span>concurrent<span class=\\"token punctuation\\">.</span></span><span class=\\"token class-name\\">TimeUnit</span></span><span class=\\"token punctuation\\">;</span>\\n\\n<span class=\\"token doc-comment comment\\">/**\\n * @Author: Song yang Ji\\n * @ProjectName: learn-multiThread\\n * @Version 1.0\\n * @Description:\\n */</span>\\n\\n<span class=\\"token keyword\\">class</span> <span class=\\"token class-name\\">ProducerThread</span> <span class=\\"token keyword\\">extends</span> <span class=\\"token class-name\\">Thread</span> <span class=\\"token punctuation\\">{</span>\\n    <span class=\\"token keyword\\">int</span> rate<span class=\\"token punctuation\\">;</span>\\n    <span class=\\"token class-name\\">MultiProducerConsumer</span> multiProducerConsumer<span class=\\"token punctuation\\">;</span>\\n    <span class=\\"token keyword\\">public</span> <span class=\\"token class-name\\">ProducerThread</span><span class=\\"token punctuation\\">(</span><span class=\\"token keyword\\">int</span> rate<span class=\\"token punctuation\\">,</span> <span class=\\"token class-name\\">MultiProducerConsumer</span> multiProducerConsumer<span class=\\"token punctuation\\">)</span> <span class=\\"token punctuation\\">{</span>\\n        <span class=\\"token keyword\\">this</span><span class=\\"token punctuation\\">.</span>multiProducerConsumer <span class=\\"token operator\\">=</span> multiProducerConsumer<span class=\\"token punctuation\\">;</span>\\n        <span class=\\"token keyword\\">this</span><span class=\\"token punctuation\\">.</span>rate <span class=\\"token operator\\">=</span> rate<span class=\\"token punctuation\\">;</span>\\n    <span class=\\"token punctuation\\">}</span>\\n\\n    <span class=\\"token annotation punctuation\\">@Override</span>\\n    <span class=\\"token keyword\\">public</span> <span class=\\"token keyword\\">void</span> <span class=\\"token function\\">run</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span> <span class=\\"token punctuation\\">{</span>\\n        <span class=\\"token keyword\\">while</span> <span class=\\"token punctuation\\">(</span><span class=\\"token boolean\\">true</span><span class=\\"token punctuation\\">)</span> <span class=\\"token punctuation\\">{</span>\\n            <span class=\\"token keyword\\">try</span> <span class=\\"token punctuation\\">{</span>\\n                multiProducerConsumer<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">produce</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n            <span class=\\"token punctuation\\">}</span> <span class=\\"token keyword\\">catch</span> <span class=\\"token punctuation\\">(</span><span class=\\"token class-name\\">InterruptedException</span> e<span class=\\"token punctuation\\">)</span> <span class=\\"token punctuation\\">{</span>\\n                e<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">printStackTrace</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n            <span class=\\"token punctuation\\">}</span>\\n            <span class=\\"token keyword\\">try</span> <span class=\\"token punctuation\\">{</span>\\n                <span class=\\"token class-name\\">TimeUnit</span><span class=\\"token punctuation\\">.</span><span class=\\"token constant\\">SECONDS</span><span class=\\"token punctuation\\">.</span><span class=\\"token function\\">sleep</span><span class=\\"token punctuation\\">(</span>rate<span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n            <span class=\\"token punctuation\\">}</span> <span class=\\"token keyword\\">catch</span> <span class=\\"token punctuation\\">(</span><span class=\\"token class-name\\">InterruptedException</span> e<span class=\\"token punctuation\\">)</span> <span class=\\"token punctuation\\">{</span>\\n                e<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">printStackTrace</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n            <span class=\\"token punctuation\\">}</span>\\n        <span class=\\"token punctuation\\">}</span>\\n    <span class=\\"token punctuation\\">}</span>\\n<span class=\\"token punctuation\\">}</span>\\n\\n<span class=\\"token keyword\\">class</span> <span class=\\"token class-name\\">ConsumerThread</span> <span class=\\"token keyword\\">extends</span> <span class=\\"token class-name\\">Thread</span> <span class=\\"token punctuation\\">{</span>\\n    <span class=\\"token keyword\\">int</span> rate<span class=\\"token punctuation\\">;</span>\\n    <span class=\\"token class-name\\">MultiProducerConsumer</span> multiProducerConsumer<span class=\\"token punctuation\\">;</span>\\n\\n    <span class=\\"token keyword\\">public</span> <span class=\\"token class-name\\">ConsumerThread</span><span class=\\"token punctuation\\">(</span><span class=\\"token keyword\\">int</span> rate<span class=\\"token punctuation\\">,</span><span class=\\"token class-name\\">MultiProducerConsumer</span> multiProducerConsumer<span class=\\"token punctuation\\">)</span> <span class=\\"token punctuation\\">{</span>\\n        <span class=\\"token keyword\\">this</span><span class=\\"token punctuation\\">.</span>rate <span class=\\"token operator\\">=</span> rate<span class=\\"token punctuation\\">;</span>\\n        <span class=\\"token keyword\\">this</span><span class=\\"token punctuation\\">.</span>multiProducerConsumer <span class=\\"token operator\\">=</span> multiProducerConsumer<span class=\\"token punctuation\\">;</span>\\n    <span class=\\"token punctuation\\">}</span>\\n\\n\\n    <span class=\\"token annotation punctuation\\">@Override</span>\\n    <span class=\\"token keyword\\">public</span> <span class=\\"token keyword\\">void</span> <span class=\\"token function\\">run</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span> <span class=\\"token punctuation\\">{</span>\\n        <span class=\\"token keyword\\">while</span> <span class=\\"token punctuation\\">(</span><span class=\\"token boolean\\">true</span><span class=\\"token punctuation\\">)</span> <span class=\\"token punctuation\\">{</span>\\n            <span class=\\"token keyword\\">try</span> <span class=\\"token punctuation\\">{</span>\\n                multiProducerConsumer<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">consume</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n            <span class=\\"token punctuation\\">}</span> <span class=\\"token keyword\\">catch</span> <span class=\\"token punctuation\\">(</span><span class=\\"token class-name\\">InterruptedException</span> e<span class=\\"token punctuation\\">)</span> <span class=\\"token punctuation\\">{</span>\\n                e<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">printStackTrace</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n            <span class=\\"token punctuation\\">}</span>\\n            <span class=\\"token keyword\\">try</span> <span class=\\"token punctuation\\">{</span>\\n                <span class=\\"token class-name\\">TimeUnit</span><span class=\\"token punctuation\\">.</span><span class=\\"token constant\\">SECONDS</span><span class=\\"token punctuation\\">.</span><span class=\\"token function\\">sleep</span><span class=\\"token punctuation\\">(</span>rate<span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n            <span class=\\"token punctuation\\">}</span> <span class=\\"token keyword\\">catch</span> <span class=\\"token punctuation\\">(</span><span class=\\"token class-name\\">InterruptedException</span> e<span class=\\"token punctuation\\">)</span> <span class=\\"token punctuation\\">{</span>\\n                e<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">printStackTrace</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n            <span class=\\"token punctuation\\">}</span>\\n        <span class=\\"token punctuation\\">}</span>\\n    <span class=\\"token punctuation\\">}</span>\\n<span class=\\"token punctuation\\">}</span>\\n\\n<span class=\\"token keyword\\">public</span> <span class=\\"token keyword\\">class</span> <span class=\\"token class-name\\">MultiProducerConsumer</span> <span class=\\"token punctuation\\">{</span>\\n\\n    <span class=\\"token comment\\">// 默认缓冲区的长度</span>\\n    <span class=\\"token keyword\\">static</span> <span class=\\"token keyword\\">final</span> <span class=\\"token keyword\\">int</span> <span class=\\"token constant\\">DEFAULT_BUFFER_SIZE</span> <span class=\\"token operator\\">=</span> <span class=\\"token number\\">8</span><span class=\\"token punctuation\\">;</span>\\n\\n    <span class=\\"token keyword\\">int</span> bufferSize<span class=\\"token punctuation\\">;</span>\\n\\n    <span class=\\"token comment\\">// 缓冲数组</span>\\n    <span class=\\"token keyword\\">char</span><span class=\\"token punctuation\\">[</span><span class=\\"token punctuation\\">]</span> bufferArray<span class=\\"token punctuation\\">;</span>\\n\\n    <span class=\\"token comment\\">// 生产者放置产品的位置、消费者获取产品的位置 (如果是 AtomicInteger， 生产者（消费者）自身就不需要互斥了)</span>\\n    <span class=\\"token keyword\\">int</span> putPos<span class=\\"token punctuation\\">,</span> pollPos<span class=\\"token punctuation\\">;</span>\\n\\n    <span class=\\"token comment\\">// 生产者使用缓冲的信号量、消费者消费产品的信号量</span>\\n    <span class=\\"token class-name\\">Semaphore</span> bufferSemaphore<span class=\\"token punctuation\\">,</span> availableSemaphore<span class=\\"token punctuation\\">;</span>\\n\\n    <span class=\\"token comment\\">// 使用二级制信号量实现生产者、消费者各自的互斥锁，（Lock 或者其他锁形式也都是可以的）</span>\\n    <span class=\\"token class-name\\">Semaphore</span> producerMutex<span class=\\"token punctuation\\">,</span> consumerMutex<span class=\\"token punctuation\\">;</span>\\n\\n\\n    <span class=\\"token keyword\\">public</span> <span class=\\"token class-name\\">MultiProducerConsumer</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span> <span class=\\"token punctuation\\">{</span>\\n        <span class=\\"token keyword\\">this</span><span class=\\"token punctuation\\">(</span><span class=\\"token constant\\">DEFAULT_BUFFER_SIZE</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n    <span class=\\"token punctuation\\">}</span>\\n\\n    <span class=\\"token keyword\\">public</span> <span class=\\"token class-name\\">MultiProducerConsumer</span><span class=\\"token punctuation\\">(</span><span class=\\"token keyword\\">int</span> bufferSize<span class=\\"token punctuation\\">)</span> <span class=\\"token punctuation\\">{</span>\\n        <span class=\\"token keyword\\">this</span><span class=\\"token punctuation\\">.</span>bufferSize <span class=\\"token operator\\">=</span> bufferSize<span class=\\"token punctuation\\">;</span>\\n\\n        bufferArray <span class=\\"token operator\\">=</span> <span class=\\"token keyword\\">new</span> <span class=\\"token keyword\\">char</span><span class=\\"token punctuation\\">[</span>bufferSize<span class=\\"token punctuation\\">]</span><span class=\\"token punctuation\\">;</span>\\n\\n        bufferSemaphore <span class=\\"token operator\\">=</span> <span class=\\"token keyword\\">new</span> <span class=\\"token class-name\\">Semaphore</span><span class=\\"token punctuation\\">(</span><span class=\\"token constant\\">DEFAULT_BUFFER_SIZE</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n        availableSemaphore <span class=\\"token operator\\">=</span> <span class=\\"token keyword\\">new</span> <span class=\\"token class-name\\">Semaphore</span><span class=\\"token punctuation\\">(</span><span class=\\"token number\\">0</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n\\n        producerMutex <span class=\\"token operator\\">=</span> <span class=\\"token keyword\\">new</span> <span class=\\"token class-name\\">Semaphore</span><span class=\\"token punctuation\\">(</span><span class=\\"token number\\">1</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n        consumerMutex <span class=\\"token operator\\">=</span> <span class=\\"token keyword\\">new</span> <span class=\\"token class-name\\">Semaphore</span><span class=\\"token punctuation\\">(</span><span class=\\"token number\\">1</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n\\n    <span class=\\"token punctuation\\">}</span>\\n\\n\\n    <span class=\\"token comment\\">// 生产者生产产品</span>\\n    <span class=\\"token keyword\\">void</span> <span class=\\"token function\\">produce</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span> <span class=\\"token keyword\\">throws</span> <span class=\\"token class-name\\">InterruptedException</span> <span class=\\"token punctuation\\">{</span>\\n        <span class=\\"token comment\\">// 若缓冲区已满，则阻塞</span>\\n        bufferSemaphore<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">acquire</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n\\n        <span class=\\"token keyword\\">int</span> pos<span class=\\"token punctuation\\">;</span>\\n        <span class=\\"token comment\\">// 原子地获取下一个放置的位置</span>\\n        producerMutex<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">acquire</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n        pos <span class=\\"token operator\\">=</span> putPos<span class=\\"token punctuation\\">;</span>\\n        putPos <span class=\\"token operator\\">=</span> <span class=\\"token punctuation\\">(</span>putPos <span class=\\"token operator\\">+</span> <span class=\\"token number\\">1</span><span class=\\"token punctuation\\">)</span> <span class=\\"token operator\\">%</span> bufferSize<span class=\\"token punctuation\\">;</span> <span class=\\"token comment\\">// 循环下移</span>\\n        <span class=\\"token comment\\">// 唤醒另一个因互斥而阻塞的生产者</span>\\n        producerMutex<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">release</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n\\n        <span class=\\"token comment\\">// 执行生产操作 (可能耗时很大)</span>\\n        <span class=\\"token keyword\\">char</span> c <span class=\\"token operator\\">=</span> <span class=\\"token punctuation\\">(</span><span class=\\"token keyword\\">char</span><span class=\\"token punctuation\\">)</span> <span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">(</span><span class=\\"token keyword\\">int</span><span class=\\"token punctuation\\">)</span> <span class=\\"token char\\">'A'</span> <span class=\\"token operator\\">+</span> pos<span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n        bufferArray<span class=\\"token punctuation\\">[</span>pos<span class=\\"token punctuation\\">]</span> <span class=\\"token operator\\">=</span> c<span class=\\"token punctuation\\">;</span>\\n        <span class=\\"token class-name\\">System</span><span class=\\"token punctuation\\">.</span>out<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">printf</span><span class=\\"token punctuation\\">(</span><span class=\\"token string\\">\\"生产者 %s 放置产品 %c 到 buffer[%d]\\\\n\\"</span><span class=\\"token punctuation\\">,</span> <span class=\\"token class-name\\">Thread</span><span class=\\"token punctuation\\">.</span><span class=\\"token function\\">currentThread</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">.</span><span class=\\"token function\\">getName</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">,</span> c<span class=\\"token punctuation\\">,</span> pos<span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n\\n        <span class=\\"token comment\\">// 唤醒可能的消费者消费</span>\\n        availableSemaphore<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">release</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n    <span class=\\"token punctuation\\">}</span>\\n\\n    <span class=\\"token keyword\\">void</span> <span class=\\"token function\\">consume</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span> <span class=\\"token keyword\\">throws</span> <span class=\\"token class-name\\">InterruptedException</span> <span class=\\"token punctuation\\">{</span>\\n        <span class=\\"token comment\\">// 若缓冲区暂无产品消费，则阻塞</span>\\n        availableSemaphore<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">acquire</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n\\n        <span class=\\"token keyword\\">int</span> pos<span class=\\"token punctuation\\">;</span>\\n        <span class=\\"token comment\\">// 原子地获取下一个消费的位置</span>\\n        consumerMutex<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">acquire</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n        pos <span class=\\"token operator\\">=</span> pollPos<span class=\\"token punctuation\\">;</span>\\n        pollPos <span class=\\"token operator\\">=</span> <span class=\\"token punctuation\\">(</span>pollPos <span class=\\"token operator\\">+</span> <span class=\\"token number\\">1</span><span class=\\"token punctuation\\">)</span> <span class=\\"token operator\\">%</span> bufferSize<span class=\\"token punctuation\\">;</span> <span class=\\"token comment\\">// 循环下移</span>\\n        <span class=\\"token comment\\">// 唤醒另一个因互斥而阻塞的消费者</span>\\n        consumerMutex<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">release</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n\\n        <span class=\\"token comment\\">// 执行消费操作 (可能耗时很大)</span>\\n        <span class=\\"token keyword\\">char</span> c <span class=\\"token operator\\">=</span> bufferArray<span class=\\"token punctuation\\">[</span>pos<span class=\\"token punctuation\\">]</span><span class=\\"token punctuation\\">;</span>\\n        <span class=\\"token class-name\\">System</span><span class=\\"token punctuation\\">.</span>out<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">printf</span><span class=\\"token punctuation\\">(</span><span class=\\"token string\\">\\"消费者 %s 在 buffer[%d] 消费产品 %c\\\\n\\"</span><span class=\\"token punctuation\\">,</span> <span class=\\"token class-name\\">Thread</span><span class=\\"token punctuation\\">.</span><span class=\\"token function\\">currentThread</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">.</span><span class=\\"token function\\">getName</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">,</span> pos<span class=\\"token punctuation\\">,</span> c<span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n\\n        <span class=\\"token comment\\">// 唤醒可能的生产者继续生产</span>\\n        bufferSemaphore<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">release</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n    <span class=\\"token punctuation\\">}</span>\\n\\n\\n\\n\\n\\n    <span class=\\"token keyword\\">public</span> <span class=\\"token keyword\\">static</span> <span class=\\"token keyword\\">void</span> <span class=\\"token function\\">main</span><span class=\\"token punctuation\\">(</span><span class=\\"token class-name\\">String</span><span class=\\"token punctuation\\">[</span><span class=\\"token punctuation\\">]</span> args<span class=\\"token punctuation\\">)</span> <span class=\\"token keyword\\">throws</span> <span class=\\"token class-name\\">InterruptedException</span> <span class=\\"token punctuation\\">{</span>\\n        <span class=\\"token class-name\\">MultiProducerConsumer</span> multiProducerConsumer <span class=\\"token operator\\">=</span> <span class=\\"token keyword\\">new</span> <span class=\\"token class-name\\">MultiProducerConsumer</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n        <span class=\\"token keyword\\">for</span> <span class=\\"token punctuation\\">(</span><span class=\\"token keyword\\">int</span> i <span class=\\"token operator\\">=</span> <span class=\\"token number\\">1</span><span class=\\"token punctuation\\">;</span> i <span class=\\"token operator\\">&lt;=</span> <span class=\\"token number\\">3</span><span class=\\"token punctuation\\">;</span> i<span class=\\"token operator\\">++</span><span class=\\"token punctuation\\">)</span> <span class=\\"token punctuation\\">{</span>\\n            <span class=\\"token keyword\\">new</span> <span class=\\"token class-name\\">ProducerThread</span><span class=\\"token punctuation\\">(</span>i<span class=\\"token punctuation\\">,</span>multiProducerConsumer<span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">.</span><span class=\\"token function\\">start</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n        <span class=\\"token punctuation\\">}</span>\\n        <span class=\\"token class-name\\">TimeUnit</span><span class=\\"token punctuation\\">.</span><span class=\\"token constant\\">SECONDS</span><span class=\\"token punctuation\\">.</span><span class=\\"token function\\">sleep</span><span class=\\"token punctuation\\">(</span><span class=\\"token number\\">1</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n        <span class=\\"token keyword\\">for</span> <span class=\\"token punctuation\\">(</span><span class=\\"token keyword\\">int</span> i <span class=\\"token operator\\">=</span> <span class=\\"token number\\">1</span><span class=\\"token punctuation\\">;</span> i <span class=\\"token operator\\">&lt;=</span> <span class=\\"token number\\">3</span><span class=\\"token punctuation\\">;</span> i<span class=\\"token operator\\">++</span><span class=\\"token punctuation\\">)</span> <span class=\\"token punctuation\\">{</span>\\n            <span class=\\"token keyword\\">new</span> <span class=\\"token class-name\\">ConsumerThread</span><span class=\\"token punctuation\\">(</span>i<span class=\\"token punctuation\\">,</span>multiProducerConsumer<span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">.</span><span class=\\"token function\\">start</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n        <span class=\\"token punctuation\\">}</span>\\n\\n    <span class=\\"token punctuation\\">}</span>\\n<span class=\\"token punctuation\\">}</span>\\n\\n</code></pre><div class=\\"line-numbers\\" aria-hidden=\\"true\\"><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div></div></div>","autoDesc":true}`);export{n as data};
