const e=JSON.parse('{"key":"v-54eff533","path":"/posts/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%20%E2%80%94%E2%80%94%20%E8%A3%85%E9%A5%B0%E8%80%85%E6%A8%A1%E5%BC%8F.html","title":"设计模式 —— 装饰者模式","lang":"zh-CN","frontmatter":{"title":"设计模式 —— 装饰者模式","date":"2022-03-27T21:29:37.000Z","categories":["设计模式"],"tags":["设计模式","装饰者模式"],"description":"1.1 什么是装饰者模式 装饰者模式指的是在不必改变原类文件和使用继承的情况下，动态地扩展一个对象的功能。 它是通过创建一个包装对象，也就是装饰者来包裹真实的对象。 所以装饰者可以动态地将责任附加到对象上。若要扩展功能，装饰者提供了比继承更有弹性的方案。 装饰者模式，就是在原有的基类的基础上，给对象添加一些额外的职能，对对象进行包装和修饰，以此来展示出一个更为复杂的、功能更为齐全的新对象。装饰者模式跟子类继承的方式非常类似，都是在基类的基础上拓展功能，但是比基类更加的灵活，也符合多组合、少继承的设计原则，避免对象之间的耦合。","head":[["meta",{"property":"og:url","content":"https://mister-hope.github.io/posts/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%20%E2%80%94%E2%80%94%20%E8%A3%85%E9%A5%B0%E8%80%85%E6%A8%A1%E5%BC%8F.html"}],["meta",{"property":"og:site_name","content":"常潇的技术站"}],["meta",{"property":"og:title","content":"设计模式 —— 装饰者模式"}],["meta",{"property":"og:description","content":"1.1 什么是装饰者模式 装饰者模式指的是在不必改变原类文件和使用继承的情况下，动态地扩展一个对象的功能。 它是通过创建一个包装对象，也就是装饰者来包裹真实的对象。 所以装饰者可以动态地将责任附加到对象上。若要扩展功能，装饰者提供了比继承更有弹性的方案。 装饰者模式，就是在原有的基类的基础上，给对象添加一些额外的职能，对对象进行包装和修饰，以此来展示出一个更为复杂的、功能更为齐全的新对象。装饰者模式跟子类继承的方式非常类似，都是在基类的基础上拓展功能，但是比基类更加的灵活，也符合多组合、少继承的设计原则，避免对象之间的耦合。"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-02-17T15:13:02.000Z"}],["meta",{"property":"article:author","content":"常潇-KeepCool"}],["meta",{"property":"article:tag","content":"设计模式"}],["meta",{"property":"article:tag","content":"装饰者模式"}],["meta",{"property":"article:published_time","content":"2022-03-27T21:29:37.000Z"}],["meta",{"property":"article:modified_time","content":"2024-02-17T15:13:02.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"设计模式 —— 装饰者模式\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2022-03-27T21:29:37.000Z\\",\\"dateModified\\":\\"2024-02-17T15:13:02.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"常潇-KeepCool\\",\\"url\\":\\"https://mister-hope.com\\"}]}"]]},"headers":[{"level":2,"title":"1.1 什么是装饰者模式","slug":"_1-1-什么是装饰者模式","link":"#_1-1-什么是装饰者模式","children":[]},{"level":2,"title":"1.2 装饰者模式组成结构","slug":"_1-2-装饰者模式组成结构","link":"#_1-2-装饰者模式组成结构","children":[]},{"level":2,"title":"1.3 装饰者模式 UML 图解","slug":"_1-3-装饰者模式-uml-图解","link":"#_1-3-装饰者模式-uml-图解","children":[]},{"level":2,"title":"1.4 装饰者模式应用场景","slug":"_1-4-装饰者模式应用场景","link":"#_1-4-装饰者模式应用场景","children":[]},{"level":2,"title":"1.5 装饰者模式特点","slug":"_1-5-装饰者模式特点","link":"#_1-5-装饰者模式特点","children":[]},{"level":2,"title":"1.6 装饰者模式的优缺点","slug":"_1-6-装饰者模式的优缺点","link":"#_1-6-装饰者模式的优缺点","children":[]},{"level":2,"title":"装饰器和代理模式的区别","slug":"装饰器和代理模式的区别","link":"#装饰器和代理模式的区别","children":[]}],"git":{"createdTime":1708182782000,"updatedTime":1708182782000,"contributors":[{"name":"jisongyang","email":"jisongyang@kuaishou.com","commits":1}]},"readingTime":{"minutes":6.22,"words":1867},"filePathRelative":"posts/设计模式/设计模式 —— 装饰者模式.md","localizedDate":"2022年3月28日","excerpt":"<h2> 1.1 什么是装饰者模式</h2>\\n<p><strong>装饰者模式指的是在不必改变原类文件和使用继承的情况下，动态地扩展一个对象的功能</strong>。</p>\\n<p>它是通过创建一个包装对象，也就是装饰者来包裹真实的对象。\\n所以装饰者可以动态地将责任附加到对象上。若要扩展功能，装饰者提供了比继承更有弹性的方案。</p>\\n<blockquote>\\n<p>装饰者模式，就是在原有的基类的基础上，给对象添加一些额外的职能，对对象进行包装和修饰，以此来展示出一个更为复杂的、功能更为齐全的新对象。装饰者模式跟子类继承的方式非常类似，都是在基类的基础上拓展功能，但是比基类更加的灵活，也符合多组合、少继承的设计原则，避免对象之间的耦合。</p>\\n</blockquote>","autoDesc":true}');export{e as data};
