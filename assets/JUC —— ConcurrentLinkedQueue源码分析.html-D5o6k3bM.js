const e=JSON.parse('{"key":"v-542efe50","path":"/posts/Java%E5%B9%B6%E5%8F%91%E6%8A%80%E6%9C%AF/JUC%20%E2%80%94%E2%80%94%20ConcurrentLinkedQueue%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90.html","title":"ConcurrentLinkedQueue源码分析","lang":"zh-CN","frontmatter":{"title":"ConcurrentLinkedQueue源码分析","date":"2021-12-15T00:24:43.000Z","categories":["JUC"],"tags":["JUC","并发集合类"],"description":"ConcurrentLinkedQueue，基于链表的无界的线程安全队列。 当许多线程将共享对公共集合的访问时， ConcurrentLinkedQueue是合适的选择。 像大多数其他并发集合实现一样，此类不允许使用null元素。 此实现采用了一种高效的非阻塞算法，该算法基于 Maged M. Michael 和 Michael L. Scott 在《Simple、Fast、Practical Non-Blocking and Blocking Concurrent Queue Algorithms》 中描述的算法 。","head":[["meta",{"property":"og:url","content":"https://mister-hope.github.io/posts/Java%E5%B9%B6%E5%8F%91%E6%8A%80%E6%9C%AF/JUC%20%E2%80%94%E2%80%94%20ConcurrentLinkedQueue%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90.html"}],["meta",{"property":"og:site_name","content":"常潇的技术站"}],["meta",{"property":"og:title","content":"ConcurrentLinkedQueue源码分析"}],["meta",{"property":"og:description","content":"ConcurrentLinkedQueue，基于链表的无界的线程安全队列。 当许多线程将共享对公共集合的访问时， ConcurrentLinkedQueue是合适的选择。 像大多数其他并发集合实现一样，此类不允许使用null元素。 此实现采用了一种高效的非阻塞算法，该算法基于 Maged M. Michael 和 Michael L. Scott 在《Simple、Fast、Practical Non-Blocking and Blocking Concurrent Queue Algorithms》 中描述的算法 。"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-02-17T15:13:02.000Z"}],["meta",{"property":"article:author","content":"常潇-KeepCool"}],["meta",{"property":"article:tag","content":"JUC"}],["meta",{"property":"article:tag","content":"并发集合类"}],["meta",{"property":"article:published_time","content":"2021-12-15T00:24:43.000Z"}],["meta",{"property":"article:modified_time","content":"2024-02-17T15:13:02.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"ConcurrentLinkedQueue源码分析\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2021-12-15T00:24:43.000Z\\",\\"dateModified\\":\\"2024-02-17T15:13:02.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"常潇-KeepCool\\",\\"url\\":\\"https://mister-hope.com\\"}]}"]]},"headers":[],"git":{"createdTime":1708182782000,"updatedTime":1708182782000,"contributors":[{"name":"jisongyang","email":"jisongyang@kuaishou.com","commits":1}]},"readingTime":{"minutes":9.38,"words":2813},"filePathRelative":"posts/Java并发技术/JUC —— ConcurrentLinkedQueue源码分析.md","localizedDate":"2021年12月15日","excerpt":"<p><code>ConcurrentLinkedQueue</code>，<strong>基于链表的无界的线程安全队列</strong>。</p>\\n<p>当许多线程将共享对公共集合的访问时， ConcurrentLinkedQueue是合适的选择。 <strong>像大多数其他并发集合实现一样，此类不允许使用null元素</strong>。</p>\\n<p>此实现采用了一种高效的非阻塞算法，该算法基于 Maged M. Michael 和 Michael L. Scott 在《Simple、Fast、Practical Non-Blocking and Blocking Concurrent Queue Algorithms》 中描述的算法 。</p>","autoDesc":true}');export{e as data};
