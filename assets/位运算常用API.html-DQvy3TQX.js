const n=JSON.parse('{"key":"v-2473acec","path":"/posts/%E4%BD%8D%E8%BF%90%E7%AE%97%E5%B8%B8%E7%94%A8API.html","title":"位运算常用API","lang":"zh-CN","frontmatter":{"title":"位运算常用API","date":"2023-01-02T20:43:20.000Z","categories":"算法","tags":null,"description":"#include &lt;iostream&gt; using namespace std; // 将某一位变成 1 void bitTo1(int x, int bit) { x |= 1 &lt;&lt; bit } // 将某一位变成 0 void bitTo0(int x, int bit) { x &amp;= ~(1 &lt;&lt; bit) } // y 是否是 x 的子集 bool checkSubset(int y,int x){ return x-(x^y) == y; } // lowbit运算,求出最后一个的二进制状态下的1对应的十进制数值 int lowbit(int x){ return x&amp;-x; } // 统计 1 的个数 int count(int x){ int cnt = 0; while(x&gt;0){ cnt++; x -= lowbit(x); } return cnt; } int _count(int x){ int cnt = 0; while(x&gt;0){ if(x&amp;1) cnt++; x &gt;&gt;= 1; } return cnt; } // 枚举子集 void subsets(int x){ int cnt = 0; for (int i=x;i;i=(i-1)&amp;x){ cnt++; cout&lt;&lt;i&lt;&lt;endl; cout&lt;&lt;(checkSubset(i,x)?to_string(i)+\\"是\\"+to_string(x)+\\"的子集\\":\\"error\\")&lt;&lt;endl; } // 空集也是子集,所以还要加1 cnt++; } int main() { subsets(123); return 0; }","head":[["meta",{"property":"og:url","content":"https://mister-hope.github.io/posts/%E4%BD%8D%E8%BF%90%E7%AE%97%E5%B8%B8%E7%94%A8API.html"}],["meta",{"property":"og:site_name","content":"常潇的技术站"}],["meta",{"property":"og:title","content":"位运算常用API"}],["meta",{"property":"og:description","content":"#include &lt;iostream&gt; using namespace std; // 将某一位变成 1 void bitTo1(int x, int bit) { x |= 1 &lt;&lt; bit } // 将某一位变成 0 void bitTo0(int x, int bit) { x &amp;= ~(1 &lt;&lt; bit) } // y 是否是 x 的子集 bool checkSubset(int y,int x){ return x-(x^y) == y; } // lowbit运算,求出最后一个的二进制状态下的1对应的十进制数值 int lowbit(int x){ return x&amp;-x; } // 统计 1 的个数 int count(int x){ int cnt = 0; while(x&gt;0){ cnt++; x -= lowbit(x); } return cnt; } int _count(int x){ int cnt = 0; while(x&gt;0){ if(x&amp;1) cnt++; x &gt;&gt;= 1; } return cnt; } // 枚举子集 void subsets(int x){ int cnt = 0; for (int i=x;i;i=(i-1)&amp;x){ cnt++; cout&lt;&lt;i&lt;&lt;endl; cout&lt;&lt;(checkSubset(i,x)?to_string(i)+\\"是\\"+to_string(x)+\\"的子集\\":\\"error\\")&lt;&lt;endl; } // 空集也是子集,所以还要加1 cnt++; } int main() { subsets(123); return 0; }"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-01-18T12:43:38.000Z"}],["meta",{"property":"article:author","content":"常潇-KeepCool"}],["meta",{"property":"article:published_time","content":"2023-01-02T20:43:20.000Z"}],["meta",{"property":"article:modified_time","content":"2024-01-18T12:43:38.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"位运算常用API\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2023-01-02T20:43:20.000Z\\",\\"dateModified\\":\\"2024-01-18T12:43:38.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"常潇-KeepCool\\",\\"url\\":\\"https://mister-hope.com\\"}]}"]]},"headers":[],"git":{"createdTime":1705581818000,"updatedTime":1705581818000,"contributors":[{"name":"jisongyang","email":"jisongyang@kuaishou.com","commits":1}]},"readingTime":{"minutes":0.71,"words":212},"filePathRelative":"posts/位运算常用API.md","localizedDate":"2023年1月3日","excerpt":"<div class=\\"language-cpp line-numbers-mode\\" data-ext=\\"cpp\\"><pre class=\\"language-cpp\\"><code><span class=\\"token macro property\\"><span class=\\"token directive-hash\\">#</span><span class=\\"token directive keyword\\">include</span> <span class=\\"token string\\">&lt;iostream&gt;</span></span>\\n<span class=\\"token keyword\\">using</span> <span class=\\"token keyword\\">namespace</span> std<span class=\\"token punctuation\\">;</span>\\n\\n\\n<span class=\\"token comment\\">// 将某一位变成 1</span>\\n<span class=\\"token keyword\\">void</span> <span class=\\"token function\\">bitTo1</span><span class=\\"token punctuation\\">(</span><span class=\\"token keyword\\">int</span> x<span class=\\"token punctuation\\">,</span> <span class=\\"token keyword\\">int</span> bit<span class=\\"token punctuation\\">)</span> <span class=\\"token punctuation\\">{</span>\\n    x <span class=\\"token operator\\">|=</span> <span class=\\"token number\\">1</span> <span class=\\"token operator\\">&lt;&lt;</span> bit\\n<span class=\\"token punctuation\\">}</span>\\n\\n<span class=\\"token comment\\">// 将某一位变成 0 </span>\\n<span class=\\"token keyword\\">void</span> <span class=\\"token function\\">bitTo0</span><span class=\\"token punctuation\\">(</span><span class=\\"token keyword\\">int</span> x<span class=\\"token punctuation\\">,</span> <span class=\\"token keyword\\">int</span> bit<span class=\\"token punctuation\\">)</span> <span class=\\"token punctuation\\">{</span>\\n    x <span class=\\"token operator\\">&amp;=</span> <span class=\\"token operator\\">~</span><span class=\\"token punctuation\\">(</span><span class=\\"token number\\">1</span> <span class=\\"token operator\\">&lt;&lt;</span> bit<span class=\\"token punctuation\\">)</span>\\n<span class=\\"token punctuation\\">}</span>\\n\\n<span class=\\"token comment\\">// y 是否是 x 的子集</span>\\n<span class=\\"token keyword\\">bool</span> <span class=\\"token function\\">checkSubset</span><span class=\\"token punctuation\\">(</span><span class=\\"token keyword\\">int</span> y<span class=\\"token punctuation\\">,</span><span class=\\"token keyword\\">int</span> x<span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">{</span>\\n    <span class=\\"token keyword\\">return</span> x<span class=\\"token operator\\">-</span><span class=\\"token punctuation\\">(</span>x<span class=\\"token operator\\">^</span>y<span class=\\"token punctuation\\">)</span> <span class=\\"token operator\\">==</span> y<span class=\\"token punctuation\\">;</span>\\n<span class=\\"token punctuation\\">}</span>\\n\\n<span class=\\"token comment\\">// lowbit运算,求出最后一个的二进制状态下的1对应的十进制数值</span>\\n<span class=\\"token keyword\\">int</span> <span class=\\"token function\\">lowbit</span><span class=\\"token punctuation\\">(</span><span class=\\"token keyword\\">int</span> x<span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">{</span>\\n    <span class=\\"token keyword\\">return</span> x<span class=\\"token operator\\">&amp;</span><span class=\\"token operator\\">-</span>x<span class=\\"token punctuation\\">;</span>\\n<span class=\\"token punctuation\\">}</span>\\n\\n<span class=\\"token comment\\">// 统计 1 的个数</span>\\n<span class=\\"token keyword\\">int</span> <span class=\\"token function\\">count</span><span class=\\"token punctuation\\">(</span><span class=\\"token keyword\\">int</span> x<span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">{</span>\\n    <span class=\\"token keyword\\">int</span> cnt <span class=\\"token operator\\">=</span> <span class=\\"token number\\">0</span><span class=\\"token punctuation\\">;</span>\\n    <span class=\\"token keyword\\">while</span><span class=\\"token punctuation\\">(</span>x<span class=\\"token operator\\">&gt;</span><span class=\\"token number\\">0</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">{</span>\\n        cnt<span class=\\"token operator\\">++</span><span class=\\"token punctuation\\">;</span>\\n        x <span class=\\"token operator\\">-=</span> <span class=\\"token function\\">lowbit</span><span class=\\"token punctuation\\">(</span>x<span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n    <span class=\\"token punctuation\\">}</span>\\n    <span class=\\"token keyword\\">return</span> cnt<span class=\\"token punctuation\\">;</span>\\n<span class=\\"token punctuation\\">}</span>\\n\\n<span class=\\"token keyword\\">int</span> <span class=\\"token function\\">_count</span><span class=\\"token punctuation\\">(</span><span class=\\"token keyword\\">int</span> x<span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">{</span>\\n    <span class=\\"token keyword\\">int</span> cnt <span class=\\"token operator\\">=</span> <span class=\\"token number\\">0</span><span class=\\"token punctuation\\">;</span>\\n    <span class=\\"token keyword\\">while</span><span class=\\"token punctuation\\">(</span>x<span class=\\"token operator\\">&gt;</span><span class=\\"token number\\">0</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">{</span>\\n        <span class=\\"token keyword\\">if</span><span class=\\"token punctuation\\">(</span>x<span class=\\"token operator\\">&amp;</span><span class=\\"token number\\">1</span><span class=\\"token punctuation\\">)</span> cnt<span class=\\"token operator\\">++</span><span class=\\"token punctuation\\">;</span>\\n        x <span class=\\"token operator\\">&gt;&gt;=</span> <span class=\\"token number\\">1</span><span class=\\"token punctuation\\">;</span>\\n    <span class=\\"token punctuation\\">}</span>\\n    <span class=\\"token keyword\\">return</span> cnt<span class=\\"token punctuation\\">;</span>\\n<span class=\\"token punctuation\\">}</span>\\n\\n<span class=\\"token comment\\">// 枚举子集</span>\\n<span class=\\"token keyword\\">void</span> <span class=\\"token function\\">subsets</span><span class=\\"token punctuation\\">(</span><span class=\\"token keyword\\">int</span> x<span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">{</span>\\n    <span class=\\"token keyword\\">int</span> cnt <span class=\\"token operator\\">=</span> <span class=\\"token number\\">0</span><span class=\\"token punctuation\\">;</span>\\n    <span class=\\"token keyword\\">for</span> <span class=\\"token punctuation\\">(</span><span class=\\"token keyword\\">int</span> i<span class=\\"token operator\\">=</span>x<span class=\\"token punctuation\\">;</span>i<span class=\\"token punctuation\\">;</span>i<span class=\\"token operator\\">=</span><span class=\\"token punctuation\\">(</span>i<span class=\\"token operator\\">-</span><span class=\\"token number\\">1</span><span class=\\"token punctuation\\">)</span><span class=\\"token operator\\">&amp;</span>x<span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">{</span>\\n        cnt<span class=\\"token operator\\">++</span><span class=\\"token punctuation\\">;</span>\\n        cout<span class=\\"token operator\\">&lt;&lt;</span>i<span class=\\"token operator\\">&lt;&lt;</span>endl<span class=\\"token punctuation\\">;</span>\\n        cout<span class=\\"token operator\\">&lt;&lt;</span><span class=\\"token punctuation\\">(</span><span class=\\"token function\\">checkSubset</span><span class=\\"token punctuation\\">(</span>i<span class=\\"token punctuation\\">,</span>x<span class=\\"token punctuation\\">)</span><span class=\\"token operator\\">?</span><span class=\\"token function\\">to_string</span><span class=\\"token punctuation\\">(</span>i<span class=\\"token punctuation\\">)</span><span class=\\"token operator\\">+</span><span class=\\"token string\\">\\"是\\"</span><span class=\\"token operator\\">+</span><span class=\\"token function\\">to_string</span><span class=\\"token punctuation\\">(</span>x<span class=\\"token punctuation\\">)</span><span class=\\"token operator\\">+</span><span class=\\"token string\\">\\"的子集\\"</span><span class=\\"token operator\\">:</span><span class=\\"token string\\">\\"error\\"</span><span class=\\"token punctuation\\">)</span><span class=\\"token operator\\">&lt;&lt;</span>endl<span class=\\"token punctuation\\">;</span>\\n    <span class=\\"token punctuation\\">}</span>\\n    <span class=\\"token comment\\">// 空集也是子集,所以还要加1</span>\\n    cnt<span class=\\"token operator\\">++</span><span class=\\"token punctuation\\">;</span>\\n<span class=\\"token punctuation\\">}</span>\\n\\n<span class=\\"token keyword\\">int</span> <span class=\\"token function\\">main</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span> <span class=\\"token punctuation\\">{</span>\\n    <span class=\\"token function\\">subsets</span><span class=\\"token punctuation\\">(</span><span class=\\"token number\\">123</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n    <span class=\\"token keyword\\">return</span> <span class=\\"token number\\">0</span><span class=\\"token punctuation\\">;</span>\\n<span class=\\"token punctuation\\">}</span>\\n</code></pre><div class=\\"line-numbers\\" aria-hidden=\\"true\\"><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div></div></div>","autoDesc":true}');export{n as data};
