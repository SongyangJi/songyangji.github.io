const n=JSON.parse('{"key":"v-7c1103c2","path":"/posts/%E5%88%B7%E9%A2%98/%E3%80%8A%E5%88%B7%E9%A2%98%E2%80%94%E2%80%94%E6%8E%92%E5%BA%8F%E7%9B%B8%E5%85%B3%E3%80%8B.html","title":"《刷题——排序相关》","lang":"zh-CN","frontmatter":{"title":"《刷题——排序相关》","date":"2023-01-09T14:45:22.000Z","categories":["算法题"],"tags":["排序"],"description":"快排 裸快排 import java.util.*; public class Solution { /** * 代码中的类名、方法名、参数名已经指定，请勿修改，直接返回方法规定的值即可 * 将给定数组排序 * @param arr int整型一维数组 待排序的数组 * @return int整型一维数组 */ public int[] MySort (int[] arr) { // write code here qsort(arr, 0 , arr.length - 1); return arr; } void qsort(int[] a, int l, int r) { if(l &gt;= r) return; int i = l - 1, j = r + 1, x = a[(l + r)/2]; while(i &lt; j) { do {++i;} while(a[i] &lt; x); // 每次必移动；不等号 do {--j;} while(a[j] &gt; x); // 移动结束 a[j] &lt;= x if(i &lt; j) { int temp = a[i]; a[i] = a[j]; a[j] = temp; } } // j 是临界点 qsort(a, l, j); // 都小于等于 注意 base a[j] &lt;= x qsort(a, j + 1, r); // 都大于 base } }","head":[["meta",{"property":"og:url","content":"https://mister-hope.github.io/posts/%E5%88%B7%E9%A2%98/%E3%80%8A%E5%88%B7%E9%A2%98%E2%80%94%E2%80%94%E6%8E%92%E5%BA%8F%E7%9B%B8%E5%85%B3%E3%80%8B.html"}],["meta",{"property":"og:site_name","content":"常潇的技术站"}],["meta",{"property":"og:title","content":"《刷题——排序相关》"}],["meta",{"property":"og:description","content":"快排 裸快排 import java.util.*; public class Solution { /** * 代码中的类名、方法名、参数名已经指定，请勿修改，直接返回方法规定的值即可 * 将给定数组排序 * @param arr int整型一维数组 待排序的数组 * @return int整型一维数组 */ public int[] MySort (int[] arr) { // write code here qsort(arr, 0 , arr.length - 1); return arr; } void qsort(int[] a, int l, int r) { if(l &gt;= r) return; int i = l - 1, j = r + 1, x = a[(l + r)/2]; while(i &lt; j) { do {++i;} while(a[i] &lt; x); // 每次必移动；不等号 do {--j;} while(a[j] &gt; x); // 移动结束 a[j] &lt;= x if(i &lt; j) { int temp = a[i]; a[i] = a[j]; a[j] = temp; } } // j 是临界点 qsort(a, l, j); // 都小于等于 注意 base a[j] &lt;= x qsort(a, j + 1, r); // 都大于 base } }"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-02-17T15:13:02.000Z"}],["meta",{"property":"article:author","content":"常潇-KeepCool"}],["meta",{"property":"article:tag","content":"排序"}],["meta",{"property":"article:published_time","content":"2023-01-09T14:45:22.000Z"}],["meta",{"property":"article:modified_time","content":"2024-02-17T15:13:02.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"《刷题——排序相关》\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2023-01-09T14:45:22.000Z\\",\\"dateModified\\":\\"2024-02-17T15:13:02.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"常潇-KeepCool\\",\\"url\\":\\"https://mister-hope.com\\"}]}"]]},"headers":[{"level":2,"title":"快排","slug":"快排","link":"#快排","children":[{"level":3,"title":"裸快排","slug":"裸快排","link":"#裸快排","children":[]},{"level":3,"title":"前K大","slug":"前k大","link":"#前k大","children":[]},{"level":3,"title":"第 K 大","slug":"第-k-大","link":"#第-k-大","children":[]},{"level":3,"title":"链表快排","slug":"链表快排","link":"#链表快排","children":[]}]},{"level":2,"title":"归并排序","slug":"归并排序","link":"#归并排序","children":[{"level":3,"title":"数组中的逆序对","slug":"数组中的逆序对","link":"#数组中的逆序对","children":[]},{"level":3,"title":"拼接字符串求最大（排序）","slug":"拼接字符串求最大-排序","link":"#拼接字符串求最大-排序","children":[]}]}],"git":{"createdTime":1705723098000,"updatedTime":1708182782000,"contributors":[{"name":"jisongyang","email":"jisongyang@kuaishou.com","commits":2}]},"readingTime":{"minutes":4.39,"words":1317},"filePathRelative":"posts/刷题/《刷题——排序相关》.md","localizedDate":"2023年1月9日","excerpt":"<h2> 快排</h2>\\n<h3> 裸快排</h3>\\n<div class=\\"language-java line-numbers-mode\\" data-ext=\\"java\\"><pre class=\\"language-java\\"><code><span class=\\"token keyword\\">import</span> <span class=\\"token import\\"><span class=\\"token namespace\\">java<span class=\\"token punctuation\\">.</span>util<span class=\\"token punctuation\\">.</span></span><span class=\\"token operator\\">*</span></span><span class=\\"token punctuation\\">;</span>\\n\\n<span class=\\"token keyword\\">public</span> <span class=\\"token keyword\\">class</span> <span class=\\"token class-name\\">Solution</span> <span class=\\"token punctuation\\">{</span>\\n    <span class=\\"token doc-comment comment\\">/**\\n     * 代码中的类名、方法名、参数名已经指定，请勿修改，直接返回方法规定的值即可\\n     * 将给定数组排序\\n     * <span class=\\"token keyword\\">@param</span> <span class=\\"token parameter\\">arr</span> int整型一维数组 待排序的数组\\n     * <span class=\\"token keyword\\">@return</span> int整型一维数组\\n     */</span>\\n    <span class=\\"token keyword\\">public</span> <span class=\\"token keyword\\">int</span><span class=\\"token punctuation\\">[</span><span class=\\"token punctuation\\">]</span> <span class=\\"token class-name\\">MySort</span> <span class=\\"token punctuation\\">(</span><span class=\\"token keyword\\">int</span><span class=\\"token punctuation\\">[</span><span class=\\"token punctuation\\">]</span> arr<span class=\\"token punctuation\\">)</span> <span class=\\"token punctuation\\">{</span>\\n        <span class=\\"token comment\\">// write code here</span>\\n        <span class=\\"token function\\">qsort</span><span class=\\"token punctuation\\">(</span>arr<span class=\\"token punctuation\\">,</span> <span class=\\"token number\\">0</span> <span class=\\"token punctuation\\">,</span> arr<span class=\\"token punctuation\\">.</span>length <span class=\\"token operator\\">-</span> <span class=\\"token number\\">1</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n        <span class=\\"token keyword\\">return</span> arr<span class=\\"token punctuation\\">;</span>\\n    <span class=\\"token punctuation\\">}</span>\\n    \\n    <span class=\\"token keyword\\">void</span> <span class=\\"token function\\">qsort</span><span class=\\"token punctuation\\">(</span><span class=\\"token keyword\\">int</span><span class=\\"token punctuation\\">[</span><span class=\\"token punctuation\\">]</span> a<span class=\\"token punctuation\\">,</span> <span class=\\"token keyword\\">int</span> l<span class=\\"token punctuation\\">,</span> <span class=\\"token keyword\\">int</span> r<span class=\\"token punctuation\\">)</span> <span class=\\"token punctuation\\">{</span>\\n        <span class=\\"token keyword\\">if</span><span class=\\"token punctuation\\">(</span>l <span class=\\"token operator\\">&gt;=</span> r<span class=\\"token punctuation\\">)</span> <span class=\\"token keyword\\">return</span><span class=\\"token punctuation\\">;</span>\\n        <span class=\\"token keyword\\">int</span> i <span class=\\"token operator\\">=</span> l <span class=\\"token operator\\">-</span> <span class=\\"token number\\">1</span><span class=\\"token punctuation\\">,</span> j <span class=\\"token operator\\">=</span> r <span class=\\"token operator\\">+</span> <span class=\\"token number\\">1</span><span class=\\"token punctuation\\">,</span> x <span class=\\"token operator\\">=</span> a<span class=\\"token punctuation\\">[</span><span class=\\"token punctuation\\">(</span>l <span class=\\"token operator\\">+</span> r<span class=\\"token punctuation\\">)</span><span class=\\"token operator\\">/</span><span class=\\"token number\\">2</span><span class=\\"token punctuation\\">]</span><span class=\\"token punctuation\\">;</span>\\n        <span class=\\"token keyword\\">while</span><span class=\\"token punctuation\\">(</span>i <span class=\\"token operator\\">&lt;</span> j<span class=\\"token punctuation\\">)</span> <span class=\\"token punctuation\\">{</span>\\n            <span class=\\"token keyword\\">do</span> <span class=\\"token punctuation\\">{</span><span class=\\"token operator\\">++</span>i<span class=\\"token punctuation\\">;</span><span class=\\"token punctuation\\">}</span> <span class=\\"token keyword\\">while</span><span class=\\"token punctuation\\">(</span>a<span class=\\"token punctuation\\">[</span>i<span class=\\"token punctuation\\">]</span> <span class=\\"token operator\\">&lt;</span> x<span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span> <span class=\\"token comment\\">// 每次必移动；不等号</span>\\n            <span class=\\"token keyword\\">do</span> <span class=\\"token punctuation\\">{</span><span class=\\"token operator\\">--</span>j<span class=\\"token punctuation\\">;</span><span class=\\"token punctuation\\">}</span> <span class=\\"token keyword\\">while</span><span class=\\"token punctuation\\">(</span>a<span class=\\"token punctuation\\">[</span>j<span class=\\"token punctuation\\">]</span> <span class=\\"token operator\\">&gt;</span> x<span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n            <span class=\\"token comment\\">// 移动结束 a[j] &lt;= x</span>\\n            <span class=\\"token keyword\\">if</span><span class=\\"token punctuation\\">(</span>i <span class=\\"token operator\\">&lt;</span> j<span class=\\"token punctuation\\">)</span> <span class=\\"token punctuation\\">{</span>\\n                <span class=\\"token keyword\\">int</span> temp <span class=\\"token operator\\">=</span> a<span class=\\"token punctuation\\">[</span>i<span class=\\"token punctuation\\">]</span><span class=\\"token punctuation\\">;</span>\\n                a<span class=\\"token punctuation\\">[</span>i<span class=\\"token punctuation\\">]</span> <span class=\\"token operator\\">=</span> a<span class=\\"token punctuation\\">[</span>j<span class=\\"token punctuation\\">]</span><span class=\\"token punctuation\\">;</span>\\n                a<span class=\\"token punctuation\\">[</span>j<span class=\\"token punctuation\\">]</span> <span class=\\"token operator\\">=</span> temp<span class=\\"token punctuation\\">;</span>\\n            <span class=\\"token punctuation\\">}</span>\\n        <span class=\\"token punctuation\\">}</span>\\n        <span class=\\"token comment\\">// j 是临界点</span>\\n        <span class=\\"token function\\">qsort</span><span class=\\"token punctuation\\">(</span>a<span class=\\"token punctuation\\">,</span> l<span class=\\"token punctuation\\">,</span> j<span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span> <span class=\\"token comment\\">// 都小于等于 注意 base a[j] &lt;= x</span>\\n        <span class=\\"token function\\">qsort</span><span class=\\"token punctuation\\">(</span>a<span class=\\"token punctuation\\">,</span> j <span class=\\"token operator\\">+</span> <span class=\\"token number\\">1</span><span class=\\"token punctuation\\">,</span> r<span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span> <span class=\\"token comment\\">// 都大于 base</span>\\n    <span class=\\"token punctuation\\">}</span>\\n    \\n<span class=\\"token punctuation\\">}</span>\\n</code></pre><div class=\\"line-numbers\\" aria-hidden=\\"true\\"><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div></div></div>","autoDesc":true}');export{n as data};
