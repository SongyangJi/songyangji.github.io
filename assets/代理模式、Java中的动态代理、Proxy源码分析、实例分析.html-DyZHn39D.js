const t=JSON.parse('{"key":"v-6b130ab4","path":"/posts/Java%E9%AB%98%E7%BA%A7/%E4%BB%A3%E7%90%86%E6%A8%A1%E5%BC%8F%E3%80%81Java%E4%B8%AD%E7%9A%84%E5%8A%A8%E6%80%81%E4%BB%A3%E7%90%86%E3%80%81Proxy%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90%E3%80%81%E5%AE%9E%E4%BE%8B%E5%88%86%E6%9E%90.html","title":"代理模式、Java中的动态代理、Proxy源码分析、实例分析","lang":"zh-CN","frontmatter":{"title":"代理模式、Java中的动态代理、Proxy源码分析、实例分析","date":"2021-10-02T00:00:00.000Z","categories":["Java"],"tags":["Java语言基础"],"description":"代理 代理模式 目的：为其他对象提供一种代理以控制对这个对象的访问，可以增强、可以削弱。 应用实例：Spring中的AOP 代理的分类：静态代理、动态代理 其中静态代理、动态代理的区别在于代理的生成时期不同 —— 前者在编译前就已经编写好代理类，后者在运行时动态生成代理类。 Java中代理的具体实现，依赖于接口实现(JDK实现的代理)、依赖于继承实现(CGLIB实现的代理)。","head":[["meta",{"property":"og:url","content":"https://mister-hope.github.io/posts/Java%E9%AB%98%E7%BA%A7/%E4%BB%A3%E7%90%86%E6%A8%A1%E5%BC%8F%E3%80%81Java%E4%B8%AD%E7%9A%84%E5%8A%A8%E6%80%81%E4%BB%A3%E7%90%86%E3%80%81Proxy%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90%E3%80%81%E5%AE%9E%E4%BE%8B%E5%88%86%E6%9E%90.html"}],["meta",{"property":"og:site_name","content":"常潇的技术站"}],["meta",{"property":"og:title","content":"代理模式、Java中的动态代理、Proxy源码分析、实例分析"}],["meta",{"property":"og:description","content":"代理 代理模式 目的：为其他对象提供一种代理以控制对这个对象的访问，可以增强、可以削弱。 应用实例：Spring中的AOP 代理的分类：静态代理、动态代理 其中静态代理、动态代理的区别在于代理的生成时期不同 —— 前者在编译前就已经编写好代理类，后者在运行时动态生成代理类。 Java中代理的具体实现，依赖于接口实现(JDK实现的代理)、依赖于继承实现(CGLIB实现的代理)。"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-02-17T15:13:02.000Z"}],["meta",{"property":"article:author","content":"常潇-KeepCool"}],["meta",{"property":"article:tag","content":"Java语言基础"}],["meta",{"property":"article:published_time","content":"2021-10-02T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2024-02-17T15:13:02.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"代理模式、Java中的动态代理、Proxy源码分析、实例分析\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2021-10-02T00:00:00.000Z\\",\\"dateModified\\":\\"2024-02-17T15:13:02.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"常潇-KeepCool\\",\\"url\\":\\"https://mister-hope.com\\"}]}"]]},"headers":[{"level":2,"title":"代理模式","slug":"代理模式","link":"#代理模式","children":[]},{"level":2,"title":"Java中的动态代理","slug":"java中的动态代理","link":"#java中的动态代理","children":[{"level":3,"title":"API","slug":"api","link":"#api","children":[]},{"level":3,"title":"使用方法","slug":"使用方法","link":"#使用方法","children":[]}]},{"level":2,"title":"代理类的特性","slug":"代理类的特性","link":"#代理类的特性","children":[]},{"level":2,"title":"源码分析","slug":"源码分析","link":"#源码分析","children":[]}],"git":{"createdTime":1708182782000,"updatedTime":1708182782000,"contributors":[{"name":"jisongyang","email":"jisongyang@kuaishou.com","commits":1}]},"readingTime":{"minutes":4.46,"words":1338},"filePathRelative":"posts/Java高级/代理模式、Java中的动态代理、Proxy源码分析、实例分析.md","localizedDate":"2021年10月2日","excerpt":"<h1> 代理</h1>\\n<h2> 代理模式</h2>\\n<ul>\\n<li>目的：为其他对象提供一种代理以控制对这个对象的访问，可以增强、可以削弱。</li>\\n<li>应用实例：Spring中的<strong>AOP</strong></li>\\n<li>代理的分类：<strong>静态代理</strong>、<strong>动态代理</strong>\\n其中静态代理、动态代理的区别在于代理的生成时期不同 —— 前者在编译前就已经编写好代理类，后者在运行时动态生成代理类。</li>\\n<li>Java中代理的具体实现，依赖于接口实现(JDK实现的代理)、依赖于继承实现(CGLIB实现的代理)。</li>\\n</ul>","autoDesc":true}');export{t as data};
