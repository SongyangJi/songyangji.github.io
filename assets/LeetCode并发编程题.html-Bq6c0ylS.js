const n=JSON.parse('{"key":"v-7e7e3920","path":"/posts/LeetCode%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B%E9%A2%98.html","title":"LeetCode并发编程题","lang":"zh-CN","frontmatter":{"title":"LeetCode并发编程题","date":"2022-11-30T02:33:13.000Z","categories":"并发编程","tags":["Go","并发编程"],"description":"1114. 按序打印 import java.util.concurrent.locks.Condition; import java.util.concurrent.locks.Lock; import java.util.concurrent.locks.ReentrantLock; class Foo { Lock lock = new ReentrantLock(); boolean firstFinished = false; Condition firstCondition = lock.newCondition(); boolean secondFinished = false; Condition secondCondition = lock.newCondition(); public Foo() { } public void first(Runnable printFirst) throws InterruptedException { lock.lock(); // printFirst.run() outputs \\"first\\". Do not change or remove this line. printFirst.run(); firstCondition.signal(); firstFinished = true; lock.unlock(); } public void second(Runnable printSecond) throws InterruptedException { lock.lock(); if(!firstFinished){ firstCondition.await(); } // printSecond.run() outputs \\"second\\". Do not change or remove this line. printSecond.run(); secondCondition.signal(); secondFinished = true; lock.unlock(); } public void third(Runnable printThird) throws InterruptedException { lock.lock(); if(!secondFinished) { secondCondition.await(); } // printThird.run() outputs \\"third\\". Do not change or remove this line. printThird.run(); lock.unlock(); } }","head":[["meta",{"property":"og:url","content":"https://mister-hope.github.io/posts/LeetCode%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B%E9%A2%98.html"}],["meta",{"property":"og:site_name","content":"常潇的技术站"}],["meta",{"property":"og:title","content":"LeetCode并发编程题"}],["meta",{"property":"og:description","content":"1114. 按序打印 import java.util.concurrent.locks.Condition; import java.util.concurrent.locks.Lock; import java.util.concurrent.locks.ReentrantLock; class Foo { Lock lock = new ReentrantLock(); boolean firstFinished = false; Condition firstCondition = lock.newCondition(); boolean secondFinished = false; Condition secondCondition = lock.newCondition(); public Foo() { } public void first(Runnable printFirst) throws InterruptedException { lock.lock(); // printFirst.run() outputs \\"first\\". Do not change or remove this line. printFirst.run(); firstCondition.signal(); firstFinished = true; lock.unlock(); } public void second(Runnable printSecond) throws InterruptedException { lock.lock(); if(!firstFinished){ firstCondition.await(); } // printSecond.run() outputs \\"second\\". Do not change or remove this line. printSecond.run(); secondCondition.signal(); secondFinished = true; lock.unlock(); } public void third(Runnable printThird) throws InterruptedException { lock.lock(); if(!secondFinished) { secondCondition.await(); } // printThird.run() outputs \\"third\\". Do not change or remove this line. printThird.run(); lock.unlock(); } }"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-01-18T12:43:38.000Z"}],["meta",{"property":"article:author","content":"常潇-KeepCool"}],["meta",{"property":"article:tag","content":"Go"}],["meta",{"property":"article:tag","content":"并发编程"}],["meta",{"property":"article:published_time","content":"2022-11-30T02:33:13.000Z"}],["meta",{"property":"article:modified_time","content":"2024-01-18T12:43:38.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"LeetCode并发编程题\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2022-11-30T02:33:13.000Z\\",\\"dateModified\\":\\"2024-01-18T12:43:38.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"常潇-KeepCool\\",\\"url\\":\\"https://mister-hope.com\\"}]}"]]},"headers":[],"git":{"createdTime":1705581818000,"updatedTime":1705581818000,"contributors":[{"name":"jisongyang","email":"jisongyang@kuaishou.com","commits":1}]},"readingTime":{"minutes":2.49,"words":748},"filePathRelative":"posts/LeetCode并发编程题.md","localizedDate":"2022年11月30日","excerpt":"<h1> 1114. 按序打印</h1>\\n<div class=\\"language-java line-numbers-mode\\" data-ext=\\"java\\"><pre class=\\"language-java\\"><code><span class=\\"token keyword\\">import</span> <span class=\\"token import\\"><span class=\\"token namespace\\">java<span class=\\"token punctuation\\">.</span>util<span class=\\"token punctuation\\">.</span>concurrent<span class=\\"token punctuation\\">.</span>locks<span class=\\"token punctuation\\">.</span></span><span class=\\"token class-name\\">Condition</span></span><span class=\\"token punctuation\\">;</span>\\n<span class=\\"token keyword\\">import</span> <span class=\\"token import\\"><span class=\\"token namespace\\">java<span class=\\"token punctuation\\">.</span>util<span class=\\"token punctuation\\">.</span>concurrent<span class=\\"token punctuation\\">.</span>locks<span class=\\"token punctuation\\">.</span></span><span class=\\"token class-name\\">Lock</span></span><span class=\\"token punctuation\\">;</span>\\n<span class=\\"token keyword\\">import</span> <span class=\\"token import\\"><span class=\\"token namespace\\">java<span class=\\"token punctuation\\">.</span>util<span class=\\"token punctuation\\">.</span>concurrent<span class=\\"token punctuation\\">.</span>locks<span class=\\"token punctuation\\">.</span></span><span class=\\"token class-name\\">ReentrantLock</span></span><span class=\\"token punctuation\\">;</span>\\n\\n<span class=\\"token keyword\\">class</span> <span class=\\"token class-name\\">Foo</span> <span class=\\"token punctuation\\">{</span>\\n\\n\\n    <span class=\\"token class-name\\">Lock</span> lock <span class=\\"token operator\\">=</span> <span class=\\"token keyword\\">new</span> <span class=\\"token class-name\\">ReentrantLock</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n\\n    <span class=\\"token keyword\\">boolean</span> firstFinished <span class=\\"token operator\\">=</span> <span class=\\"token boolean\\">false</span><span class=\\"token punctuation\\">;</span>\\n    <span class=\\"token class-name\\">Condition</span> firstCondition <span class=\\"token operator\\">=</span> lock<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">newCondition</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n\\n    <span class=\\"token keyword\\">boolean</span> secondFinished <span class=\\"token operator\\">=</span> <span class=\\"token boolean\\">false</span><span class=\\"token punctuation\\">;</span>\\n    <span class=\\"token class-name\\">Condition</span> secondCondition <span class=\\"token operator\\">=</span> lock<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">newCondition</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n\\n    <span class=\\"token keyword\\">public</span> <span class=\\"token class-name\\">Foo</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span> <span class=\\"token punctuation\\">{</span>\\n\\n    <span class=\\"token punctuation\\">}</span>\\n\\n    <span class=\\"token keyword\\">public</span> <span class=\\"token keyword\\">void</span> <span class=\\"token function\\">first</span><span class=\\"token punctuation\\">(</span><span class=\\"token class-name\\">Runnable</span> printFirst<span class=\\"token punctuation\\">)</span> <span class=\\"token keyword\\">throws</span> <span class=\\"token class-name\\">InterruptedException</span> <span class=\\"token punctuation\\">{</span>\\n        lock<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">lock</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n        <span class=\\"token comment\\">// printFirst.run() outputs \\"first\\". Do not change or remove this line.</span>\\n        printFirst<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">run</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n        firstCondition<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">signal</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n        firstFinished <span class=\\"token operator\\">=</span> <span class=\\"token boolean\\">true</span><span class=\\"token punctuation\\">;</span>\\n        lock<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">unlock</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n    <span class=\\"token punctuation\\">}</span>\\n\\n    <span class=\\"token keyword\\">public</span> <span class=\\"token keyword\\">void</span> <span class=\\"token function\\">second</span><span class=\\"token punctuation\\">(</span><span class=\\"token class-name\\">Runnable</span> printSecond<span class=\\"token punctuation\\">)</span> <span class=\\"token keyword\\">throws</span> <span class=\\"token class-name\\">InterruptedException</span> <span class=\\"token punctuation\\">{</span>\\n        lock<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">lock</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n        <span class=\\"token keyword\\">if</span><span class=\\"token punctuation\\">(</span><span class=\\"token operator\\">!</span>firstFinished<span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">{</span>\\n            firstCondition<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">await</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n        <span class=\\"token punctuation\\">}</span>\\n        <span class=\\"token comment\\">// printSecond.run() outputs \\"second\\". Do not change or remove this line.</span>\\n        printSecond<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">run</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n        secondCondition<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">signal</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n        secondFinished <span class=\\"token operator\\">=</span> <span class=\\"token boolean\\">true</span><span class=\\"token punctuation\\">;</span>\\n        lock<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">unlock</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n    <span class=\\"token punctuation\\">}</span>\\n\\n    <span class=\\"token keyword\\">public</span> <span class=\\"token keyword\\">void</span> <span class=\\"token function\\">third</span><span class=\\"token punctuation\\">(</span><span class=\\"token class-name\\">Runnable</span> printThird<span class=\\"token punctuation\\">)</span> <span class=\\"token keyword\\">throws</span> <span class=\\"token class-name\\">InterruptedException</span> <span class=\\"token punctuation\\">{</span>\\n        lock<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">lock</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n        <span class=\\"token keyword\\">if</span><span class=\\"token punctuation\\">(</span><span class=\\"token operator\\">!</span>secondFinished<span class=\\"token punctuation\\">)</span> <span class=\\"token punctuation\\">{</span>\\n            secondCondition<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">await</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n        <span class=\\"token punctuation\\">}</span>\\n        <span class=\\"token comment\\">// printThird.run() outputs \\"third\\". Do not change or remove this line.</span>\\n        printThird<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">run</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n        lock<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">unlock</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n    <span class=\\"token punctuation\\">}</span>\\n<span class=\\"token punctuation\\">}</span>\\n</code></pre><div class=\\"line-numbers\\" aria-hidden=\\"true\\"><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div></div></div>","autoDesc":true}');export{n as data};
